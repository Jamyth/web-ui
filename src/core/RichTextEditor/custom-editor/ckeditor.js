/*!
 * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md.
 */
!(function (t) {
    const e = (t.en = t.en || {});
    e.dictionary = Object.assign(e.dictionary || {}, {
        '%0 of %1': '%0 of %1',
        'Align cell text to the bottom': 'Align cell text to the bottom',
        'Align cell text to the center': 'Align cell text to the center',
        'Align cell text to the left': 'Align cell text to the left',
        'Align cell text to the middle': 'Align cell text to the middle',
        'Align cell text to the right': 'Align cell text to the right',
        'Align cell text to the top': 'Align cell text to the top',
        'Align center': 'Align center',
        'Align left': 'Align left',
        'Align right': 'Align right',
        'Align table to the left': 'Align table to the left',
        'Align table to the right': 'Align table to the right',
        Alignment: 'Alignment',
        Aquamarine: 'Aquamarine',
        Background: 'Background',
        Big: 'Big',
        Black: 'Black',
        Blue: 'Blue',
        Bold: 'Bold',
        Border: 'Border',
        'Bulleted List': 'Bulleted List',
        'Bulleted list styles toolbar': 'Bulleted list styles toolbar',
        Cancel: 'Cancel',
        'Cell properties': 'Cell properties',
        'Center table': 'Center table',
        'Change image text alternative': 'Change image text alternative',
        'Choose heading': 'Choose heading',
        Circle: 'Circle',
        Color: 'Color',
        'Color picker': 'Color picker',
        Column: 'Column',
        Dashed: 'Dashed',
        Decimal: 'Decimal',
        'Decimal with leading zero': 'Decimal with leading zero',
        Default: 'Default',
        'Delete column': 'Delete column',
        'Delete row': 'Delete row',
        'Dim grey': 'Dim grey',
        Dimensions: 'Dimensions',
        Disc: 'Disc',
        'Document colors': 'Document colors',
        Dotted: 'Dotted',
        Double: 'Double',
        Downloadable: 'Downloadable',
        'Dropdown toolbar': 'Dropdown toolbar',
        'Edit block': 'Edit block',
        'Edit link': 'Edit link',
        'Editor toolbar': 'Editor toolbar',
        'Font Background Color': 'Font Background Color',
        'Font Color': 'Font Color',
        'Font Family': 'Font Family',
        'Font Size': 'Font Size',
        Green: 'Green',
        Grey: 'Grey',
        Groove: 'Groove',
        'Header column': 'Header column',
        'Header row': 'Header row',
        Heading: 'Heading',
        'Heading 1': 'Heading 1',
        'Heading 2': 'Heading 2',
        'Heading 3': 'Heading 3',
        'Heading 4': 'Heading 4',
        'Heading 5': 'Heading 5',
        'Heading 6': 'Heading 6',
        Height: 'Height',
        'Horizontal line': 'Horizontal line',
        'Horizontal text alignment toolbar': 'Horizontal text alignment toolbar',
        Huge: 'Huge',
        'Image resize list': 'Image resize list',
        'Image toolbar': 'Image toolbar',
        'image widget': 'image widget',
        Insert: 'Insert',
        'Insert column left': 'Insert column left',
        'Insert column right': 'Insert column right',
        'Insert image': 'Insert image',
        'Insert image via URL': 'Insert image via URL',
        'Insert paragraph after block': 'Insert paragraph after block',
        'Insert paragraph before block': 'Insert paragraph before block',
        'Insert row above': 'Insert row above',
        'Insert row below': 'Insert row below',
        'Insert table': 'Insert table',
        Inset: 'Inset',
        Italic: 'Italic',
        Justify: 'Justify',
        'Justify cell text': 'Justify cell text',
        'Light blue': 'Light blue',
        'Light green': 'Light green',
        'Light grey': 'Light grey',
        Link: 'Link',
        'Link URL': 'Link URL',
        'Lower-latin': 'Lower-latin',
        'Lower–roman': 'Lower–roman',
        'Merge cell down': 'Merge cell down',
        'Merge cell left': 'Merge cell left',
        'Merge cell right': 'Merge cell right',
        'Merge cell up': 'Merge cell up',
        'Merge cells': 'Merge cells',
        Next: 'Next',
        None: 'None',
        'Numbered List': 'Numbered List',
        'Numbered list styles toolbar': 'Numbered list styles toolbar',
        'Open in a new tab': 'Open in a new tab',
        'Open link in new tab': 'Open link in new tab',
        Orange: 'Orange',
        Original: 'Original',
        Outset: 'Outset',
        Padding: 'Padding',
        Paragraph: 'Paragraph',
        Previous: 'Previous',
        Purple: 'Purple',
        Red: 'Red',
        Redo: 'Redo',
        'Remove color': 'Remove color',
        'Resize image': 'Resize image',
        'Resize image to %0': 'Resize image to %0',
        'Resize image to the original size': 'Resize image to the original size',
        'Rich Text Editor': 'Rich Text Editor',
        'Rich Text Editor, %0': 'Rich Text Editor, %0',
        Ridge: 'Ridge',
        Row: 'Row',
        Save: 'Save',
        'Select all': 'Select all',
        'Select column': 'Select column',
        'Select row': 'Select row',
        'Show more items': 'Show more items',
        Small: 'Small',
        Solid: 'Solid',
        'Split cell horizontally': 'Split cell horizontally',
        'Split cell vertically': 'Split cell vertically',
        Square: 'Square',
        Strikethrough: 'Strikethrough',
        Style: 'Style',
        Subscript: 'Subscript',
        Superscript: 'Superscript',
        'Table alignment toolbar': 'Table alignment toolbar',
        'Table cell text alignment': 'Table cell text alignment',
        'Table properties': 'Table properties',
        'Table toolbar': 'Table toolbar',
        'Text alignment': 'Text alignment',
        'Text alignment toolbar': 'Text alignment toolbar',
        'Text alternative': 'Text alternative',
        'The color is invalid. Try "#FF0000" or "rgb(255,0,0)" or "red".':
            'The color is invalid. Try "#FF0000" or "rgb(255,0,0)" or "red".',
        'The value is invalid. Try "10px" or "2em" or simply "2".':
            'The value is invalid. Try "10px" or "2em" or simply "2".',
        'This link has no URL': 'This link has no URL',
        Tiny: 'Tiny',
        'Toggle the circle list style': 'Toggle the circle list style',
        'Toggle the decimal list style': 'Toggle the decimal list style',
        'Toggle the decimal with leading zero list style': 'Toggle the decimal with leading zero list style',
        'Toggle the disc list style': 'Toggle the disc list style',
        'Toggle the lower–latin list style': 'Toggle the lower–latin list style',
        'Toggle the lower–roman list style': 'Toggle the lower–roman list style',
        'Toggle the square list style': 'Toggle the square list style',
        'Toggle the upper–latin list style': 'Toggle the upper–latin list style',
        'Toggle the upper–roman list style': 'Toggle the upper–roman list style',
        Turquoise: 'Turquoise',
        Underline: 'Underline',
        Undo: 'Undo',
        Unlink: 'Unlink',
        Update: 'Update',
        'Update image URL': 'Update image URL',
        'Upload failed': 'Upload failed',
        'Upload in progress': 'Upload in progress',
        'Upper-latin': 'Upper-latin',
        'Upper-roman': 'Upper-roman',
        'Vertical text alignment toolbar': 'Vertical text alignment toolbar',
        White: 'White',
        'Widget toolbar': 'Widget toolbar',
        Width: 'Width',
        Yellow: 'Yellow',
    });
})(window.CKEDITOR_TRANSLATIONS || (window.CKEDITOR_TRANSLATIONS = {})),
    (function (t, e) {
        'object' == typeof exports && 'object' == typeof module
            ? (module.exports = e())
            : 'function' == typeof define && define.amd
            ? define([], e)
            : 'object' == typeof exports
            ? (exports.ClassicEditor = e())
            : (t.ClassicEditor = e());
    })(window, function () {
        return (function (t) {
            var e = {};
            function o(i) {
                if (e[i]) return e[i].exports;
                var n = (e[i] = { i: i, l: !1, exports: {} });
                return t[i].call(n.exports, n, n.exports, o), (n.l = !0), n.exports;
            }
            return (
                (o.m = t),
                (o.c = e),
                (o.d = function (t, e, i) {
                    o.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: i });
                }),
                (o.r = function (t) {
                    'undefined' != typeof Symbol &&
                        Symbol.toStringTag &&
                        Object.defineProperty(t, Symbol.toStringTag, { value: 'Module' }),
                        Object.defineProperty(t, '__esModule', { value: !0 });
                }),
                (o.t = function (t, e) {
                    if ((1 & e && (t = o(t)), 8 & e)) return t;
                    if (4 & e && 'object' == typeof t && t && t.__esModule) return t;
                    var i = Object.create(null);
                    if (
                        (o.r(i),
                        Object.defineProperty(i, 'default', { enumerable: !0, value: t }),
                        2 & e && 'string' != typeof t)
                    )
                        for (var n in t)
                            o.d(
                                i,
                                n,
                                function (e) {
                                    return t[e];
                                }.bind(null, n),
                            );
                    return i;
                }),
                (o.n = function (t) {
                    var e =
                        t && t.__esModule
                            ? function () {
                                  return t.default;
                              }
                            : function () {
                                  return t;
                              };
                    return o.d(e, 'a', e), e;
                }),
                (o.o = function (t, e) {
                    return Object.prototype.hasOwnProperty.call(t, e);
                }),
                (o.p = ''),
                o((o.s = 120))
            );
        })([
            function (t, e, o) {
                'use strict';
                o.d(e, 'a', function () {
                    return i;
                }),
                    o.d(e, 'b', function () {
                        return n;
                    });
                class i extends Error {
                    constructor(t, e, o) {
                        super(`${t}${o ? ' ' + JSON.stringify(o) : ''}${r(t)}`),
                            (this.name = 'CKEditorError'),
                            (this.context = e),
                            (this.data = o);
                    }
                    is(t) {
                        return 'CKEditorError' === t;
                    }
                    static rethrowUnexpectedError(t, e) {
                        if (t.is && t.is('CKEditorError')) throw t;
                        const o = new i(t.message, e);
                        throw ((o.stack = t.stack), o);
                    }
                }
                function n(t, e) {
                    console.warn(...s(t, e));
                }
                function r(t) {
                    return (
                        '\nRead more: https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html#error-' +
                        t
                    );
                }
                function s(t, e) {
                    const o = r(t);
                    return e ? [t, e, o] : [t, o];
                }
            },
            function (t, e, o) {
                'use strict';
                var i,
                    n = function () {
                        return void 0 === i && (i = Boolean(window && document && document.all && !window.atob)), i;
                    },
                    r = (function () {
                        var t = {};
                        return function (e) {
                            if (void 0 === t[e]) {
                                var o = document.querySelector(e);
                                if (window.HTMLIFrameElement && o instanceof window.HTMLIFrameElement)
                                    try {
                                        o = o.contentDocument.head;
                                    } catch (t) {
                                        o = null;
                                    }
                                t[e] = o;
                            }
                            return t[e];
                        };
                    })(),
                    s = [];
                function a(t) {
                    for (var e = -1, o = 0; o < s.length; o++)
                        if (s[o].identifier === t) {
                            e = o;
                            break;
                        }
                    return e;
                }
                function l(t, e) {
                    for (var o = {}, i = [], n = 0; n < t.length; n++) {
                        var r = t[n],
                            l = e.base ? r[0] + e.base : r[0],
                            c = o[l] || 0,
                            d = ''.concat(l, ' ').concat(c);
                        o[l] = c + 1;
                        var h = a(d),
                            u = { css: r[1], media: r[2], sourceMap: r[3] };
                        -1 !== h
                            ? (s[h].references++, s[h].updater(u))
                            : s.push({ identifier: d, updater: p(u, e), references: 1 }),
                            i.push(d);
                    }
                    return i;
                }
                function c(t) {
                    var e = document.createElement('style'),
                        i = t.attributes || {};
                    if (void 0 === i.nonce) {
                        var n = o.nc;
                        n && (i.nonce = n);
                    }
                    if (
                        (Object.keys(i).forEach(function (t) {
                            e.setAttribute(t, i[t]);
                        }),
                        'function' == typeof t.insert)
                    )
                        t.insert(e);
                    else {
                        var s = r(t.insert || 'head');
                        if (!s)
                            throw new Error(
                                "Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.",
                            );
                        s.appendChild(e);
                    }
                    return e;
                }
                var d,
                    h =
                        ((d = []),
                        function (t, e) {
                            return (d[t] = e), d.filter(Boolean).join('\n');
                        });
                function u(t, e, o, i) {
                    var n = o ? '' : i.media ? '@media '.concat(i.media, ' {').concat(i.css, '}') : i.css;
                    if (t.styleSheet) t.styleSheet.cssText = h(e, n);
                    else {
                        var r = document.createTextNode(n),
                            s = t.childNodes;
                        s[e] && t.removeChild(s[e]), s.length ? t.insertBefore(r, s[e]) : t.appendChild(r);
                    }
                }
                function f(t, e, o) {
                    var i = o.css,
                        n = o.media,
                        r = o.sourceMap;
                    if (
                        (n ? t.setAttribute('media', n) : t.removeAttribute('media'),
                        r &&
                            'undefined' != typeof btoa &&
                            (i += '\n/*# sourceMappingURL=data:application/json;base64,'.concat(
                                btoa(unescape(encodeURIComponent(JSON.stringify(r)))),
                                ' */',
                            )),
                        t.styleSheet)
                    )
                        t.styleSheet.cssText = i;
                    else {
                        for (; t.firstChild; ) t.removeChild(t.firstChild);
                        t.appendChild(document.createTextNode(i));
                    }
                }
                var m = null,
                    g = 0;
                function p(t, e) {
                    var o, i, n;
                    if (e.singleton) {
                        var r = g++;
                        (o = m || (m = c(e))), (i = u.bind(null, o, r, !1)), (n = u.bind(null, o, r, !0));
                    } else
                        (o = c(e)),
                            (i = f.bind(null, o, e)),
                            (n = function () {
                                !(function (t) {
                                    if (null === t.parentNode) return !1;
                                    t.parentNode.removeChild(t);
                                })(o);
                            });
                    return (
                        i(t),
                        function (e) {
                            if (e) {
                                if (e.css === t.css && e.media === t.media && e.sourceMap === t.sourceMap) return;
                                i((t = e));
                            } else n();
                        }
                    );
                }
                t.exports = function (t, e) {
                    (e = e || {}).singleton || 'boolean' == typeof e.singleton || (e.singleton = n());
                    var o = l((t = t || []), e);
                    return function (t) {
                        if (((t = t || []), '[object Array]' === Object.prototype.toString.call(t))) {
                            for (var i = 0; i < o.length; i++) {
                                var n = a(o[i]);
                                s[n].references--;
                            }
                            for (var r = l(t, e), c = 0; c < o.length; c++) {
                                var d = a(o[c]);
                                0 === s[d].references && (s[d].updater(), s.splice(d, 1));
                            }
                            o = r;
                        }
                    };
                };
            },
            ,
            function (t, e, o) {
                'use strict';
                var i = o(7),
                    n = 'object' == typeof self && self && self.Object === Object && self,
                    r = i.a || n || Function('return this')();
                e.a = r;
            },
            function (t, e, o) {
                'use strict';
                (function (t) {
                    var i = o(3),
                        n = o(15),
                        r = 'object' == typeof exports && exports && !exports.nodeType && exports,
                        s = r && 'object' == typeof t && t && !t.nodeType && t,
                        a = s && s.exports === r ? i.a.Buffer : void 0,
                        l = (a ? a.isBuffer : void 0) || n.a;
                    e.a = l;
                }.call(this, o(9)(t)));
            },
            function (t, e, o) {
                'use strict';
                (function (t) {
                    var i = o(7),
                        n = 'object' == typeof exports && exports && !exports.nodeType && exports,
                        r = n && 'object' == typeof t && t && !t.nodeType && t,
                        s = r && r.exports === n && i.a.process,
                        a = (function () {
                            try {
                                var t = r && r.require && r.require('util').types;
                                return t || (s && s.binding && s.binding('util'));
                            } catch (t) {}
                        })();
                    e.a = a;
                }.call(this, o(9)(t)));
            },
            function (t, e, o) {
                'use strict';
                (function (t) {
                    var e = o(0);
                    const i = 'object' == typeof window ? window : t;
                    if (i.CKEDITOR_VERSION) throw new e.a('ckeditor-duplicated-modules', null);
                    i.CKEDITOR_VERSION = '26.0.0';
                }.call(this, o(11)));
            },
            function (t, e, o) {
                'use strict';
                (function (t) {
                    var o = 'object' == typeof t && t && t.Object === Object && t;
                    e.a = o;
                }.call(this, o(11)));
            },
            function (t, e, o) {
                'use strict';
                (function (t) {
                    var i = o(3),
                        n = 'object' == typeof exports && exports && !exports.nodeType && exports,
                        r = n && 'object' == typeof t && t && !t.nodeType && t,
                        s = r && r.exports === n ? i.a.Buffer : void 0,
                        a = s ? s.allocUnsafe : void 0;
                    e.a = function (t, e) {
                        if (e) return t.slice();
                        var o = t.length,
                            i = a ? a(o) : new t.constructor(o);
                        return t.copy(i), i;
                    };
                }.call(this, o(9)(t)));
            },
            function (t, e) {
                t.exports = function (t) {
                    if (!t.webpackPolyfill) {
                        var e = Object.create(t);
                        e.children || (e.children = []),
                            Object.defineProperty(e, 'loaded', {
                                enumerable: !0,
                                get: function () {
                                    return e.l;
                                },
                            }),
                            Object.defineProperty(e, 'id', {
                                enumerable: !0,
                                get: function () {
                                    return e.i;
                                },
                            }),
                            Object.defineProperty(e, 'exports', { enumerable: !0 }),
                            (e.webpackPolyfill = 1);
                    }
                    return e;
                };
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(79);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                var o;
                o = (function () {
                    return this;
                })();
                try {
                    o = o || new Function('return this')();
                } catch (t) {
                    'object' == typeof window && (o = window);
                }
                t.exports = o;
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(68);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(114);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(115);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e, o) {
                'use strict';
                e.a = function () {
                    return !1;
                };
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(17);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck-hidden{display:none!important}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{box-sizing:border-box;width:auto;height:auto;position:static}:root{--ck-z-default:1;--ck-z-modal:calc(var(--ck-z-default) + 999)}.ck-transitions-disabled,.ck-transitions-disabled *{transition:none!important}:root{--ck-color-base-foreground:#fafafa;--ck-color-base-background:#fff;--ck-color-base-border:#c4c4c4;--ck-color-base-action:#61b045;--ck-color-base-focus:#6cb5f9;--ck-color-base-text:#333;--ck-color-base-active:#198cf0;--ck-color-base-active-focus:#0e7fe1;--ck-color-base-error:#db3700;--ck-color-focus-border-coordinates:208,79%,51%;--ck-color-focus-border:hsl(var(--ck-color-focus-border-coordinates));--ck-color-focus-outer-shadow:#bcdefb;--ck-color-focus-disabled-shadow:rgba(119,186,248,0.3);--ck-color-focus-error-shadow:rgba(255,64,31,0.3);--ck-color-text:var(--ck-color-base-text);--ck-color-shadow-drop:rgba(0,0,0,0.15);--ck-color-shadow-drop-active:rgba(0,0,0,0.2);--ck-color-shadow-inner:rgba(0,0,0,0.1);--ck-color-button-default-background:transparent;--ck-color-button-default-hover-background:#e6e6e6;--ck-color-button-default-active-background:#d9d9d9;--ck-color-button-default-active-shadow:#bfbfbf;--ck-color-button-default-disabled-background:transparent;--ck-color-button-on-background:#dedede;--ck-color-button-on-hover-background:#c4c4c4;--ck-color-button-on-active-background:#bababa;--ck-color-button-on-active-shadow:#a1a1a1;--ck-color-button-on-disabled-background:#dedede;--ck-color-button-action-background:var(--ck-color-base-action);--ck-color-button-action-hover-background:#579e3d;--ck-color-button-action-active-background:#53973b;--ck-color-button-action-active-shadow:#498433;--ck-color-button-action-disabled-background:#7ec365;--ck-color-button-action-text:var(--ck-color-base-background);--ck-color-button-save:#008a00;--ck-color-button-cancel:#db3700;--ck-color-switch-button-off-background:#b0b0b0;--ck-color-switch-button-off-hover-background:#a3a3a3;--ck-color-switch-button-on-background:var(--ck-color-button-action-background);--ck-color-switch-button-on-hover-background:#579e3d;--ck-color-switch-button-inner-background:var(--ck-color-base-background);--ck-color-switch-button-inner-shadow:rgba(0,0,0,0.1);--ck-color-dropdown-panel-background:var(--ck-color-base-background);--ck-color-dropdown-panel-border:var(--ck-color-base-border);--ck-color-input-background:var(--ck-color-base-background);--ck-color-input-border:#c7c7c7;--ck-color-input-error-border:var(--ck-color-base-error);--ck-color-input-text:var(--ck-color-base-text);--ck-color-input-disabled-background:#f2f2f2;--ck-color-input-disabled-border:#c7c7c7;--ck-color-input-disabled-text:#757575;--ck-color-list-background:var(--ck-color-base-background);--ck-color-list-button-hover-background:var(--ck-color-button-default-hover-background);--ck-color-list-button-on-background:var(--ck-color-base-active);--ck-color-list-button-on-background-focus:var(--ck-color-base-active-focus);--ck-color-list-button-on-text:var(--ck-color-base-background);--ck-color-panel-background:var(--ck-color-base-background);--ck-color-panel-border:var(--ck-color-base-border);--ck-color-toolbar-background:var(--ck-color-base-foreground);--ck-color-toolbar-border:var(--ck-color-base-border);--ck-color-tooltip-background:var(--ck-color-base-text);--ck-color-tooltip-text:var(--ck-color-base-background);--ck-color-engine-placeholder-text:#707070;--ck-color-upload-bar-background:#6cb5f9;--ck-color-link-default:#0000f0;--ck-color-link-selected-background:rgba(31,177,255,0.1);--ck-color-link-fake-selection:rgba(31,177,255,0.3);--ck-disabled-opacity:.5;--ck-focus-outer-shadow-geometry:0 0 0 3px;--ck-focus-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-outer-shadow);--ck-focus-disabled-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-disabled-shadow);--ck-focus-error-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-error-shadow);--ck-focus-ring:1px solid var(--ck-color-focus-border);--ck-font-size-base:13px;--ck-line-height-base:1.84615;--ck-font-face:Helvetica,Arial,Tahoma,Verdana,Sans-Serif;--ck-font-size-tiny:0.7em;--ck-font-size-small:0.75em;--ck-font-size-normal:1em;--ck-font-size-big:1.4em;--ck-font-size-large:1.8em;--ck-ui-component-min-height:2.3em}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{margin:0;padding:0;border:0;background:transparent;text-decoration:none;vertical-align:middle;transition:none;word-wrap:break-word}.ck.ck-reset_all,.ck.ck-reset_all *{border-collapse:collapse;font:normal normal normal var(--ck-font-size-base)/var(--ck-line-height-base) var(--ck-font-face);color:var(--ck-color-text);text-align:left;white-space:nowrap;cursor:auto;float:none}.ck.ck-reset_all .ck-rtl *{text-align:right}.ck.ck-reset_all iframe{vertical-align:inherit}.ck.ck-reset_all textarea{white-space:pre-wrap}.ck.ck-reset_all input[type=password],.ck.ck-reset_all input[type=text],.ck.ck-reset_all textarea{cursor:text}.ck.ck-reset_all input[type=password][disabled],.ck.ck-reset_all input[type=text][disabled],.ck.ck-reset_all textarea[disabled]{cursor:default}.ck.ck-reset_all fieldset{padding:10px;border:2px groove #dfdee3}.ck.ck-reset_all button::-moz-focus-inner{padding:0;border:0}.ck[dir=rtl],.ck[dir=rtl] .ck{text-align:right}:root{--ck-border-radius:2px;--ck-inner-shadow:2px 2px 3px var(--ck-color-shadow-inner) inset;--ck-drop-shadow:0 1px 2px 1px var(--ck-color-shadow-drop);--ck-drop-shadow-active:0 3px 6px 1px var(--ck-color-shadow-drop-active);--ck-spacing-unit:0.6em;--ck-spacing-large:calc(var(--ck-spacing-unit)*1.5);--ck-spacing-standard:var(--ck-spacing-unit);--ck-spacing-medium:calc(var(--ck-spacing-unit)*0.8);--ck-spacing-small:calc(var(--ck-spacing-unit)*0.5);--ck-spacing-tiny:calc(var(--ck-spacing-unit)*0.3);--ck-spacing-extra-tiny:calc(var(--ck-spacing-unit)*0.16)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(19);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-icon{vertical-align:middle}:root{--ck-icon-size:calc(var(--ck-line-height-base)*var(--ck-font-size-normal))}.ck.ck-icon{width:var(--ck-icon-size);height:var(--ck-icon-size);font-size:.8333350694em;will-change:transform}.ck.ck-icon,.ck.ck-icon *{color:inherit;cursor:inherit}.ck.ck-icon :not([fill]){fill:currentColor}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(21);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-tooltip,.ck.ck-tooltip .ck-tooltip__text:after{position:absolute;pointer-events:none;-webkit-backface-visibility:hidden}.ck.ck-tooltip{visibility:hidden;opacity:0;display:none;z-index:var(--ck-z-modal)}.ck.ck-tooltip .ck-tooltip__text{display:inline-block}.ck.ck-tooltip .ck-tooltip__text:after{content:"";width:0;height:0}:root{--ck-tooltip-arrow-size:5px}.ck.ck-tooltip{left:50%;top:0;transition:opacity .2s ease-in-out .2s}.ck.ck-tooltip .ck-tooltip__text{border-radius:0}.ck-rounded-corners .ck.ck-tooltip .ck-tooltip__text,.ck.ck-tooltip .ck-tooltip__text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-tooltip .ck-tooltip__text{font-size:.9em;line-height:1.5;color:var(--ck-color-tooltip-text);padding:var(--ck-spacing-small) var(--ck-spacing-medium);background:var(--ck-color-tooltip-background);position:relative;left:-50%}.ck.ck-tooltip .ck-tooltip__text:after{transition:opacity .2s ease-in-out .2s;border-style:solid;left:50%}.ck.ck-tooltip.ck-tooltip_s,.ck.ck-tooltip.ck-tooltip_se,.ck.ck-tooltip.ck-tooltip_sw{bottom:calc(var(--ck-tooltip-arrow-size)*-1);transform:translateY(100%)}.ck.ck-tooltip.ck-tooltip_s .ck-tooltip__text:after,.ck.ck-tooltip.ck-tooltip_se .ck-tooltip__text:after,.ck.ck-tooltip.ck-tooltip_sw .ck-tooltip__text:after{top:calc(var(--ck-tooltip-arrow-size)*-1 + 1px);transform:translateX(-50%);border-left-color:transparent;border-bottom-color:var(--ck-color-tooltip-background);border-right-color:transparent;border-top-color:transparent;border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:var(--ck-tooltip-arrow-size);border-right-width:var(--ck-tooltip-arrow-size);border-top-width:0}.ck.ck-tooltip.ck-tooltip_sw{right:50%;left:auto}.ck.ck-tooltip.ck-tooltip_sw .ck-tooltip__text{left:auto;right:calc(var(--ck-tooltip-arrow-size)*-2)}.ck.ck-tooltip.ck-tooltip_sw .ck-tooltip__text:after{left:auto;right:0}.ck.ck-tooltip.ck-tooltip_se{left:50%;right:auto}.ck.ck-tooltip.ck-tooltip_se .ck-tooltip__text{right:auto;left:calc(var(--ck-tooltip-arrow-size)*-2)}.ck.ck-tooltip.ck-tooltip_se .ck-tooltip__text:after{right:auto;left:0;transform:translateX(50%)}.ck.ck-tooltip.ck-tooltip_n{top:calc(var(--ck-tooltip-arrow-size)*-1);transform:translateY(-100%)}.ck.ck-tooltip.ck-tooltip_n .ck-tooltip__text:after{bottom:calc(var(--ck-tooltip-arrow-size)*-1);transform:translateX(-50%);border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;border-top-color:var(--ck-color-tooltip-background);border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:0;border-right-width:var(--ck-tooltip-arrow-size);border-top-width:var(--ck-tooltip-arrow-size)}.ck.ck-tooltip.ck-tooltip_e{left:calc(100% + var(--ck-tooltip-arrow-size));top:50%}.ck.ck-tooltip.ck-tooltip_e .ck-tooltip__text{left:0;transform:translateY(-50%)}.ck.ck-tooltip.ck-tooltip_e .ck-tooltip__text:after{left:calc(var(--ck-tooltip-arrow-size)*-1);top:calc(50% - var(--ck-tooltip-arrow-size)*1);border-left-color:transparent;border-bottom-color:transparent;border-right-color:var(--ck-color-tooltip-background);border-top-color:transparent;border-left-width:0;border-bottom-width:var(--ck-tooltip-arrow-size);border-right-width:var(--ck-tooltip-arrow-size);border-top-width:var(--ck-tooltip-arrow-size)}.ck.ck-tooltip.ck-tooltip_w{right:calc(100% + var(--ck-tooltip-arrow-size));left:auto;top:50%}.ck.ck-tooltip.ck-tooltip_w .ck-tooltip__text{left:0;transform:translateY(-50%)}.ck.ck-tooltip.ck-tooltip_w .ck-tooltip__text:after{left:100%;top:calc(50% - var(--ck-tooltip-arrow-size)*1);border-left-color:var(--ck-color-tooltip-background);border-bottom-color:transparent;border-right-color:transparent;border-top-color:transparent;border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:var(--ck-tooltip-arrow-size);border-right-width:0;border-top-width:var(--ck-tooltip-arrow-size)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(23);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-button,a.ck.ck-button{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:block}@media (hover:none){.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:none}}.ck.ck-button,a.ck.ck-button{position:relative;display:inline-flex;align-items:center;justify-content:left}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{display:none}.ck.ck-button.ck-button_with-text .ck-button__label,a.ck.ck-button.ck-button_with-text .ck-button__label{display:inline-block}.ck.ck-button:not(.ck-button_with-text),a.ck.ck-button:not(.ck-button_with-text){justify-content:center}.ck.ck-button:hover .ck-tooltip,a.ck.ck-button:hover .ck-tooltip{visibility:visible;opacity:1}.ck.ck-button:focus:not(:hover) .ck-tooltip,a.ck.ck-button:focus:not(:hover) .ck-tooltip{display:none}.ck.ck-button,a.ck.ck-button{background:var(--ck-color-button-default-background)}.ck.ck-button:not(.ck-disabled):hover,a.ck.ck-button:not(.ck-disabled):hover{background:var(--ck-color-button-default-hover-background)}.ck.ck-button:not(.ck-disabled):active,a.ck.ck-button:not(.ck-disabled):active{background:var(--ck-color-button-default-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-default-active-shadow)}.ck.ck-button.ck-disabled,a.ck.ck-button.ck-disabled{background:var(--ck-color-button-default-disabled-background)}.ck.ck-button,a.ck.ck-button{border-radius:0}.ck-rounded-corners .ck.ck-button,.ck-rounded-corners a.ck.ck-button,.ck.ck-button.ck-rounded-corners,a.ck.ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-button,a.ck.ck-button{white-space:nowrap;cursor:default;vertical-align:middle;padding:var(--ck-spacing-tiny);text-align:center;min-width:var(--ck-ui-component-min-height);min-height:var(--ck-ui-component-min-height);line-height:1;font-size:inherit;border:1px solid transparent;transition:box-shadow .2s ease-in-out,border .2s ease-in-out;-webkit-appearance:none}.ck.ck-button:active,.ck.ck-button:focus,a.ck.ck-button:active,a.ck.ck-button:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),0 0}.ck.ck-button .ck-button__icon use,.ck.ck-button .ck-button__icon use *,a.ck.ck-button .ck-button__icon use,a.ck.ck-button .ck-button__icon use *{color:inherit}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{font-size:inherit;font-weight:inherit;color:inherit;cursor:inherit;vertical-align:middle}[dir=ltr] .ck.ck-button .ck-button__label,[dir=ltr] a.ck.ck-button .ck-button__label{text-align:left}[dir=rtl] .ck.ck-button .ck-button__label,[dir=rtl] a.ck.ck-button .ck-button__label{text-align:right}.ck.ck-button .ck-button__keystroke,a.ck.ck-button .ck-button__keystroke{color:inherit}[dir=ltr] .ck.ck-button .ck-button__keystroke,[dir=ltr] a.ck.ck-button .ck-button__keystroke{margin-left:var(--ck-spacing-large)}[dir=rtl] .ck.ck-button .ck-button__keystroke,[dir=rtl] a.ck.ck-button .ck-button__keystroke{margin-right:var(--ck-spacing-large)}.ck.ck-button .ck-button__keystroke,a.ck.ck-button .ck-button__keystroke{font-weight:700;opacity:.7}.ck.ck-button.ck-disabled:active,.ck.ck-button.ck-disabled:focus,a.ck.ck-button.ck-disabled:active,a.ck.ck-button.ck-disabled:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),0 0}.ck.ck-button.ck-disabled .ck-button__icon,a.ck.ck-button.ck-disabled .ck-button__icon{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-disabled .ck-button__label,a.ck.ck-button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-disabled .ck-button__keystroke,a.ck.ck-button.ck-disabled .ck-button__keystroke{opacity:.3}.ck.ck-button.ck-button_with-text,a.ck.ck-button.ck-button_with-text{padding:var(--ck-spacing-tiny) var(--ck-spacing-standard)}[dir=ltr] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=ltr] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-left:calc(var(--ck-spacing-small)*-1);margin-right:var(--ck-spacing-small)}[dir=rtl] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=rtl] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-right:calc(var(--ck-spacing-small)*-1);margin-left:var(--ck-spacing-small)}.ck.ck-button.ck-button_with-keystroke .ck-button__label,a.ck.ck-button.ck-button_with-keystroke .ck-button__label{flex-grow:1}.ck.ck-button.ck-on,a.ck.ck-button.ck-on{background:var(--ck-color-button-on-background)}.ck.ck-button.ck-on:not(.ck-disabled):hover,a.ck.ck-button.ck-on:not(.ck-disabled):hover{background:var(--ck-color-button-on-hover-background)}.ck.ck-button.ck-on:not(.ck-disabled):active,a.ck.ck-button.ck-on:not(.ck-disabled):active{background:var(--ck-color-button-on-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-on-active-shadow)}.ck.ck-button.ck-on.ck-disabled,a.ck.ck-button.ck-on.ck-disabled{background:var(--ck-color-button-on-disabled-background)}.ck.ck-button.ck-button-save,a.ck.ck-button.ck-button-save{color:var(--ck-color-button-save)}.ck.ck-button.ck-button-cancel,a.ck.ck-button.ck-button-cancel{color:var(--ck-color-button-cancel)}.ck.ck-button-action,a.ck.ck-button-action{background:var(--ck-color-button-action-background)}.ck.ck-button-action:not(.ck-disabled):hover,a.ck.ck-button-action:not(.ck-disabled):hover{background:var(--ck-color-button-action-hover-background)}.ck.ck-button-action:not(.ck-disabled):active,a.ck.ck-button-action:not(.ck-disabled):active{background:var(--ck-color-button-action-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-action-active-shadow)}.ck.ck-button-action.ck-disabled,a.ck.ck-button-action.ck-disabled{background:var(--ck-color-button-action-disabled-background)}.ck.ck-button-action,a.ck.ck-button-action{color:var(--ck-color-button-action-text)}.ck.ck-button-bold,a.ck.ck-button-bold{font-weight:700}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(25);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{display:block}:root{--ck-switch-button-toggle-width:2.6153846154em;--ck-switch-button-toggle-inner-size:1.0769230769em;--ck-switch-button-toggle-spacing:1px;--ck-switch-button-translation:calc(var(--ck-switch-button-toggle-width) - var(--ck-switch-button-toggle-inner-size) - var(--ck-switch-button-toggle-spacing)*2)}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__label{margin-right:calc(var(--ck-spacing-large)*2)}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__label{margin-left:calc(var(--ck-spacing-large)*2)}.ck.ck-button.ck-switchbutton .ck-button__toggle{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle.ck-rounded-corners{border-radius:var(--ck-border-radius)}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-left:auto}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-right:auto}.ck.ck-button.ck-switchbutton .ck-button__toggle{transition:background .4s ease;width:var(--ck-switch-button-toggle-width);background:var(--ck-color-switch-button-off-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner.ck-rounded-corners{border-radius:var(--ck-border-radius);border-radius:calc(var(--ck-border-radius)*0.5)}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{margin:var(--ck-switch-button-toggle-spacing);width:var(--ck-switch-button-toggle-inner-size);height:var(--ck-switch-button-toggle-inner-size);background:var(--ck-color-switch-button-inner-background);transition:all .3s ease}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover{background:var(--ck-color-switch-button-off-hover-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover .ck-button__toggle__inner{box-shadow:0 0 0 5px var(--ck-color-switch-button-inner-shadow)}.ck.ck-button.ck-switchbutton.ck-disabled .ck-button__toggle{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle{background:var(--ck-color-switch-button-on-background)}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle:hover{background:var(--ck-color-switch-button-on-hover-background)}[dir=ltr] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(var(--ck-switch-button-translation))}[dir=rtl] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(calc(var(--ck-switch-button-translation)*-1))}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(27);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-color-grid{display:grid}:root{--ck-color-grid-tile-size:24px;--ck-color-color-grid-check-icon:#000}.ck.ck-color-grid{grid-gap:5px;padding:8px}.ck.ck-color-grid__tile{width:var(--ck-color-grid-tile-size);height:var(--ck-color-grid-tile-size);min-width:var(--ck-color-grid-tile-size);min-height:var(--ck-color-grid-tile-size);padding:0;transition:box-shadow .2s ease;border:0}.ck.ck-color-grid__tile.ck-disabled{cursor:unset;transition:unset}.ck.ck-color-grid__tile.ck-color-table__color-tile_bordered{box-shadow:0 0 0 1px var(--ck-color-base-border)}.ck.ck-color-grid__tile .ck.ck-icon{display:none;color:var(--ck-color-color-grid-check-icon)}.ck.ck-color-grid__tile.ck-on{box-shadow:inset 0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-base-text)}.ck.ck-color-grid__tile.ck-on .ck.ck-icon{display:block}.ck.ck-color-grid__tile.ck-on,.ck.ck-color-grid__tile:focus:not(.ck-disabled),.ck.ck-color-grid__tile:hover:not(.ck-disabled){border:0}.ck.ck-color-grid__tile:focus:not(.ck-disabled),.ck.ck-color-grid__tile:hover:not(.ck-disabled){box-shadow:inset 0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-focus-border)}.ck.ck-color-grid__label{padding:0 var(--ck-spacing-standard)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(29);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-splitbutton{font-size:inherit}.ck.ck-splitbutton .ck-splitbutton__action:focus{z-index:calc(var(--ck-z-default) + 1)}.ck.ck-splitbutton.ck-splitbutton_open>.ck-button .ck-tooltip{display:none}:root{--ck-color-split-button-hover-background:#ebebeb;--ck-color-split-button-hover-border:#b3b3b3}[dir=ltr] .ck.ck-splitbutton>.ck-splitbutton__action{border-top-right-radius:unset;border-bottom-right-radius:unset}[dir=rtl] .ck.ck-splitbutton>.ck-splitbutton__action{border-top-left-radius:unset;border-bottom-left-radius:unset}.ck.ck-splitbutton>.ck-splitbutton__arrow{min-width:unset}[dir=ltr] .ck.ck-splitbutton>.ck-splitbutton__arrow{border-radius:0}.ck-rounded-corners [dir=ltr] .ck.ck-splitbutton>.ck-splitbutton__arrow,[dir=ltr] .ck.ck-splitbutton>.ck-splitbutton__arrow.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:unset;border-bottom-left-radius:unset}[dir=rtl] .ck.ck-splitbutton>.ck-splitbutton__arrow{border-top-right-radius:unset;border-bottom-right-radius:unset}.ck.ck-splitbutton>.ck-splitbutton__arrow svg{width:var(--ck-dropdown-arrow-size)}.ck.ck-splitbutton.ck-splitbutton_open>.ck-button:not(.ck-on):not(.ck-disabled):not(:hover),.ck.ck-splitbutton:hover>.ck-button:not(.ck-on):not(.ck-disabled):not(:hover){background:var(--ck-color-split-button-hover-background)}[dir=ltr] .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow:not(.ck-disabled),[dir=ltr] .ck.ck-splitbutton:hover>.ck-splitbutton__arrow:not(.ck-disabled){border-left-color:var(--ck-color-split-button-hover-border)}[dir=rtl] .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow:not(.ck-disabled),[dir=rtl] .ck.ck-splitbutton:hover>.ck-splitbutton__arrow:not(.ck-disabled){border-right-color:var(--ck-color-split-button-hover-border)}.ck.ck-splitbutton.ck-splitbutton_open{border-radius:0}.ck-rounded-corners .ck.ck-splitbutton.ck-splitbutton_open,.ck.ck-splitbutton.ck-splitbutton_open.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck-rounded-corners .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__action,.ck.ck-splitbutton.ck-splitbutton_open.ck-rounded-corners>.ck-splitbutton__action{border-bottom-left-radius:0}.ck-rounded-corners .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow,.ck.ck-splitbutton.ck-splitbutton_open.ck-rounded-corners>.ck-splitbutton__arrow{border-bottom-right-radius:0}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(31);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    ':root{--ck-dropdown-max-width:75vw}.ck.ck-dropdown{display:inline-block;position:relative}.ck.ck-dropdown .ck-dropdown__arrow{pointer-events:none;z-index:var(--ck-z-default)}.ck.ck-dropdown .ck-button.ck-dropdown__button{width:100%}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on .ck-tooltip{display:none}.ck.ck-dropdown .ck-dropdown__panel{-webkit-backface-visibility:hidden;display:none;z-index:var(--ck-z-modal);max-width:var(--ck-dropdown-max-width);position:absolute}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel-visible{display:inline-block}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_n,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nme,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nmw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw{bottom:100%}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_s,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sme,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_smw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{top:100%;bottom:auto}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se{left:0}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{right:0}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_n,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_s{left:50%;transform:translateX(-50%)}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nmw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_smw{left:75%;transform:translateX(-75%)}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nme,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sme{left:25%;transform:translateX(-25%)}.ck.ck-toolbar .ck-dropdown__panel{z-index:calc(var(--ck-z-modal) + 1)}:root{--ck-dropdown-arrow-size:calc(var(--ck-icon-size)*0.5)}.ck.ck-dropdown{font-size:inherit}.ck.ck-dropdown .ck-dropdown__arrow{width:var(--ck-dropdown-arrow-size)}[dir=ltr] .ck.ck-dropdown .ck-dropdown__arrow{right:var(--ck-spacing-standard);margin-left:var(--ck-spacing-standard)}[dir=rtl] .ck.ck-dropdown .ck-dropdown__arrow{left:var(--ck-spacing-standard);margin-right:var(--ck-spacing-small)}.ck.ck-dropdown.ck-disabled .ck-dropdown__arrow{opacity:var(--ck-disabled-opacity)}[dir=ltr] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-left:var(--ck-spacing-small)}[dir=rtl] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-right:var(--ck-spacing-small)}.ck.ck-dropdown .ck-button.ck-dropdown__button .ck-button__label{width:7em;overflow:hidden;text-overflow:ellipsis}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on{border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-dropdown__button_label-width_auto .ck-button__label{width:auto}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-off:active,.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on:active{box-shadow:none}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-off:active:focus,.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on:active:focus{box-shadow:var(--ck-focus-outer-shadow),0 0}.ck.ck-dropdown__panel{border-radius:0}.ck-rounded-corners .ck.ck-dropdown__panel,.ck.ck-dropdown__panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-dropdown__panel{box-shadow:var(--ck-drop-shadow),0 0;background:var(--ck-color-dropdown-panel-background);border:1px solid var(--ck-color-dropdown-panel-border);bottom:0;min-width:100%}.ck.ck-dropdown__panel.ck-dropdown__panel_se{border-top-left-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_sw{border-top-right-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_ne{border-bottom-left-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_nw{border-bottom-right-radius:0}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(33);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-toolbar{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-flow:row nowrap;align-items:center}.ck.ck-toolbar>.ck-toolbar__items{display:flex;flex-flow:row wrap;align-items:center;flex-grow:1}.ck.ck-toolbar .ck.ck-toolbar__separator{display:inline-block}.ck.ck-toolbar .ck.ck-toolbar__separator:first-child,.ck.ck-toolbar .ck.ck-toolbar__separator:last-child{display:none}.ck.ck-toolbar .ck-toolbar__line-break{flex-basis:100%}.ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar.ck-toolbar_vertical>.ck-toolbar__items{flex-direction:column}.ck.ck-toolbar.ck-toolbar_floating>.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown>.ck-dropdown__button .ck-dropdown__arrow{display:none}.ck.ck-toolbar{border-radius:0}.ck-rounded-corners .ck.ck-toolbar,.ck.ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-toolbar{background:var(--ck-color-toolbar-background);padding:0 var(--ck-spacing-small);border:1px solid var(--ck-color-toolbar-border)}.ck.ck-toolbar .ck.ck-toolbar__separator{align-self:stretch;width:1px;min-width:1px;background:var(--ck-color-toolbar-border);margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck.ck-toolbar .ck-toolbar__line-break{height:0}.ck.ck-toolbar>.ck-toolbar__items>:not(.ck-toolbar__line-break){margin-right:var(--ck-spacing-small)}.ck.ck-toolbar>.ck-toolbar__items:empty+.ck.ck-toolbar__separator{display:none}.ck.ck-toolbar>.ck-toolbar__items>:not(.ck-toolbar__line-break),.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown{margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck.ck-toolbar.ck-toolbar_vertical{padding:0}.ck.ck-toolbar.ck-toolbar_vertical>.ck-toolbar__items>.ck{width:100%;margin:0;border-radius:0;border:0}.ck.ck-toolbar.ck-toolbar_compact{padding:0}.ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>*{margin:0}.ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>:not(:first-child):not(:last-child){border-radius:0}.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown>.ck.ck-button.ck-dropdown__button{padding-left:var(--ck-spacing-tiny)}.ck-toolbar-container .ck.ck-toolbar{border:0}.ck.ck-toolbar[dir=rtl]>.ck-toolbar__items>.ck,[dir=rtl] .ck.ck-toolbar>.ck-toolbar__items>.ck{margin-right:0}.ck.ck-toolbar[dir=rtl]:not(.ck-toolbar_compact)>.ck-toolbar__items>.ck,[dir=rtl] .ck.ck-toolbar:not(.ck-toolbar_compact)>.ck-toolbar__items>.ck{margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=rtl]>.ck-toolbar__items>.ck:last-child,[dir=rtl] .ck.ck-toolbar>.ck-toolbar__items>.ck:last-child{margin-left:0}.ck.ck-toolbar[dir=rtl].ck-toolbar_compact>.ck-toolbar__items>.ck:first-child,[dir=rtl] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:first-child{border-top-left-radius:0;border-bottom-left-radius:0}.ck.ck-toolbar[dir=rtl].ck-toolbar_compact>.ck-toolbar__items>.ck:last-child,[dir=rtl] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:last-child{border-top-right-radius:0;border-bottom-right-radius:0}.ck.ck-toolbar[dir=rtl]>.ck.ck-toolbar__separator,[dir=rtl] .ck.ck-toolbar>.ck.ck-toolbar__separator{margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=rtl].ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child),[dir=rtl] .ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child){margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=ltr]>.ck-toolbar__items>.ck:last-child,[dir=ltr] .ck.ck-toolbar>.ck-toolbar__items>.ck:last-child{margin-right:0}.ck.ck-toolbar[dir=ltr].ck-toolbar_compact>.ck-toolbar__items>.ck:first-child,[dir=ltr] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:first-child{border-top-right-radius:0;border-bottom-right-radius:0}.ck.ck-toolbar[dir=ltr].ck-toolbar_compact>.ck-toolbar__items>.ck:last-child,[dir=ltr] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:last-child{border-top-left-radius:0;border-bottom-left-radius:0}.ck.ck-toolbar[dir=ltr]>.ck.ck-toolbar__separator,[dir=ltr] .ck.ck-toolbar>.ck.ck-toolbar__separator{margin-right:var(--ck-spacing-small)}.ck.ck-toolbar[dir=ltr].ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child),[dir=ltr] .ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child){margin-right:var(--ck-spacing-small)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(35);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-list{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-direction:column}.ck.ck-list .ck-list__item,.ck.ck-list .ck-list__separator{display:block}.ck.ck-list .ck-list__item>:focus{position:relative;z-index:var(--ck-z-default)}.ck.ck-list{border-radius:0}.ck-rounded-corners .ck.ck-list,.ck.ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-list{list-style-type:none;background:var(--ck-color-list-background)}.ck.ck-list__item{cursor:default;min-width:12em}.ck.ck-list__item .ck-button{min-height:unset;width:100%;text-align:left;border-radius:0;padding:calc(var(--ck-line-height-base)*0.2*var(--ck-font-size-base)) calc(var(--ck-line-height-base)*0.4*var(--ck-font-size-base))}.ck.ck-list__item .ck-button .ck-button__label{line-height:calc(var(--ck-line-height-base)*1.2*var(--ck-font-size-base))}.ck.ck-list__item .ck-button:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on{background:var(--ck-color-list-button-on-background);color:var(--ck-color-list-button-on-text)}.ck.ck-list__item .ck-button.ck-on:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on:hover:not(.ck-disabled){background:var(--ck-color-list-button-on-background-focus)}.ck.ck-list__item .ck-button.ck-on:focus:not(.ck-disabled){border-color:var(--ck-color-base-background)}.ck.ck-list__item .ck-button:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background)}.ck.ck-list__item .ck-switchbutton.ck-on{background:var(--ck-color-list-background);color:inherit}.ck.ck-list__item .ck-switchbutton.ck-on:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background);color:inherit}.ck.ck-list__separator{height:1px;width:100%;background:var(--ck-color-base-border)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(37);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    ':root{--ck-toolbar-dropdown-max-width:60vw}.ck.ck-toolbar-dropdown>.ck-dropdown__panel{width:max-content;max-width:var(--ck-toolbar-dropdown-max-width)}.ck.ck-toolbar-dropdown>.ck-dropdown__panel .ck-button:focus{z-index:calc(var(--ck-z-default) + 1)}.ck.ck-toolbar-dropdown .ck-toolbar{border:0}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(39);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-dropdown .ck-dropdown__panel .ck-list{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list,.ck.ck-dropdown .ck-dropdown__panel .ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(41);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    ':root{--ck-color-editable-blur-selection:#d9d9d9}.ck.ck-editor__editable:not(.ck-editor__nested-editable){border-radius:0}.ck-rounded-corners .ck.ck-editor__editable:not(.ck-editor__nested-editable),.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-focused{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0}.ck.ck-editor__editable_inline{overflow:auto;padding:0 var(--ck-spacing-standard);border:1px solid transparent}.ck.ck-editor__editable_inline[dir=ltr]{text-align:left}.ck.ck-editor__editable_inline[dir=rtl]{text-align:right}.ck.ck-editor__editable_inline>:first-child{margin-top:var(--ck-spacing-large)}.ck.ck-editor__editable_inline>:last-child{margin-bottom:var(--ck-spacing-large)}.ck.ck-editor__editable_inline.ck-blurred ::selection{background:var(--ck-color-editable-blur-selection)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_n]:after{border-bottom-color:var(--ck-color-base-foreground)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_s]:after{border-top-color:var(--ck-color-base-foreground)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(43);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports = '.ck.ck-label{display:block}.ck.ck-voice-label{display:none}.ck.ck-label{font-weight:700}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(45);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-form__header{display:flex;flex-direction:row;flex-wrap:nowrap;align-items:center;justify-content:space-between}:root{--ck-form-header-height:38px}.ck.ck-form__header{padding:var(--ck-spacing-small) var(--ck-spacing-large);height:var(--ck-form-header-height);line-height:var(--ck-form-header-height);border-bottom:1px solid var(--ck-color-base-border)}.ck.ck-form__header .ck-form__header__label{font-weight:700}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(47);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    ':root{--ck-input-text-width:18em}.ck.ck-input-text{border-radius:0}.ck-rounded-corners .ck.ck-input-text,.ck.ck-input-text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-input-text{background:var(--ck-color-input-background);border:1px solid var(--ck-color-input-border);padding:var(--ck-spacing-extra-tiny) var(--ck-spacing-medium);min-width:var(--ck-input-text-width);min-height:var(--ck-ui-component-min-height);transition:box-shadow .1s ease-in-out,border .1s ease-in-out}.ck.ck-input-text:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),0 0}.ck.ck-input-text[readonly]{border:1px solid var(--ck-color-input-disabled-border);background:var(--ck-color-input-disabled-background);color:var(--ck-color-input-disabled-text)}.ck.ck-input-text[readonly]:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),0 0}.ck.ck-input-text.ck-error{border-color:var(--ck-color-input-error-border);animation:ck-text-input-shake .3s ease both}.ck.ck-input-text.ck-error:focus{box-shadow:var(--ck-focus-error-outer-shadow),0 0}@keyframes ck-text-input-shake{20%{transform:translateX(-2px)}40%{transform:translateX(2px)}60%{transform:translateX(-1px)}80%{transform:translateX(1px)}}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(49);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper{display:flex;position:relative}.ck.ck-labeled-field-view .ck.ck-label{display:block;position:absolute}:root{--ck-labeled-field-view-transition:.1s cubic-bezier(0,0,0.24,0.95);--ck-labeled-field-empty-unfocused-max-width:100% - 2 * var(--ck-spacing-medium);--ck-color-labeled-field-label-background:var(--ck-color-base-background)}.ck.ck-labeled-field-view{border-radius:0}.ck-rounded-corners .ck.ck-labeled-field-view,.ck.ck-labeled-field-view.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper{width:100%}.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{top:0}[dir=ltr] .ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{left:0}[dir=rtl] .ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{right:0}.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{pointer-events:none;transform-origin:0 0;transform:translate(var(--ck-spacing-medium),-6px) scale(.75);background:var(--ck-color-labeled-field-label-background);padding:0 calc(var(--ck-font-size-tiny)*0.5);line-height:normal;font-weight:400;text-overflow:ellipsis;overflow:hidden;max-width:100%;transition:transform var(--ck-labeled-field-view-transition),padding var(--ck-labeled-field-view-transition),background var(--ck-labeled-field-view-transition)}.ck.ck-labeled-field-view.ck-error .ck-input:not([readonly])+.ck.ck-label,.ck.ck-labeled-field-view.ck-error>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{color:var(--ck-color-base-error)}.ck.ck-labeled-field-view .ck-labeled-field-view__status{font-size:var(--ck-font-size-small);margin-top:var(--ck-spacing-small);white-space:normal}.ck.ck-labeled-field-view .ck-labeled-field-view__status.ck-labeled-field-view__status_error{color:var(--ck-color-base-error)}.ck.ck-labeled-field-view.ck-disabled>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label,.ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused)>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{color:var(--ck-color-input-disabled-text)}[dir=ltr] .ck.ck-labeled-field-view.ck-disabled>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label,[dir=ltr] .ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder)>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{transform:translate(var(--ck-spacing-medium),calc(var(--ck-font-size-base)*0.6)) scale(1)}[dir=rtl] .ck.ck-labeled-field-view.ck-disabled>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label,[dir=rtl] .ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder)>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{transform:translate(calc(var(--ck-spacing-medium)*-1),calc(var(--ck-font-size-base)*0.6)) scale(1)}.ck.ck-labeled-field-view.ck-disabled>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label,.ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder)>.ck.ck-labeled-field-view__input-wrapper>.ck.ck-label{max-width:calc(var(--ck-labeled-field-empty-unfocused-max-width));background:transparent;padding:0}.ck.ck-labeled-field-view>.ck.ck-labeled-field-view__input-wrapper>.ck-dropdown>.ck.ck-button{background:transparent}.ck.ck-labeled-field-view.ck-labeled-field-view_empty>.ck.ck-labeled-field-view__input-wrapper>.ck-dropdown>.ck-button>.ck-button__label{opacity:0}.ck.ck-labeled-field-view.ck-labeled-field-view_empty:not(.ck-labeled-field-view_focused):not(.ck-labeled-field-view_placeholder)>.ck.ck-labeled-field-view__input-wrapper>.ck-dropdown+.ck-label{max-width:calc(var(--ck-labeled-field-empty-unfocused-max-width) - var(--ck-dropdown-arrow-size) - var(--ck-spacing-standard))}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(51);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    ':root{--ck-balloon-panel-arrow-z-index:calc(var(--ck-z-default) - 3)}.ck.ck-balloon-panel{display:none;position:absolute;z-index:var(--ck-z-modal)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{content:"";position:absolute}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_n]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_n]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_s]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_s]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel.ck-balloon-panel_visible{display:block}:root{--ck-balloon-arrow-offset:2px;--ck-balloon-arrow-height:10px;--ck-balloon-arrow-half-width:8px;--ck-balloon-arrow-drop-shadow:0 2px 2px var(--ck-color-shadow-drop)}.ck.ck-balloon-panel{border-radius:0}.ck-rounded-corners .ck.ck-balloon-panel,.ck.ck-balloon-panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-balloon-panel{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{width:0;height:0;border-style:solid}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:var(--ck-balloon-arrow-height);border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:0}.ck.ck-balloon-panel[class*=arrow_n]:before{border-bottom-color:var(--ck-color-panel-border)}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-color:transparent;border-right-color:transparent;border-top-color:transparent}.ck.ck-balloon-panel[class*=arrow_n]:after{border-bottom-color:var(--ck-color-panel-background);margin-top:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:0;border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:var(--ck-balloon-arrow-height)}.ck.ck-balloon-panel[class*=arrow_s]:before{border-top-color:var(--ck-color-panel-border);filter:drop-shadow(var(--ck-balloon-arrow-drop-shadow))}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent}.ck.ck-balloon-panel[class*=arrow_s]:after{border-top-color:var(--ck-color-panel-background);margin-bottom:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:before{left:50%;margin-left:calc(var(--ck-balloon-arrow-half-width)*-1);top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:before{left:calc(var(--ck-balloon-arrow-half-width)*2);top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:before{right:calc(var(--ck-balloon-arrow-half-width)*2);top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:before{left:50%;margin-left:calc(var(--ck-balloon-arrow-half-width)*-1);bottom:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:before{left:calc(var(--ck-balloon-arrow-half-width)*2);bottom:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:before{right:calc(var(--ck-balloon-arrow-half-width)*2);bottom:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sme:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sme:before{right:25%;margin-right:calc(var(--ck-balloon-arrow-half-width)*2);bottom:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_smw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_smw:before{left:25%;margin-left:calc(var(--ck-balloon-arrow-half-width)*2);bottom:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nme:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nme:before{right:25%;margin-right:calc(var(--ck-balloon-arrow-half-width)*2);top:calc(var(--ck-balloon-arrow-height)*-1)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nmw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nmw:before{left:25%;margin-left:calc(var(--ck-balloon-arrow-half-width)*2);top:calc(var(--ck-balloon-arrow-height)*-1)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(53);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck .ck-balloon-rotator__navigation{display:flex;align-items:center;justify-content:center}.ck .ck-balloon-rotator__content .ck-toolbar{justify-content:center}.ck .ck-balloon-rotator__navigation{background:var(--ck-color-toolbar-background);border-bottom:1px solid var(--ck-color-toolbar-border);padding:0 var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation>*{margin-right:var(--ck-spacing-small);margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation .ck-balloon-rotator__counter{margin-right:var(--ck-spacing-standard);margin-left:var(--ck-spacing-small)}.ck .ck-balloon-rotator__content .ck.ck-annotation-wrapper{box-shadow:none}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(55);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck .ck-fake-panel{position:absolute;z-index:calc(var(--ck-z-modal) - 1)}.ck .ck-fake-panel div{position:absolute}.ck .ck-fake-panel div:first-child{z-index:2}.ck .ck-fake-panel div:nth-child(2){z-index:1}:root{--ck-balloon-fake-panel-offset-horizontal:6px;--ck-balloon-fake-panel-offset-vertical:6px}.ck .ck-fake-panel div{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border);border-radius:var(--ck-border-radius);width:100%;height:100%}.ck .ck-fake-panel div:first-child{margin-left:var(--ck-balloon-fake-panel-offset-horizontal);margin-top:var(--ck-balloon-fake-panel-offset-vertical)}.ck .ck-fake-panel div:nth-child(2){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*2);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*2)}.ck .ck-fake-panel div:nth-child(3){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*3);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*3)}.ck .ck-balloon-panel_arrow_s+.ck-fake-panel,.ck .ck-balloon-panel_arrow_se+.ck-fake-panel,.ck .ck-balloon-panel_arrow_sw+.ck-fake-panel{--ck-balloon-fake-panel-offset-vertical:-6px}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(57);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-sticky-panel .ck-sticky-panel__content_sticky{z-index:var(--ck-z-modal);position:fixed;top:0}.ck.ck-sticky-panel .ck-sticky-panel__content_sticky_bottom-limit{top:auto;position:absolute}.ck.ck-sticky-panel .ck-sticky-panel__content_sticky{box-shadow:var(--ck-drop-shadow),0 0;border-width:0 1px 1px;border-top-left-radius:0;border-top-right-radius:0}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(59);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-block-toolbar-button{position:absolute;z-index:var(--ck-z-default)}:root{--ck-color-block-toolbar-button:var(--ck-color-text);--ck-block-toolbar-button-size:var(--ck-font-size-normal)}.ck.ck-block-toolbar-button{color:var(--ck-color-block-toolbar-button);font-size:var(--ck-block-toolbar-size)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(61);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-placeholder,.ck .ck-placeholder{position:relative}.ck.ck-placeholder:before,.ck .ck-placeholder:before{position:absolute;left:0;right:0;content:attr(data-placeholder);pointer-events:none}.ck.ck-read-only .ck-placeholder:before{display:none}.ck.ck-placeholder:before,.ck .ck-placeholder:before{cursor:text;color:var(--ck-color-engine-placeholder-text)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(63);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-editor{position:relative}.ck.ck-editor .ck-editor__top .ck-sticky-panel .ck-toolbar{z-index:var(--ck-z-modal)}.ck.ck-editor__top .ck-sticky-panel .ck-toolbar{border-radius:0}.ck-rounded-corners .ck.ck-editor__top .ck-sticky-panel .ck-toolbar,.ck.ck-editor__top .ck-sticky-panel .ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius);border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-editor__top .ck-sticky-panel .ck-toolbar{border-bottom-width:0}.ck.ck-editor__top .ck-sticky-panel .ck-sticky-panel__content_sticky .ck-toolbar{border-bottom-width:1px;border-radius:0}.ck-rounded-corners .ck.ck-editor__top .ck-sticky-panel .ck-sticky-panel__content_sticky .ck-toolbar,.ck.ck-editor__top .ck-sticky-panel .ck-sticky-panel__content_sticky .ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius);border-radius:0}.ck.ck-editor__main>.ck-editor__editable{background:var(--ck-color-base-background);border-radius:0}.ck-rounded-corners .ck.ck-editor__main>.ck-editor__editable,.ck.ck-editor__main>.ck-editor__editable.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}.ck.ck-editor__main>.ck-editor__editable:not(.ck-focused){border-color:var(--ck-color-base-border)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(65);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck .ck-button.ck-color-table__remove-color{display:flex;align-items:center;width:100%}label.ck.ck-color-grid__label{font-weight:unset}.ck .ck-button.ck-color-table__remove-color{padding:calc(var(--ck-spacing-standard)/2) var(--ck-spacing-standard);border-bottom-left-radius:0;border-bottom-right-radius:0}.ck .ck-button.ck-color-table__remove-color:not(:focus){border-bottom:1px solid var(--ck-color-base-border)}[dir=ltr] .ck .ck-button.ck-color-table__remove-color .ck.ck-icon{margin-right:var(--ck-spacing-standard)}[dir=rtl] .ck .ck-button.ck-color-table__remove-color .ck.ck-icon{margin-left:var(--ck-spacing-standard)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(67);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck-content .text-tiny{font-size:.7em}.ck-content .text-small{font-size:.85em}.ck-content .text-big{font-size:1.4em}.ck-content .text-huge{font-size:1.8em}';
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-heading_heading1{font-size:20px}.ck.ck-heading_heading2{font-size:17px}.ck.ck-heading_heading3{font-size:14px}.ck[class*=ck-heading_heading]{font-weight:700}.ck.ck-dropdown.ck-heading-dropdown .ck-dropdown__button .ck-button__label{width:8em}.ck.ck-dropdown.ck-heading-dropdown .ck-dropdown__panel .ck-list__item{min-width:18em}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(70);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck .ck-widget .ck-widget__type-around__button{display:block;position:absolute;overflow:hidden;z-index:var(--ck-z-default)}.ck .ck-widget .ck-widget__type-around__button svg{position:absolute;top:50%;left:50%;z-index:calc(var(--ck-z-default) + 2)}.ck .ck-widget .ck-widget__type-around__button.ck-widget__type-around__button_before{top:calc(var(--ck-widget-outline-thickness)*-0.5);left:min(10%,30px);transform:translateY(-50%)}.ck .ck-widget .ck-widget__type-around__button.ck-widget__type-around__button_after{bottom:calc(var(--ck-widget-outline-thickness)*-0.5);right:min(10%,30px);transform:translateY(50%)}.ck .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button:after,.ck .ck-widget>.ck-widget__type-around>.ck-widget__type-around__button:hover:after{content:"";display:block;position:absolute;top:1px;left:1px;z-index:calc(var(--ck-z-default) + 1)}.ck .ck-widget>.ck-widget__type-around>.ck-widget__type-around__fake-caret{display:none;position:absolute;left:0;right:0}.ck .ck-widget:hover>.ck-widget__type-around>.ck-widget__type-around__fake-caret{left:calc(var(--ck-widget-outline-thickness)*-1);right:calc(var(--ck-widget-outline-thickness)*-1)}.ck .ck-widget.ck-widget_type-around_show-fake-caret_before>.ck-widget__type-around>.ck-widget__type-around__fake-caret{top:calc(var(--ck-widget-outline-thickness)*-1 - 1px);display:block}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after>.ck-widget__type-around>.ck-widget__type-around__fake-caret{bottom:calc(var(--ck-widget-outline-thickness)*-1 - 1px);display:block}.ck.ck-editor__editable.ck-read-only .ck-widget__type-around,.ck.ck-editor__editable.ck-restricted-editing_mode_restricted .ck-widget__type-around,.ck.ck-editor__editable.ck-widget__type-around_disabled .ck-widget__type-around{display:none}:root{--ck-widget-type-around-button-size:20px;--ck-color-widget-type-around-button-active:var(--ck-color-focus-border);--ck-color-widget-type-around-button-hover:var(--ck-color-widget-hover-border);--ck-color-widget-type-around-button-blurred-editable:var(--ck-color-widget-blurred-border);--ck-color-widget-type-around-button-radar-start-alpha:0;--ck-color-widget-type-around-button-radar-end-alpha:.3;--ck-color-widget-type-around-button-icon:var(--ck-color-base-background)}.ck .ck-widget .ck-widget__type-around__button{width:var(--ck-widget-type-around-button-size);height:var(--ck-widget-type-around-button-size);background:var(--ck-color-widget-type-around-button);border-radius:100px;transition:opacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),background var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);opacity:0;pointer-events:none}.ck .ck-widget .ck-widget__type-around__button svg{width:10px;height:8px;transform:translate(-50%,-50%);transition:transform .5s ease;margin-top:1px}.ck .ck-widget .ck-widget__type-around__button svg *{stroke-dasharray:10;stroke-dashoffset:0;fill:none;stroke:var(--ck-color-widget-type-around-button-icon);stroke-width:1.5px;stroke-linecap:round;stroke-linejoin:round}.ck .ck-widget .ck-widget__type-around__button svg line{stroke-dasharray:7}.ck .ck-widget .ck-widget__type-around__button:hover{animation:ck-widget-type-around-button-sonar 1s ease infinite}.ck .ck-widget .ck-widget__type-around__button:hover svg polyline{animation:ck-widget-type-around-arrow-dash 2s linear}.ck .ck-widget .ck-widget__type-around__button:hover svg line{animation:ck-widget-type-around-arrow-tip-dash 2s linear}.ck .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button,.ck .ck-widget:hover>.ck-widget__type-around>.ck-widget__type-around__button{opacity:1;pointer-events:auto}.ck .ck-widget:not(.ck-widget_selected)>.ck-widget__type-around>.ck-widget__type-around__button{background:var(--ck-color-widget-type-around-button-hover)}.ck .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button,.ck .ck-widget>.ck-widget__type-around>.ck-widget__type-around__button:hover{background:var(--ck-color-widget-type-around-button-active)}.ck .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button:after,.ck .ck-widget>.ck-widget__type-around>.ck-widget__type-around__button:hover:after{width:calc(var(--ck-widget-type-around-button-size) - 2px);height:calc(var(--ck-widget-type-around-button-size) - 2px);border-radius:100px;background:linear-gradient(135deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.3))}.ck .ck-widget.ck-widget_with-selection-handle>.ck-widget__type-around>.ck-widget__type-around__button_before{margin-left:20px}.ck .ck-widget .ck-widget__type-around__fake-caret{pointer-events:none;height:1px;animation:ck-widget-type-around-fake-caret-pulse 1s linear infinite normal forwards;outline:1px solid hsla(0,0%,100%,.5);background:var(--ck-color-base-text)}.ck .ck-widget.ck-widget_selected.ck-widget_type-around_show-fake-caret_after,.ck .ck-widget.ck-widget_selected.ck-widget_type-around_show-fake-caret_before{outline-color:transparent}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after.ck-widget_selected:hover,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before.ck-widget_selected:hover{outline-color:var(--ck-color-widget-hover-border)}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after>.ck-widget__type-around>.ck-widget__type-around__button,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before>.ck-widget__type-around>.ck-widget__type-around__button{opacity:0;pointer-events:none}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after.ck-widget_with-selection-handle.ck-widget_selected:hover>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_type-around_show-fake-caret_after.ck-widget_with-selection-handle.ck-widget_selected>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before.ck-widget_with-selection-handle.ck-widget_selected:hover>.ck-widget__selection-handle,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before.ck-widget_with-selection-handle.ck-widget_selected>.ck-widget__selection-handle{opacity:0}.ck .ck-widget.ck-widget_type-around_show-fake-caret_after.ck-widget_selected.ck-widget_with-resizer>.ck-widget__resizer,.ck .ck-widget.ck-widget_type-around_show-fake-caret_before.ck-widget_selected.ck-widget_with-resizer>.ck-widget__resizer{opacity:0}.ck[dir=rtl] .ck-widget.ck-widget_with-selection-handle .ck-widget__type-around>.ck-widget__type-around__button_before{margin-left:0;margin-right:20px}.ck-editor__nested-editable.ck-editor__editable_selected .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button,.ck-editor__nested-editable.ck-editor__editable_selected .ck-widget:hover>.ck-widget__type-around>.ck-widget__type-around__button{opacity:0;pointer-events:none}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button:not(:hover){background:var(--ck-color-widget-type-around-button-blurred-editable)}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected>.ck-widget__type-around>.ck-widget__type-around__button:not(:hover) svg *{stroke:#999}@keyframes ck-widget-type-around-arrow-dash{0%{stroke-dashoffset:10}20%,to{stroke-dashoffset:0}}@keyframes ck-widget-type-around-arrow-tip-dash{0%,20%{stroke-dashoffset:7}40%,to{stroke-dashoffset:0}}@keyframes ck-widget-type-around-button-sonar{0%{box-shadow:0 0 0 0 hsla(var(--ck-color-focus-border-coordinates),var(--ck-color-widget-type-around-button-radar-start-alpha))}50%{box-shadow:0 0 0 5px hsla(var(--ck-color-focus-border-coordinates),var(--ck-color-widget-type-around-button-radar-end-alpha))}to{box-shadow:0 0 0 5px hsla(var(--ck-color-focus-border-coordinates),var(--ck-color-widget-type-around-button-radar-start-alpha))}}@keyframes ck-widget-type-around-fake-caret-pulse{0%{opacity:1}49%{opacity:1}50%{opacity:0}99%{opacity:0}to{opacity:1}}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(72);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    ':root{--ck-color-resizer:var(--ck-color-focus-border);--ck-color-resizer-tooltip-background:#262626;--ck-color-resizer-tooltip-text:#f2f2f2;--ck-resizer-border-radius:var(--ck-border-radius);--ck-resizer-tooltip-offset:10px}.ck .ck-widget,.ck .ck-widget.ck-widget_with-selection-handle{position:relative}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{position:absolute}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon{display:block}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected .ck-widget__selection-handle,.ck .ck-widget.ck-widget_with-selection-handle:hover .ck-widget__selection-handle{visibility:visible}.ck .ck-size-view{background:var(--ck-color-resizer-tooltip-background);color:var(--ck-color-resizer-tooltip-text);border:1px solid var(--ck-color-resizer-tooltip-text);border-radius:var(--ck-resizer-border-radius);font-size:var(--ck-font-size-tiny);display:block;padding:var(--ck-spacing-small)}.ck .ck-size-view.ck-orientation-bottom-left,.ck .ck-size-view.ck-orientation-bottom-right,.ck .ck-size-view.ck-orientation-top-left,.ck .ck-size-view.ck-orientation-top-right{position:absolute}.ck .ck-size-view.ck-orientation-top-left{top:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-top-right{top:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-right{bottom:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-left{bottom:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}:root{--ck-widget-outline-thickness:3px;--ck-widget-handler-icon-size:16px;--ck-widget-handler-animation-duration:200ms;--ck-widget-handler-animation-curve:ease;--ck-color-widget-blurred-border:#dedede;--ck-color-widget-hover-border:#ffc83d;--ck-color-widget-editable-focus-background:var(--ck-color-base-background);--ck-color-widget-drag-handler-icon-color:var(--ck-color-base-background)}.ck .ck-widget{outline-width:var(--ck-widget-outline-thickness);outline-style:solid;outline-color:transparent;transition:outline-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_selected,.ck .ck-widget.ck-widget_selected:hover{outline:var(--ck-widget-outline-thickness) solid var(--ck-color-focus-border)}.ck .ck-widget:hover{outline-color:var(--ck-color-widget-hover-border)}.ck .ck-editor__nested-editable{border:1px solid transparent}.ck .ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck .ck-editor__nested-editable:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0;background-color:var(--ck-color-widget-editable-focus-background)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{padding:4px;box-sizing:border-box;background-color:transparent;opacity:0;transition:background-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),visibility var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),opacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);border-radius:var(--ck-border-radius) var(--ck-border-radius) 0 0;transform:translateY(-100%);left:calc(0px - var(--ck-widget-outline-thickness))}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon{width:var(--ck-widget-handler-icon-size);height:var(--ck-widget-handler-icon-size);color:var(--ck-color-widget-drag-handler-icon-color)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator{opacity:0;transition:opacity .3s var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle:hover .ck-icon .ck-icon__selected-indicator{opacity:1}.ck .ck-widget.ck-widget_with-selection-handle:hover .ck-widget__selection-handle{opacity:1;background-color:var(--ck-color-widget-hover-border)}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected .ck-widget__selection-handle,.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected:hover .ck-widget__selection-handle{opacity:1;background-color:var(--ck-color-focus-border)}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator,.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected:hover .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator{opacity:1}.ck[dir=rtl] .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{left:auto;right:calc(0px - var(--ck-widget-outline-thickness))}.ck.ck-editor__editable.ck-read-only .ck-widget{transition:none}.ck.ck-editor__editable.ck-read-only .ck-widget:not(.ck-widget_selected){--ck-widget-outline-thickness:0px}.ck.ck-editor__editable.ck-read-only .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle,.ck.ck-editor__editable.ck-read-only .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle:hover{background:var(--ck-color-widget-blurred-border)}.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected,.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover{outline-color:var(--ck-color-widget-blurred-border)}.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected.ck-widget_with-selection-handle .ck-widget__selection-handle,.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected.ck-widget_with-selection-handle .ck-widget__selection-handle:hover,.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover.ck-widget_with-selection-handle .ck-widget__selection-handle,.ck.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover.ck-widget_with-selection-handle .ck-widget__selection-handle:hover{background:var(--ck-color-widget-blurred-border)}.ck.ck-editor__editable>.ck-widget.ck-widget_with-selection-handle:first-child,.ck.ck-editor__editable blockquote>.ck-widget.ck-widget_with-selection-handle:first-child{margin-top:calc(1em + var(--ck-widget-handler-icon-size))}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(74);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck .ck-widget_with-resizer{position:relative}.ck .ck-widget__resizer{display:none;position:absolute;pointer-events:none;left:0;top:0}.ck-focused .ck-widget_with-resizer.ck-widget_selected>.ck-widget__resizer{display:block}.ck .ck-widget__resizer__handle{position:absolute;pointer-events:all}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-right,.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-left{cursor:nwse-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-left,.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-right{cursor:nesw-resize}:root{--ck-resizer-size:10px;--ck-resizer-offset:calc(var(--ck-resizer-size)/-2 - 2px);--ck-resizer-border-width:1px}.ck .ck-widget__resizer{outline:1px solid var(--ck-color-resizer)}.ck .ck-widget__resizer__handle{width:var(--ck-resizer-size);height:var(--ck-resizer-size);background:var(--ck-color-focus-border);border:var(--ck-resizer-border-width) solid #fff;border-radius:var(--ck-resizer-border-radius)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-left{top:var(--ck-resizer-offset);left:var(--ck-resizer-offset)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-right{top:var(--ck-resizer-offset);right:var(--ck-resizer-offset)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-right{bottom:var(--ck-resizer-offset);right:var(--ck-resizer-offset)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-left{bottom:var(--ck-resizer-offset);left:var(--ck-resizer-offset)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(76);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck-editor__editable .ck-horizontal-line{display:flow-root}.ck-content hr{margin:15px 0;height:4px;background:#dedede;border:0}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(78);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-text-alternative-form{display:flex;flex-direction:row;flex-wrap:nowrap}.ck.ck-text-alternative-form .ck-labeled-field-view{display:inline-block}.ck.ck-text-alternative-form .ck-label{display:none}@media screen and (max-width:600px){.ck.ck-text-alternative-form{flex-wrap:wrap}.ck.ck-text-alternative-form .ck-labeled-field-view{flex-basis:100%}.ck.ck-text-alternative-form .ck-button{flex-basis:50%}}';
            },
            function (t, e) {
                t.exports =
                    '.ck-vertical-form .ck-button:after{content:"";width:0;position:absolute;right:-1px;top:var(--ck-spacing-small);bottom:var(--ck-spacing-small);z-index:1}@media screen and (max-width:600px){.ck.ck-responsive-form .ck-button:after{content:"";width:0;position:absolute;right:-1px;top:var(--ck-spacing-small);bottom:var(--ck-spacing-small);z-index:1}}.ck-vertical-form>.ck-button:nth-last-child(2):after{border-right:1px solid var(--ck-color-base-border)}.ck.ck-responsive-form{padding:var(--ck-spacing-large)}.ck.ck-responsive-form:focus{outline:none}[dir=ltr] .ck.ck-responsive-form>:not(:first-child),[dir=rtl] .ck.ck-responsive-form>:not(:last-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-responsive-form{padding:0;width:calc(var(--ck-input-text-width)*0.8)}.ck.ck-responsive-form .ck-labeled-field-view{margin:var(--ck-spacing-large) var(--ck-spacing-large) 0}.ck.ck-responsive-form .ck-labeled-field-view .ck-input-text{min-width:0;width:100%}.ck.ck-responsive-form .ck-labeled-field-view .ck-labeled-field-view__error{white-space:normal}.ck.ck-responsive-form>.ck-button:last-child,.ck.ck-responsive-form>.ck-button:nth-last-child(2){padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-large);border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}[dir=ltr] .ck.ck-responsive-form>.ck-button:last-child,[dir=ltr] .ck.ck-responsive-form>.ck-button:nth-last-child(2),[dir=rtl] .ck.ck-responsive-form>.ck-button:last-child,[dir=rtl] .ck.ck-responsive-form>.ck-button:nth-last-child(2){margin-left:0}.ck.ck-responsive-form>.ck-button:nth-last-child(2):after,[dir=rtl] .ck.ck-responsive-form>.ck-button:last-child:last-of-type,[dir=rtl] .ck.ck-responsive-form>.ck-button:nth-last-child(2):last-of-type{border-right:1px solid var(--ck-color-base-border)}}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(81);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck-content .image{display:table;clear:both;text-align:center;margin:1em auto}.ck-content .image img{display:block;margin:0 auto;max-width:100%;min-width:50px}.ck.ck-editor__editable .image>figcaption.ck-placeholder:before{position:static}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(83);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-editor__editable .image{position:relative}.ck.ck-editor__editable .image .ck-progress-bar{position:absolute;top:0;left:0}.ck.ck-editor__editable .image.ck-appear{animation:fadeIn .7s}.ck.ck-editor__editable .image .ck-progress-bar{height:2px;width:0;background:var(--ck-color-upload-bar-background);transition:width .1s}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(85);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck-image-upload-complete-icon{display:block;position:absolute;top:10px;right:10px;border-radius:50%}.ck-image-upload-complete-icon:after{content:"";position:absolute}:root{--ck-color-image-upload-icon:#fff;--ck-color-image-upload-icon-background:#008a00;--ck-image-upload-icon-size:20px;--ck-image-upload-icon-width:2px}.ck-image-upload-complete-icon{width:var(--ck-image-upload-icon-size);height:var(--ck-image-upload-icon-size);opacity:0;background:var(--ck-color-image-upload-icon-background);animation-name:ck-upload-complete-icon-show,ck-upload-complete-icon-hide;animation-fill-mode:forwards,forwards;animation-duration:.5s,.5s;font-size:var(--ck-image-upload-icon-size);animation-delay:0ms,3s}.ck-image-upload-complete-icon:after{left:25%;top:50%;opacity:0;height:0;width:0;transform:scaleX(-1) rotate(135deg);transform-origin:left top;border-top:var(--ck-image-upload-icon-width) solid var(--ck-color-image-upload-icon);border-right:var(--ck-image-upload-icon-width) solid var(--ck-color-image-upload-icon);animation-name:ck-upload-complete-icon-check;animation-duration:.5s;animation-delay:.5s;animation-fill-mode:forwards;box-sizing:border-box}@keyframes ck-upload-complete-icon-show{0%{opacity:0}to{opacity:1}}@keyframes ck-upload-complete-icon-hide{0%{opacity:1}to{opacity:0}}@keyframes ck-upload-complete-icon-check{0%{opacity:1;width:0;height:0}33%{width:.3em;height:0}to{opacity:1;width:.3em;height:.45em}}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(87);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck .ck-upload-placeholder-loader{position:absolute;display:flex;align-items:center;justify-content:center;top:0;left:0}.ck .ck-upload-placeholder-loader:before{content:"";position:relative}:root{--ck-color-upload-placeholder-loader:#b3b3b3;--ck-upload-placeholder-loader-size:32px}.ck .ck-image-upload-placeholder{width:100%;margin:0}.ck .ck-upload-placeholder-loader{width:100%;height:100%}.ck .ck-upload-placeholder-loader:before{width:var(--ck-upload-placeholder-loader-size);height:var(--ck-upload-placeholder-loader-size);border-radius:50%;border-top:3px solid var(--ck-color-upload-placeholder-loader);border-right:2px solid transparent;animation:ck-upload-placeholder-loader 1s linear infinite}@keyframes ck-upload-placeholder-loader{to{transform:rotate(1turn)}}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(89);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-image-insert-form:focus{outline:none}.ck.ck-form__row{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:space-between}.ck.ck-form__row>:not(.ck-label){flex-grow:1}.ck.ck-form__row.ck-image-insert-form__action-row{margin-top:var(--ck-spacing-standard)}.ck.ck-form__row.ck-image-insert-form__action-row .ck-button-cancel,.ck.ck-form__row.ck-image-insert-form__action-row .ck-button-save{justify-content:center}.ck.ck-form__row.ck-image-insert-form__action-row .ck-button .ck-button__label{color:var(--ck-color-text)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(91);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-image-insert__panel{padding:var(--ck-spacing-large)}.ck.ck-image-insert__ck-finder-button{display:block;width:100%;margin:var(--ck-spacing-standard) auto;border:1px solid #ccc;border-radius:var(--ck-border-radius)}.ck.ck-splitbutton>.ck-file-dialog-button.ck-button{padding:0;margin:0;border:none}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(93);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck-content .image.image_resized{max-width:100%;display:block;box-sizing:border-box}.ck-content .image.image_resized img{width:100%}.ck-content .image.image_resized>figcaption{display:block}[dir=ltr] .ck.ck-button.ck-button_with-text.ck-resize-image-button .ck-button__icon{margin-right:var(--ck-spacing-standard)}[dir=rtl] .ck.ck-button.ck-button_with-text.ck-resize-image-button .ck-button__icon{margin-left:var(--ck-spacing-standard)}.ck.ck-dropdown .ck-button.ck-resize-image-button .ck-button__label{width:4em}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(95);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck .ck-link_selected{background:var(--ck-color-link-selected-background)}.ck .ck-fake-link-selection{background:var(--ck-color-link-fake-selection)}.ck .ck-fake-link-selection_collapsed{height:100%;border-right:1px solid var(--ck-color-base-text);margin-right:-1px;outline:1px solid hsla(0,0%,100%,.5)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(97);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-link-form{display:flex}.ck.ck-link-form .ck-label{display:none}@media screen and (max-width:600px){.ck.ck-link-form{flex-wrap:wrap}.ck.ck-link-form .ck-labeled-field-view{flex-basis:100%}.ck.ck-link-form .ck-button{flex-basis:50%}}.ck.ck-link-form_layout-vertical{display:block}.ck.ck-link-form_layout-vertical .ck-button.ck-button-cancel,.ck.ck-link-form_layout-vertical .ck-button.ck-button-save{margin-top:var(--ck-spacing-medium)}.ck.ck-link-form_layout-vertical{padding:0;min-width:var(--ck-input-text-width)}.ck.ck-link-form_layout-vertical .ck-labeled-field-view{margin:var(--ck-spacing-large) var(--ck-spacing-large) var(--ck-spacing-small)}.ck.ck-link-form_layout-vertical .ck-labeled-field-view .ck-input-text{min-width:0;width:100%}.ck.ck-link-form_layout-vertical .ck-button{padding:var(--ck-spacing-standard);margin:0;border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border);width:50%}[dir=ltr] .ck.ck-link-form_layout-vertical .ck-button,[dir=rtl] .ck.ck-link-form_layout-vertical .ck-button{margin-left:0}[dir=rtl] .ck.ck-link-form_layout-vertical .ck-button:last-of-type{border-right:1px solid var(--ck-color-base-border)}.ck.ck-link-form_layout-vertical .ck.ck-list{margin:var(--ck-spacing-standard) var(--ck-spacing-large)}.ck.ck-link-form_layout-vertical .ck.ck-list .ck-button.ck-switchbutton{border:0;padding:0;width:100%}.ck.ck-link-form_layout-vertical .ck.ck-list .ck-button.ck-switchbutton:hover{background:none}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(99);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-link-actions{display:flex;flex-direction:row;flex-wrap:nowrap}.ck.ck-link-actions .ck-link-actions__preview{display:inline-block}.ck.ck-link-actions .ck-link-actions__preview .ck-button__label{overflow:hidden}@media screen and (max-width:600px){.ck.ck-link-actions{flex-wrap:wrap}.ck.ck-link-actions .ck-link-actions__preview{flex-basis:100%}.ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){flex-basis:50%}}.ck.ck-link-actions .ck-button.ck-link-actions__preview{padding-left:0;padding-right:0}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label{padding:0 var(--ck-spacing-medium);color:var(--ck-color-link-default);text-overflow:ellipsis;cursor:pointer;max-width:var(--ck-input-text-width);min-width:3em;text-align:center}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label:hover{text-decoration:underline}.ck.ck-link-actions .ck-button.ck-link-actions__preview,.ck.ck-link-actions .ck-button.ck-link-actions__preview:active,.ck.ck-link-actions .ck-button.ck-link-actions__preview:focus,.ck.ck-link-actions .ck-button.ck-link-actions__preview:hover{background:none}.ck.ck-link-actions .ck-button.ck-link-actions__preview:active{box-shadow:none}.ck.ck-link-actions .ck-button.ck-link-actions__preview:focus .ck-button__label{text-decoration:underline}[dir=ltr] .ck.ck-link-actions .ck-button:not(:first-child),[dir=rtl] .ck.ck-link-actions .ck-button:not(:last-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-link-actions .ck-button.ck-link-actions__preview{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label{min-width:0;max-width:100%}[dir=ltr] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview),[dir=rtl] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){margin-left:0}}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(101);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-list-styles-dropdown>.ck-dropdown__panel>.ck-toolbar>.ck-toolbar__items{display:grid}:root{--ck-list-style-button-size:44px}.ck.ck-list-styles-dropdown>.ck-dropdown__panel>.ck-toolbar{background:none;padding:0}.ck.ck-list-styles-dropdown>.ck-dropdown__panel>.ck-toolbar>.ck-toolbar__items{grid-template-columns:repeat(3,auto);row-gap:var(--ck-spacing-medium);column-gap:var(--ck-spacing-medium);padding:var(--ck-spacing-medium)}.ck.ck-list-styles-dropdown>.ck-dropdown__panel>.ck-toolbar>.ck-toolbar__items .ck-button{width:var(--ck-list-style-button-size);height:var(--ck-list-style-button-size);padding:0;margin:0;box-sizing:content-box}.ck.ck-list-styles-dropdown>.ck-dropdown__panel>.ck-toolbar>.ck-toolbar__items .ck-button .ck-icon{width:var(--ck-list-style-button-size);height:var(--ck-list-style-button-size)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(103);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    ':root{--ck-color-table-focused-cell-background:rgba(158,207,250,0.3)}.ck-widget.table td.ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck-widget.table td.ck-editor__nested-editable:focus,.ck-widget.table th.ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck-widget.table th.ck-editor__nested-editable:focus{background:var(--ck-color-table-focused-cell-background);border-style:none;outline:1px solid var(--ck-color-focus-border);outline-offset:-1px}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(105);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck .ck-insert-table-dropdown__grid{display:flex;flex-direction:row;flex-wrap:wrap}:root{--ck-insert-table-dropdown-padding:10px;--ck-insert-table-dropdown-box-height:11px;--ck-insert-table-dropdown-box-width:12px;--ck-insert-table-dropdown-box-margin:1px}.ck .ck-insert-table-dropdown__grid{width:calc(var(--ck-insert-table-dropdown-box-width)*10 + var(--ck-insert-table-dropdown-box-margin)*20 + var(--ck-insert-table-dropdown-padding)*2);padding:var(--ck-insert-table-dropdown-padding) var(--ck-insert-table-dropdown-padding) 0}.ck .ck-insert-table-dropdown__label{text-align:center}.ck .ck-insert-table-dropdown-grid-box{width:var(--ck-insert-table-dropdown-box-width);height:var(--ck-insert-table-dropdown-box-height);margin:var(--ck-insert-table-dropdown-box-margin);border:1px solid var(--ck-color-base-border);border-radius:1px}.ck .ck-insert-table-dropdown-grid-box.ck-on{border-color:var(--ck-color-focus-border);background:var(--ck-color-focus-outer-shadow)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(107);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    ':root{--ck-table-selected-cell-background:rgba(158,207,250,0.3)}.ck.ck-editor__editable .table table td.ck-editor__editable_selected,.ck.ck-editor__editable .table table th.ck-editor__editable_selected{position:relative;caret-color:transparent;outline:unset;box-shadow:unset}.ck.ck-editor__editable .table table td.ck-editor__editable_selected:after,.ck.ck-editor__editable .table table th.ck-editor__editable_selected:after{content:"";pointer-events:none;background-color:var(--ck-table-selected-cell-background);position:absolute;top:0;left:0;right:0;bottom:0}.ck.ck-editor__editable .table table td.ck-editor__editable_selected ::selection,.ck.ck-editor__editable .table table td.ck-editor__editable_selected:focus,.ck.ck-editor__editable .table table th.ck-editor__editable_selected ::selection,.ck.ck-editor__editable .table table th.ck-editor__editable_selected:focus{background-color:transparent}.ck.ck-editor__editable .table table td.ck-editor__editable_selected .ck-widget_selected,.ck.ck-editor__editable .table table th.ck-editor__editable_selected .ck-widget_selected{outline:unset}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(109);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck-content .table{margin:1em auto;display:table}.ck-content .table table{border-collapse:collapse;border-spacing:0;width:100%;height:100%;border:1px double #b3b3b3}.ck-content .table table td,.ck-content .table table th{min-width:2em;padding:.4em;border:1px solid #bfbfbf}.ck-content .table table th{font-weight:700;background:hsla(0,0%,0%,5%)}.ck-content[dir=rtl] .table th{text-align:right}.ck-content[dir=ltr] .table th{text-align:left}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(111);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-input-color{width:100%;display:flex;flex-direction:row-reverse}.ck.ck-input-color>input.ck.ck-input-text{min-width:auto;flex-grow:1}.ck.ck-input-color>div.ck.ck-dropdown{min-width:auto}.ck.ck-input-color>div.ck.ck-dropdown>.ck-input-color__button .ck-dropdown__arrow{display:none}.ck.ck-input-color .ck.ck-input-color__button .ck.ck-input-color__button__preview{position:relative;overflow:hidden}.ck.ck-input-color .ck.ck-input-color__button .ck.ck-input-color__button__preview>.ck.ck-input-color__button__preview__no-color-indicator{position:absolute;display:block}[dir=ltr] .ck.ck-input-color>.ck.ck-input-text{border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .ck.ck-input-color>.ck.ck-input-text{border-top-left-radius:0;border-bottom-left-radius:0}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-button.ck-input-color__button{padding:0}[dir=ltr] .ck.ck-input-color>.ck.ck-dropdown>.ck.ck-button.ck-input-color__button{border-left-width:0;border-top-left-radius:0;border-bottom-left-radius:0}[dir=rtl] .ck.ck-input-color>.ck.ck-dropdown>.ck.ck-button.ck-input-color__button{border-right-width:0;border-top-right-radius:0;border-bottom-right-radius:0}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-button.ck-input-color__button.ck-disabled{background:var(--ck-color-input-disabled-background)}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-button.ck-input-color__button>.ck.ck-input-color__button__preview{border-radius:0}.ck-rounded-corners .ck.ck-input-color>.ck.ck-dropdown>.ck.ck-button.ck-input-color__button>.ck.ck-input-color__button__preview,.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-button.ck-input-color__button>.ck.ck-input-color__button__preview.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-button.ck-input-color__button>.ck.ck-input-color__button__preview{width:20px;height:20px;border:1px solid var(--ck-color-input-border)}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-button.ck-input-color__button>.ck.ck-input-color__button__preview>.ck.ck-input-color__button__preview__no-color-indicator{top:-30%;left:50%;height:150%;width:8%;background:red;border-radius:2px;transform:rotate(45deg);transform-origin:50%}.ck.ck-input-color .ck.ck-input-color__remove-color{width:100%;border-bottom:1px solid var(--ck-color-input-border);padding:calc(var(--ck-spacing-standard)/2) var(--ck-spacing-standard);border-bottom-left-radius:0;border-bottom-right-radius:0}[dir=ltr] .ck.ck-input-color .ck.ck-input-color__remove-color{border-top-right-radius:0}[dir=rtl] .ck.ck-input-color .ck.ck-input-color__remove-color{border-top-left-radius:0}.ck.ck-input-color .ck.ck-input-color__remove-color .ck.ck-icon{margin-right:var(--ck-spacing-standard)}[dir=rtl] .ck.ck-input-color .ck.ck-input-color__remove-color .ck.ck-icon{margin-right:0;margin-left:var(--ck-spacing-standard)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(113);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-form__row{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:space-between}.ck.ck-form__row>:not(.ck-label){flex-grow:1}.ck.ck-form__row.ck-table-form__action-row .ck-button-cancel,.ck.ck-form__row.ck-table-form__action-row .ck-button-save{justify-content:center}.ck.ck-form__row{padding:var(--ck-spacing-standard) var(--ck-spacing-large) 0}[dir=ltr] .ck.ck-form__row>:not(.ck-label)+*{margin-left:var(--ck-spacing-large)}[dir=rtl] .ck.ck-form__row>:not(.ck-label)+*{margin-right:var(--ck-spacing-large)}.ck.ck-form__row>.ck-label{width:100%;min-width:100%}.ck.ck-form__row.ck-table-form__action-row{margin-top:var(--ck-spacing-large)}.ck.ck-form__row.ck-table-form__action-row .ck-button .ck-button__label{color:var(--ck-color-text)}';
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-form{padding:0 0 var(--ck-spacing-large)}.ck.ck-form:focus{outline:none}.ck.ck-form .ck.ck-input-text{min-width:100%;width:0}.ck.ck-form .ck.ck-dropdown{min-width:100%}.ck.ck-form .ck.ck-dropdown .ck-dropdown__button:not(:focus){border:1px solid var(--ck-color-base-border)}.ck.ck-form .ck.ck-dropdown .ck-dropdown__button .ck-button__label{width:100%}';
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-table-form .ck-form__row.ck-table-form__background-row,.ck.ck-table-form .ck-form__row.ck-table-form__border-row{flex-wrap:wrap}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row{flex-wrap:wrap;align-items:center}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-labeled-field-view{display:flex;flex-direction:column-reverse;align-items:center}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-labeled-field-view .ck.ck-dropdown,.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-table-form__dimension-operator{flex-grow:0}.ck.ck-table-form .ck.ck-labeled-field-view{position:relative}.ck.ck-table-form .ck.ck-labeled-field-view .ck.ck-labeled-field-view__status{position:absolute;left:50%;bottom:calc(var(--ck-table-properties-error-arrow-size)*-1);transform:translate(-50%,100%);z-index:1}.ck.ck-table-form .ck.ck-labeled-field-view .ck.ck-labeled-field-view__status:after{content:"";position:absolute;top:calc(var(--ck-table-properties-error-arrow-size)*-1);left:50%;transform:translateX(-50%)}:root{--ck-table-properties-error-arrow-size:6px;--ck-table-properties-min-error-width:150px}.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-labeled-field-view>.ck-label{font-size:var(--ck-font-size-tiny);text-align:center}.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-table-form__border-style,.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-table-form__border-width{width:80px;min-width:80px;max-width:80px}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row{padding:0}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-table-form__dimensions-row__height,.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-table-form__dimensions-row__width{margin:0}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-table-form__dimension-operator{align-self:flex-end;display:inline-block;height:var(--ck-ui-component-min-height);line-height:var(--ck-ui-component-min-height);margin:0 var(--ck-spacing-small)}.ck.ck-table-form .ck.ck-labeled-field-view{padding-top:var(--ck-spacing-standard)}.ck.ck-table-form .ck.ck-labeled-field-view .ck.ck-labeled-field-view__status{border-radius:0}.ck-rounded-corners .ck.ck-table-form .ck.ck-labeled-field-view .ck.ck-labeled-field-view__status,.ck.ck-table-form .ck.ck-labeled-field-view .ck.ck-labeled-field-view__status.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-table-form .ck.ck-labeled-field-view .ck.ck-labeled-field-view__status{background:var(--ck-color-base-error);color:var(--ck-color-base-background);padding:var(--ck-spacing-small) var(--ck-spacing-medium);min-width:var(--ck-table-properties-min-error-width);text-align:center}.ck.ck-table-form .ck.ck-labeled-field-view .ck.ck-labeled-field-view__status:after{border-left:var(--ck-table-properties-error-arrow-size) solid transparent;border-bottom:var(--ck-table-properties-error-arrow-size) solid var(--ck-color-base-error);border-right:var(--ck-table-properties-error-arrow-size) solid transparent;border-top:0 solid transparent}.ck.ck-table-form .ck.ck-labeled-field-view .ck.ck-labeled-field-view__status{animation:ck-table-form-labeled-view-status-appear .15s ease both}.ck.ck-table-form .ck.ck-labeled-field-view .ck-input.ck-error:not(:focus)+.ck.ck-labeled-field-view__status{display:none}@keyframes ck-table-form-labeled-view-status-appear{0%{opacity:0}to{opacity:1}}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(117);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__alignment-row{flex-wrap:wrap}.ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__alignment-row .ck.ck-toolbar:first-of-type{flex-grow:0.57}.ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__alignment-row .ck.ck-toolbar:last-of-type{flex-grow:0.43}.ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__alignment-row .ck.ck-toolbar .ck-button{flex-grow:1}.ck.ck-table-cell-properties-form{width:320px}.ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__padding-row{align-self:flex-end;padding:0;width:25%}.ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__alignment-row .ck.ck-toolbar{background:none;margin-top:var(--ck-spacing-standard)}';
            },
            function (t, e, o) {
                var i = o(1),
                    n = o(119);
                'string' == typeof (n = n.__esModule ? n.default : n) && (n = [[t.i, n, '']]);
                var r = {
                    injectType: 'singletonStyleTag',
                    attributes: { 'data-cke': !0 },
                    insert: 'head',
                    singleton: !0,
                };
                i(n, r);
                t.exports = n.locals || {};
            },
            function (t, e) {
                t.exports =
                    '.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row{flex-wrap:wrap;flex-basis:0;align-content:baseline}.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row .ck.ck-toolbar .ck-toolbar__items{flex-wrap:nowrap}.ck.ck-table-properties-form{width:320px}.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row{align-self:flex-end;padding:0}.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row .ck.ck-toolbar{background:none;margin-top:var(--ck-spacing-standard)}.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row .ck.ck-toolbar .ck-toolbar__items>*{width:40px}';
            },
            function (t, e, o) {
                'use strict';
                o.r(e);
                var i = function () {
                    return function t() {
                        t.called = !0;
                    };
                };
                class n {
                    constructor(t, e) {
                        (this.source = t), (this.name = e), (this.path = []), (this.stop = i()), (this.off = i());
                    }
                }
                const r = new Array(256).fill().map((t, e) => ('0' + e.toString(16)).slice(-2));
                function s() {
                    const t = (4294967296 * Math.random()) >>> 0,
                        e = (4294967296 * Math.random()) >>> 0,
                        o = (4294967296 * Math.random()) >>> 0,
                        i = (4294967296 * Math.random()) >>> 0;
                    return (
                        'e' +
                        r[(t >> 0) & 255] +
                        r[(t >> 8) & 255] +
                        r[(t >> 16) & 255] +
                        r[(t >> 24) & 255] +
                        r[(e >> 0) & 255] +
                        r[(e >> 8) & 255] +
                        r[(e >> 16) & 255] +
                        r[(e >> 24) & 255] +
                        r[(o >> 0) & 255] +
                        r[(o >> 8) & 255] +
                        r[(o >> 16) & 255] +
                        r[(o >> 24) & 255] +
                        r[(i >> 0) & 255] +
                        r[(i >> 8) & 255] +
                        r[(i >> 16) & 255] +
                        r[(i >> 24) & 255]
                    );
                }
                var a = {
                        get(t) {
                            return 'number' != typeof t ? this[t] || this.normal : t;
                        },
                        highest: 1e5,
                        high: 1e3,
                        normal: 0,
                        low: -1e3,
                        lowest: -1e5,
                    },
                    l = (o(6), o(0));
                const c = Symbol('listeningTo'),
                    d = Symbol('emitterId');
                var h = {
                    on(t, e, o = {}) {
                        this.listenTo(this, t, e, o);
                    },
                    once(t, e, o) {
                        let i = !1;
                        this.listenTo(
                            this,
                            t,
                            function (t, ...o) {
                                i || ((i = !0), t.off(), e.call(this, t, ...o));
                            },
                            o,
                        );
                    },
                    off(t, e) {
                        this.stopListening(this, t, e);
                    },
                    listenTo(t, e, o, i = {}) {
                        let n, r;
                        this[c] || (this[c] = {});
                        const s = this[c];
                        f(t) || u(t);
                        const l = f(t);
                        (n = s[l]) || (n = s[l] = { emitter: t, callbacks: {} }),
                            (r = n.callbacks[e]) || (r = n.callbacks[e] = []),
                            r.push(o),
                            (function (t, e) {
                                const o = m(t);
                                if (o[e]) return;
                                let i = e,
                                    n = null;
                                const r = [];
                                for (; '' !== i && !o[i]; )
                                    (o[i] = { callbacks: [], childEvents: [] }),
                                        r.push(o[i]),
                                        n && o[i].childEvents.push(n),
                                        (n = i),
                                        (i = i.substr(0, i.lastIndexOf(':')));
                                if ('' !== i) {
                                    for (const t of r) t.callbacks = o[i].callbacks.slice();
                                    o[i].childEvents.push(n);
                                }
                            })(t, e);
                        const d = g(t, e),
                            h = a.get(i.priority),
                            p = { callback: o, priority: h };
                        for (const t of d) {
                            let e = !1;
                            for (let o = 0; o < t.length; o++)
                                if (t[o].priority < h) {
                                    t.splice(o, 0, p), (e = !0);
                                    break;
                                }
                            e || t.push(p);
                        }
                    },
                    stopListening(t, e, o) {
                        const i = this[c];
                        let n = t && f(t);
                        const r = i && n && i[n],
                            s = r && e && r.callbacks[e];
                        if (!(!i || (t && !r) || (e && !s)))
                            if (o) {
                                b(t, e, o);
                                -1 !== s.indexOf(o) && (1 === s.length ? delete r.callbacks[e] : b(t, e, o));
                            } else if (s) {
                                for (; (o = s.pop()); ) b(t, e, o);
                                delete r.callbacks[e];
                            } else if (r) {
                                for (e in r.callbacks) this.stopListening(t, e);
                                delete i[n];
                            } else {
                                for (n in i) this.stopListening(i[n].emitter);
                                delete this[c];
                            }
                    },
                    fire(t, ...e) {
                        try {
                            const o = t instanceof n ? t : new n(this, t),
                                i = o.name;
                            let r = (function t(e, o) {
                                let i;
                                if (!e._events || !(i = e._events[o]) || !i.callbacks.length)
                                    return o.indexOf(':') > -1 ? t(e, o.substr(0, o.lastIndexOf(':'))) : null;
                                return i.callbacks;
                            })(this, i);
                            if ((o.path.push(this), r)) {
                                const t = [o, ...e];
                                r = Array.from(r);
                                for (
                                    let e = 0;
                                    e < r.length &&
                                    (r[e].callback.apply(this, t),
                                    o.off.called && (delete o.off.called, b(this, i, r[e].callback)),
                                    !o.stop.called);
                                    e++
                                );
                            }
                            if (this._delegations) {
                                const t = this._delegations.get(i),
                                    n = this._delegations.get('*');
                                t && p(t, o, e), n && p(n, o, e);
                            }
                            return o.return;
                        } catch (t) {
                            l.a.rethrowUnexpectedError(t, this);
                        }
                    },
                    delegate(...t) {
                        return {
                            to: (e, o) => {
                                this._delegations || (this._delegations = new Map()),
                                    t.forEach((t) => {
                                        const i = this._delegations.get(t);
                                        i ? i.set(e, o) : this._delegations.set(t, new Map([[e, o]]));
                                    });
                            },
                        };
                    },
                    stopDelegating(t, e) {
                        if (this._delegations)
                            if (t)
                                if (e) {
                                    const o = this._delegations.get(t);
                                    o && o.delete(e);
                                } else this._delegations.delete(t);
                            else this._delegations.clear();
                    },
                };
                function u(t, e) {
                    t[d] || (t[d] = e || s());
                }
                function f(t) {
                    return t[d];
                }
                function m(t) {
                    return t._events || Object.defineProperty(t, '_events', { value: {} }), t._events;
                }
                function g(t, e) {
                    const o = m(t)[e];
                    if (!o) return [];
                    let i = [o.callbacks];
                    for (let e = 0; e < o.childEvents.length; e++) {
                        const n = g(t, o.childEvents[e]);
                        i = i.concat(n);
                    }
                    return i;
                }
                function p(t, e, o) {
                    for (let [i, r] of t) {
                        r ? 'function' == typeof r && (r = r(e.name)) : (r = e.name);
                        const t = new n(e.source, r);
                        (t.path = [...e.path]), i.fire(t, ...o);
                    }
                }
                function b(t, e, o) {
                    const i = g(t, e);
                    for (const t of i) for (let e = 0; e < t.length; e++) t[e].callback == o && (t.splice(e, 1), e--);
                }
                var w = function (t) {
                        var e = typeof t;
                        return null != t && ('object' == e || 'function' == e);
                    },
                    k = o(3),
                    _ = k.a.Symbol,
                    v = Object.prototype,
                    y = v.hasOwnProperty,
                    x = v.toString,
                    C = _ ? _.toStringTag : void 0;
                var A = function (t) {
                        var e = y.call(t, C),
                            o = t[C];
                        try {
                            t[C] = void 0;
                            var i = !0;
                        } catch (t) {}
                        var n = x.call(t);
                        return i && (e ? (t[C] = o) : delete t[C]), n;
                    },
                    T = Object.prototype.toString;
                var P = function (t) {
                        return T.call(t);
                    },
                    S = _ ? _.toStringTag : void 0;
                var E = function (t) {
                    return null == t
                        ? void 0 === t
                            ? '[object Undefined]'
                            : '[object Null]'
                        : S && S in Object(t)
                        ? A(t)
                        : P(t);
                };
                var R,
                    I = function (t) {
                        if (!w(t)) return !1;
                        var e = E(t);
                        return (
                            '[object Function]' == e ||
                            '[object GeneratorFunction]' == e ||
                            '[object AsyncFunction]' == e ||
                            '[object Proxy]' == e
                        );
                    },
                    V = k.a['__core-js_shared__'],
                    O = (R = /[^.]+$/.exec((V && V.keys && V.keys.IE_PROTO) || '')) ? 'Symbol(src)_1.' + R : '';
                var z = function (t) {
                        return !!O && O in t;
                    },
                    M = Function.prototype.toString;
                var N = function (t) {
                        if (null != t) {
                            try {
                                return M.call(t);
                            } catch (t) {}
                            try {
                                return t + '';
                            } catch (t) {}
                        }
                        return '';
                    },
                    B = /^\[object .+?Constructor\]$/,
                    F = Function.prototype,
                    D = Object.prototype,
                    L = F.toString,
                    H = D.hasOwnProperty,
                    j = RegExp(
                        '^' +
                            L.call(H)
                                .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
                                .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') +
                            '$',
                    );
                var W = function (t) {
                    return !(!w(t) || z(t)) && (I(t) ? j : B).test(N(t));
                };
                var q = function (t, e) {
                    return null == t ? void 0 : t[e];
                };
                var U = function (t, e) {
                        var o = q(t, e);
                        return W(o) ? o : void 0;
                    },
                    $ = (function () {
                        try {
                            var t = U(Object, 'defineProperty');
                            return t({}, '', {}), t;
                        } catch (t) {}
                    })();
                var K = function (t, e, o) {
                    '__proto__' == e && $
                        ? $(t, e, { configurable: !0, enumerable: !0, value: o, writable: !0 })
                        : (t[e] = o);
                };
                var G = function (t, e) {
                        return t === e || (t != t && e != e);
                    },
                    J = Object.prototype.hasOwnProperty;
                var Y = function (t, e, o) {
                    var i = t[e];
                    (J.call(t, e) && G(i, o) && (void 0 !== o || e in t)) || K(t, e, o);
                };
                var X = function (t, e, o, i) {
                    var n = !o;
                    o || (o = {});
                    for (var r = -1, s = e.length; ++r < s; ) {
                        var a = e[r],
                            l = i ? i(o[a], t[a], a, o, t) : void 0;
                        void 0 === l && (l = t[a]), n ? K(o, a, l) : Y(o, a, l);
                    }
                    return o;
                };
                var Z = function (t) {
                    return t;
                };
                var Q = function (t, e, o) {
                        switch (o.length) {
                            case 0:
                                return t.call(e);
                            case 1:
                                return t.call(e, o[0]);
                            case 2:
                                return t.call(e, o[0], o[1]);
                            case 3:
                                return t.call(e, o[0], o[1], o[2]);
                        }
                        return t.apply(e, o);
                    },
                    tt = Math.max;
                var et = function (t, e, o) {
                    return (
                        (e = tt(void 0 === e ? t.length - 1 : e, 0)),
                        function () {
                            for (var i = arguments, n = -1, r = tt(i.length - e, 0), s = Array(r); ++n < r; )
                                s[n] = i[e + n];
                            n = -1;
                            for (var a = Array(e + 1); ++n < e; ) a[n] = i[n];
                            return (a[e] = o(s)), Q(t, this, a);
                        }
                    );
                };
                var ot = function (t) {
                        return function () {
                            return t;
                        };
                    },
                    it = $
                        ? function (t, e) {
                              return $(t, 'toString', { configurable: !0, enumerable: !1, value: ot(e), writable: !0 });
                          }
                        : Z,
                    nt = Date.now;
                var rt = (function (t) {
                    var e = 0,
                        o = 0;
                    return function () {
                        var i = nt(),
                            n = 16 - (i - o);
                        if (((o = i), n > 0)) {
                            if (++e >= 800) return arguments[0];
                        } else e = 0;
                        return t.apply(void 0, arguments);
                    };
                })(it);
                var st = function (t, e) {
                    return rt(et(t, e, Z), t + '');
                };
                var at = function (t) {
                    return 'number' == typeof t && t > -1 && t % 1 == 0 && t <= 9007199254740991;
                };
                var lt = function (t) {
                        return null != t && at(t.length) && !I(t);
                    },
                    ct = /^(?:0|[1-9]\d*)$/;
                var dt = function (t, e) {
                    var o = typeof t;
                    return (
                        !!(e = null == e ? 9007199254740991 : e) &&
                        ('number' == o || ('symbol' != o && ct.test(t))) &&
                        t > -1 &&
                        t % 1 == 0 &&
                        t < e
                    );
                };
                var ht = function (t, e, o) {
                    if (!w(o)) return !1;
                    var i = typeof e;
                    return !!('number' == i ? lt(o) && dt(e, o.length) : 'string' == i && e in o) && G(o[e], t);
                };
                var ut = function (t) {
                    return st(function (e, o) {
                        var i = -1,
                            n = o.length,
                            r = n > 1 ? o[n - 1] : void 0,
                            s = n > 2 ? o[2] : void 0;
                        for (
                            r = t.length > 3 && 'function' == typeof r ? (n--, r) : void 0,
                                s && ht(o[0], o[1], s) && ((r = n < 3 ? void 0 : r), (n = 1)),
                                e = Object(e);
                            ++i < n;

                        ) {
                            var a = o[i];
                            a && t(e, a, i, r);
                        }
                        return e;
                    });
                };
                var ft = function (t, e) {
                    for (var o = -1, i = Array(t); ++o < t; ) i[o] = e(o);
                    return i;
                };
                var mt = function (t) {
                    return null != t && 'object' == typeof t;
                };
                var gt = function (t) {
                        return mt(t) && '[object Arguments]' == E(t);
                    },
                    pt = Object.prototype,
                    bt = pt.hasOwnProperty,
                    wt = pt.propertyIsEnumerable,
                    kt = gt(
                        (function () {
                            return arguments;
                        })(),
                    )
                        ? gt
                        : function (t) {
                              return mt(t) && bt.call(t, 'callee') && !wt.call(t, 'callee');
                          },
                    _t = Array.isArray,
                    vt = o(4),
                    yt = {};
                (yt['[object Float32Array]'] =
                    yt['[object Float64Array]'] =
                    yt['[object Int8Array]'] =
                    yt['[object Int16Array]'] =
                    yt['[object Int32Array]'] =
                    yt['[object Uint8Array]'] =
                    yt['[object Uint8ClampedArray]'] =
                    yt['[object Uint16Array]'] =
                    yt['[object Uint32Array]'] =
                        !0),
                    (yt['[object Arguments]'] =
                        yt['[object Array]'] =
                        yt['[object ArrayBuffer]'] =
                        yt['[object Boolean]'] =
                        yt['[object DataView]'] =
                        yt['[object Date]'] =
                        yt['[object Error]'] =
                        yt['[object Function]'] =
                        yt['[object Map]'] =
                        yt['[object Number]'] =
                        yt['[object Object]'] =
                        yt['[object RegExp]'] =
                        yt['[object Set]'] =
                        yt['[object String]'] =
                        yt['[object WeakMap]'] =
                            !1);
                var xt = function (t) {
                    return mt(t) && at(t.length) && !!yt[E(t)];
                };
                var Ct = function (t) {
                        return function (e) {
                            return t(e);
                        };
                    },
                    At = o(5),
                    Tt = At.a && At.a.isTypedArray,
                    Pt = Tt ? Ct(Tt) : xt,
                    St = Object.prototype.hasOwnProperty;
                var Et = function (t, e) {
                        var o = _t(t),
                            i = !o && kt(t),
                            n = !o && !i && Object(vt.a)(t),
                            r = !o && !i && !n && Pt(t),
                            s = o || i || n || r,
                            a = s ? ft(t.length, String) : [],
                            l = a.length;
                        for (var c in t)
                            (!e && !St.call(t, c)) ||
                                (s &&
                                    ('length' == c ||
                                        (n && ('offset' == c || 'parent' == c)) ||
                                        (r && ('buffer' == c || 'byteLength' == c || 'byteOffset' == c)) ||
                                        dt(c, l))) ||
                                a.push(c);
                        return a;
                    },
                    Rt = Object.prototype;
                var It = function (t) {
                    var e = t && t.constructor;
                    return t === (('function' == typeof e && e.prototype) || Rt);
                };
                var Vt = function (t) {
                        var e = [];
                        if (null != t) for (var o in Object(t)) e.push(o);
                        return e;
                    },
                    Ot = Object.prototype.hasOwnProperty;
                var zt = function (t) {
                    if (!w(t)) return Vt(t);
                    var e = It(t),
                        o = [];
                    for (var i in t) ('constructor' != i || (!e && Ot.call(t, i))) && o.push(i);
                    return o;
                };
                var Mt = function (t) {
                        return lt(t) ? Et(t, !0) : zt(t);
                    },
                    Nt = ut(function (t, e) {
                        X(e, Mt(e), t);
                    });
                const Bt = Symbol('observableProperties'),
                    Ft = Symbol('boundObservables'),
                    Dt = Symbol('boundProperties'),
                    Lt = {
                        set(t, e) {
                            if (w(t))
                                return void Object.keys(t).forEach((e) => {
                                    this.set(e, t[e]);
                                }, this);
                            jt(this);
                            const o = this[Bt];
                            if (t in this && !o.has(t)) throw new l.a('observable-set-cannot-override', this);
                            Object.defineProperty(this, t, {
                                enumerable: !0,
                                configurable: !0,
                                get: () => o.get(t),
                                set(e) {
                                    const i = o.get(t);
                                    let n = this.fire('set:' + t, t, e, i);
                                    void 0 === n && (n = e),
                                        (i === n && o.has(t)) || (o.set(t, n), this.fire('change:' + t, t, n, i));
                                },
                            }),
                                (this[t] = e);
                        },
                        bind(...t) {
                            if (!t.length || !Ut(t)) throw new l.a('observable-bind-wrong-properties', this);
                            if (new Set(t).size !== t.length)
                                throw new l.a('observable-bind-duplicate-properties', this);
                            jt(this);
                            const e = this[Dt];
                            t.forEach((t) => {
                                if (e.has(t)) throw new l.a('observable-bind-rebind', this);
                            });
                            const o = new Map();
                            return (
                                t.forEach((t) => {
                                    const i = { property: t, to: [] };
                                    e.set(t, i), o.set(t, i);
                                }),
                                { to: Wt, toMany: qt, _observable: this, _bindProperties: t, _to: [], _bindings: o }
                            );
                        },
                        unbind(...t) {
                            if (!this[Bt]) return;
                            const e = this[Dt],
                                o = this[Ft];
                            if (t.length) {
                                if (!Ut(t)) throw new l.a('observable-unbind-wrong-properties', this);
                                t.forEach((t) => {
                                    const i = e.get(t);
                                    if (!i) return;
                                    let n, r, s, a;
                                    i.to.forEach((t) => {
                                        (n = t[0]),
                                            (r = t[1]),
                                            (s = o.get(n)),
                                            (a = s[r]),
                                            a.delete(i),
                                            a.size || delete s[r],
                                            Object.keys(s).length || (o.delete(n), this.stopListening(n, 'change'));
                                    }),
                                        e.delete(t);
                                });
                            } else
                                o.forEach((t, e) => {
                                    this.stopListening(e, 'change');
                                }),
                                    o.clear(),
                                    e.clear();
                        },
                        decorate(t) {
                            const e = this[t];
                            if (!e)
                                throw new l.a('observablemixin-cannot-decorate-undefined', this, {
                                    object: this,
                                    methodName: t,
                                });
                            this.on(t, (t, o) => {
                                t.return = e.apply(this, o);
                            }),
                                (this[t] = function (...e) {
                                    return this.fire(t, e);
                                });
                        },
                    };
                Nt(Lt, h);
                var Ht = Lt;
                function jt(t) {
                    t[Bt] ||
                        (Object.defineProperty(t, Bt, { value: new Map() }),
                        Object.defineProperty(t, Ft, { value: new Map() }),
                        Object.defineProperty(t, Dt, { value: new Map() }));
                }
                function Wt(...t) {
                    const e = (function (...t) {
                            if (!t.length) throw new l.a('observable-bind-to-parse-error', null);
                            const e = { to: [] };
                            let o;
                            'function' == typeof t[t.length - 1] && (e.callback = t.pop());
                            return (
                                t.forEach((t) => {
                                    if ('string' == typeof t) o.properties.push(t);
                                    else {
                                        if ('object' != typeof t) throw new l.a('observable-bind-to-parse-error', null);
                                        (o = { observable: t, properties: [] }), e.to.push(o);
                                    }
                                }),
                                e
                            );
                        })(...t),
                        o = Array.from(this._bindings.keys()),
                        i = o.length;
                    if (!e.callback && e.to.length > 1) throw new l.a('observable-bind-to-no-callback', this);
                    if (i > 1 && e.callback) throw new l.a('observable-bind-to-extra-callback', this);
                    var n;
                    e.to.forEach((t) => {
                        if (t.properties.length && t.properties.length !== i)
                            throw new l.a('observable-bind-to-properties-length', this);
                        t.properties.length || (t.properties = this._bindProperties);
                    }),
                        (this._to = e.to),
                        e.callback && (this._bindings.get(o[0]).callback = e.callback),
                        (n = this._observable),
                        this._to.forEach((t) => {
                            const e = n[Ft];
                            let o;
                            e.get(t.observable) ||
                                n.listenTo(t.observable, 'change', (i, r) => {
                                    (o = e.get(t.observable)[r]),
                                        o &&
                                            o.forEach((t) => {
                                                $t(n, t.property);
                                            });
                                });
                        }),
                        (function (t) {
                            let e;
                            t._bindings.forEach((o, i) => {
                                t._to.forEach((n) => {
                                    (e = n.properties[o.callback ? 0 : t._bindProperties.indexOf(i)]),
                                        o.to.push([n.observable, e]),
                                        (function (t, e, o, i) {
                                            const n = t[Ft],
                                                r = n.get(o),
                                                s = r || {};
                                            s[i] || (s[i] = new Set());
                                            s[i].add(e), r || n.set(o, s);
                                        })(t._observable, o, n.observable, e);
                                });
                            });
                        })(this),
                        this._bindProperties.forEach((t) => {
                            $t(this._observable, t);
                        });
                }
                function qt(t, e, o) {
                    if (this._bindings.size > 1) throw new l.a('observable-bind-to-many-not-one-binding', this);
                    this.to(
                        ...(function (t, e) {
                            const o = t.map((t) => [t, e]);
                            return Array.prototype.concat.apply([], o);
                        })(t, e),
                        o,
                    );
                }
                function Ut(t) {
                    return t.every((t) => 'string' == typeof t);
                }
                function $t(t, e) {
                    const o = t[Dt].get(e);
                    let i;
                    o.callback
                        ? (i = o.callback.apply(
                              t,
                              o.to.map((t) => t[0][t[1]]),
                          ))
                        : ((i = o.to[0]), (i = i[0][i[1]])),
                        Object.prototype.hasOwnProperty.call(t, e) ? (t[e] = i) : t.set(e, i);
                }
                function Kt(t, ...e) {
                    e.forEach((e) => {
                        Object.getOwnPropertyNames(e)
                            .concat(Object.getOwnPropertySymbols(e))
                            .forEach((o) => {
                                if (o in t.prototype) return;
                                const i = Object.getOwnPropertyDescriptor(e, o);
                                (i.enumerable = !1), Object.defineProperty(t.prototype, o, i);
                            });
                    });
                }
                class Gt {
                    constructor(t) {
                        (this.editor = t), this.set('isEnabled', !0), (this._disableStack = new Set());
                    }
                    forceDisabled(t) {
                        this._disableStack.add(t),
                            1 == this._disableStack.size &&
                                (this.on('set:isEnabled', Jt, { priority: 'highest' }), (this.isEnabled = !1));
                    }
                    clearForceDisabled(t) {
                        this._disableStack.delete(t),
                            0 == this._disableStack.size && (this.off('set:isEnabled', Jt), (this.isEnabled = !0));
                    }
                    destroy() {
                        this.stopListening();
                    }
                    static get isContextPlugin() {
                        return !1;
                    }
                }
                function Jt(t) {
                    (t.return = !1), t.stop();
                }
                Kt(Gt, Ht);
                class Yt {
                    constructor(t) {
                        (this.editor = t),
                            this.set('value', void 0),
                            this.set('isEnabled', !1),
                            (this._disableStack = new Set()),
                            this.decorate('execute'),
                            this.listenTo(this.editor.model.document, 'change', () => {
                                this.refresh();
                            }),
                            this.on(
                                'execute',
                                (t) => {
                                    this.isEnabled || t.stop();
                                },
                                { priority: 'high' },
                            ),
                            this.listenTo(t, 'change:isReadOnly', (t, e, o) => {
                                o ? this.forceDisabled('readOnlyMode') : this.clearForceDisabled('readOnlyMode');
                            });
                    }
                    refresh() {
                        this.isEnabled = !0;
                    }
                    forceDisabled(t) {
                        this._disableStack.add(t),
                            1 == this._disableStack.size &&
                                (this.on('set:isEnabled', Xt, { priority: 'highest' }), (this.isEnabled = !1));
                    }
                    clearForceDisabled(t) {
                        this._disableStack.delete(t),
                            0 == this._disableStack.size && (this.off('set:isEnabled', Xt), this.refresh());
                    }
                    execute() {}
                    destroy() {
                        this.stopListening();
                    }
                }
                function Xt(t) {
                    (t.return = !1), t.stop();
                }
                Kt(Yt, Ht);
                var Zt = function (t, e) {
                        return function (o) {
                            return t(e(o));
                        };
                    },
                    Qt = Zt(Object.getPrototypeOf, Object),
                    te = Function.prototype,
                    ee = Object.prototype,
                    oe = te.toString,
                    ie = ee.hasOwnProperty,
                    ne = oe.call(Object);
                var re = function (t) {
                    if (!mt(t) || '[object Object]' != E(t)) return !1;
                    var e = Qt(t);
                    if (null === e) return !0;
                    var o = ie.call(e, 'constructor') && e.constructor;
                    return 'function' == typeof o && o instanceof o && oe.call(o) == ne;
                };
                var se = function () {
                    (this.__data__ = []), (this.size = 0);
                };
                var ae = function (t, e) {
                        for (var o = t.length; o--; ) if (G(t[o][0], e)) return o;
                        return -1;
                    },
                    le = Array.prototype.splice;
                var ce = function (t) {
                    var e = this.__data__,
                        o = ae(e, t);
                    return !(o < 0) && (o == e.length - 1 ? e.pop() : le.call(e, o, 1), --this.size, !0);
                };
                var de = function (t) {
                    var e = this.__data__,
                        o = ae(e, t);
                    return o < 0 ? void 0 : e[o][1];
                };
                var he = function (t) {
                    return ae(this.__data__, t) > -1;
                };
                var ue = function (t, e) {
                    var o = this.__data__,
                        i = ae(o, t);
                    return i < 0 ? (++this.size, o.push([t, e])) : (o[i][1] = e), this;
                };
                function fe(t) {
                    var e = -1,
                        o = null == t ? 0 : t.length;
                    for (this.clear(); ++e < o; ) {
                        var i = t[e];
                        this.set(i[0], i[1]);
                    }
                }
                (fe.prototype.clear = se),
                    (fe.prototype.delete = ce),
                    (fe.prototype.get = de),
                    (fe.prototype.has = he),
                    (fe.prototype.set = ue);
                var me = fe;
                var ge = function () {
                    (this.__data__ = new me()), (this.size = 0);
                };
                var pe = function (t) {
                    var e = this.__data__,
                        o = e.delete(t);
                    return (this.size = e.size), o;
                };
                var be = function (t) {
                    return this.__data__.get(t);
                };
                var we = function (t) {
                        return this.__data__.has(t);
                    },
                    ke = U(k.a, 'Map'),
                    _e = U(Object, 'create');
                var ve = function () {
                    (this.__data__ = _e ? _e(null) : {}), (this.size = 0);
                };
                var ye = function (t) {
                        var e = this.has(t) && delete this.__data__[t];
                        return (this.size -= e ? 1 : 0), e;
                    },
                    xe = Object.prototype.hasOwnProperty;
                var Ce = function (t) {
                        var e = this.__data__;
                        if (_e) {
                            var o = e[t];
                            return '__lodash_hash_undefined__' === o ? void 0 : o;
                        }
                        return xe.call(e, t) ? e[t] : void 0;
                    },
                    Ae = Object.prototype.hasOwnProperty;
                var Te = function (t) {
                    var e = this.__data__;
                    return _e ? void 0 !== e[t] : Ae.call(e, t);
                };
                var Pe = function (t, e) {
                    var o = this.__data__;
                    return (
                        (this.size += this.has(t) ? 0 : 1),
                        (o[t] = _e && void 0 === e ? '__lodash_hash_undefined__' : e),
                        this
                    );
                };
                function Se(t) {
                    var e = -1,
                        o = null == t ? 0 : t.length;
                    for (this.clear(); ++e < o; ) {
                        var i = t[e];
                        this.set(i[0], i[1]);
                    }
                }
                (Se.prototype.clear = ve),
                    (Se.prototype.delete = ye),
                    (Se.prototype.get = Ce),
                    (Se.prototype.has = Te),
                    (Se.prototype.set = Pe);
                var Ee = Se;
                var Re = function () {
                    (this.size = 0), (this.__data__ = { hash: new Ee(), map: new (ke || me)(), string: new Ee() });
                };
                var Ie = function (t) {
                    var e = typeof t;
                    return 'string' == e || 'number' == e || 'symbol' == e || 'boolean' == e
                        ? '__proto__' !== t
                        : null === t;
                };
                var Ve = function (t, e) {
                    var o = t.__data__;
                    return Ie(e) ? o['string' == typeof e ? 'string' : 'hash'] : o.map;
                };
                var Oe = function (t) {
                    var e = Ve(this, t).delete(t);
                    return (this.size -= e ? 1 : 0), e;
                };
                var ze = function (t) {
                    return Ve(this, t).get(t);
                };
                var Me = function (t) {
                    return Ve(this, t).has(t);
                };
                var Ne = function (t, e) {
                    var o = Ve(this, t),
                        i = o.size;
                    return o.set(t, e), (this.size += o.size == i ? 0 : 1), this;
                };
                function Be(t) {
                    var e = -1,
                        o = null == t ? 0 : t.length;
                    for (this.clear(); ++e < o; ) {
                        var i = t[e];
                        this.set(i[0], i[1]);
                    }
                }
                (Be.prototype.clear = Re),
                    (Be.prototype.delete = Oe),
                    (Be.prototype.get = ze),
                    (Be.prototype.has = Me),
                    (Be.prototype.set = Ne);
                var Fe = Be;
                var De = function (t, e) {
                    var o = this.__data__;
                    if (o instanceof me) {
                        var i = o.__data__;
                        if (!ke || i.length < 199) return i.push([t, e]), (this.size = ++o.size), this;
                        o = this.__data__ = new Fe(i);
                    }
                    return o.set(t, e), (this.size = o.size), this;
                };
                function Le(t) {
                    var e = (this.__data__ = new me(t));
                    this.size = e.size;
                }
                (Le.prototype.clear = ge),
                    (Le.prototype.delete = pe),
                    (Le.prototype.get = be),
                    (Le.prototype.has = we),
                    (Le.prototype.set = De);
                var He = Le;
                var je = function (t, e) {
                        for (var o = -1, i = null == t ? 0 : t.length; ++o < i && !1 !== e(t[o], o, t); );
                        return t;
                    },
                    We = Zt(Object.keys, Object),
                    qe = Object.prototype.hasOwnProperty;
                var Ue = function (t) {
                    if (!It(t)) return We(t);
                    var e = [];
                    for (var o in Object(t)) qe.call(t, o) && 'constructor' != o && e.push(o);
                    return e;
                };
                var $e = function (t) {
                    return lt(t) ? Et(t) : Ue(t);
                };
                var Ke = function (t, e) {
                    return t && X(e, $e(e), t);
                };
                var Ge = function (t, e) {
                        return t && X(e, Mt(e), t);
                    },
                    Je = o(8);
                var Ye = function (t, e) {
                    var o = -1,
                        i = t.length;
                    for (e || (e = Array(i)); ++o < i; ) e[o] = t[o];
                    return e;
                };
                var Xe = function (t, e) {
                    for (var o = -1, i = null == t ? 0 : t.length, n = 0, r = []; ++o < i; ) {
                        var s = t[o];
                        e(s, o, t) && (r[n++] = s);
                    }
                    return r;
                };
                var Ze = function () {
                        return [];
                    },
                    Qe = Object.prototype.propertyIsEnumerable,
                    to = Object.getOwnPropertySymbols,
                    eo = to
                        ? function (t) {
                              return null == t
                                  ? []
                                  : ((t = Object(t)),
                                    Xe(to(t), function (e) {
                                        return Qe.call(t, e);
                                    }));
                          }
                        : Ze;
                var oo = function (t, e) {
                    return X(t, eo(t), e);
                };
                var io = function (t, e) {
                        for (var o = -1, i = e.length, n = t.length; ++o < i; ) t[n + o] = e[o];
                        return t;
                    },
                    no = Object.getOwnPropertySymbols
                        ? function (t) {
                              for (var e = []; t; ) io(e, eo(t)), (t = Qt(t));
                              return e;
                          }
                        : Ze;
                var ro = function (t, e) {
                    return X(t, no(t), e);
                };
                var so = function (t, e, o) {
                    var i = e(t);
                    return _t(t) ? i : io(i, o(t));
                };
                var ao = function (t) {
                    return so(t, $e, eo);
                };
                var lo = function (t) {
                        return so(t, Mt, no);
                    },
                    co = U(k.a, 'DataView'),
                    ho = U(k.a, 'Promise'),
                    uo = U(k.a, 'Set'),
                    fo = U(k.a, 'WeakMap'),
                    mo = N(co),
                    go = N(ke),
                    po = N(ho),
                    bo = N(uo),
                    wo = N(fo),
                    ko = E;
                ((co && '[object DataView]' != ko(new co(new ArrayBuffer(1)))) ||
                    (ke && '[object Map]' != ko(new ke())) ||
                    (ho && '[object Promise]' != ko(ho.resolve())) ||
                    (uo && '[object Set]' != ko(new uo())) ||
                    (fo && '[object WeakMap]' != ko(new fo()))) &&
                    (ko = function (t) {
                        var e = E(t),
                            o = '[object Object]' == e ? t.constructor : void 0,
                            i = o ? N(o) : '';
                        if (i)
                            switch (i) {
                                case mo:
                                    return '[object DataView]';
                                case go:
                                    return '[object Map]';
                                case po:
                                    return '[object Promise]';
                                case bo:
                                    return '[object Set]';
                                case wo:
                                    return '[object WeakMap]';
                            }
                        return e;
                    });
                var _o = ko,
                    vo = Object.prototype.hasOwnProperty;
                var yo = function (t) {
                        var e = t.length,
                            o = new t.constructor(e);
                        return (
                            e &&
                                'string' == typeof t[0] &&
                                vo.call(t, 'index') &&
                                ((o.index = t.index), (o.input = t.input)),
                            o
                        );
                    },
                    xo = k.a.Uint8Array;
                var Co = function (t) {
                    var e = new t.constructor(t.byteLength);
                    return new xo(e).set(new xo(t)), e;
                };
                var Ao = function (t, e) {
                        var o = e ? Co(t.buffer) : t.buffer;
                        return new t.constructor(o, t.byteOffset, t.byteLength);
                    },
                    To = /\w*$/;
                var Po = function (t) {
                        var e = new t.constructor(t.source, To.exec(t));
                        return (e.lastIndex = t.lastIndex), e;
                    },
                    So = _ ? _.prototype : void 0,
                    Eo = So ? So.valueOf : void 0;
                var Ro = function (t) {
                    return Eo ? Object(Eo.call(t)) : {};
                };
                var Io = function (t, e) {
                    var o = e ? Co(t.buffer) : t.buffer;
                    return new t.constructor(o, t.byteOffset, t.length);
                };
                var Vo = function (t, e, o) {
                        var i = t.constructor;
                        switch (e) {
                            case '[object ArrayBuffer]':
                                return Co(t);
                            case '[object Boolean]':
                            case '[object Date]':
                                return new i(+t);
                            case '[object DataView]':
                                return Ao(t, o);
                            case '[object Float32Array]':
                            case '[object Float64Array]':
                            case '[object Int8Array]':
                            case '[object Int16Array]':
                            case '[object Int32Array]':
                            case '[object Uint8Array]':
                            case '[object Uint8ClampedArray]':
                            case '[object Uint16Array]':
                            case '[object Uint32Array]':
                                return Io(t, o);
                            case '[object Map]':
                                return new i();
                            case '[object Number]':
                            case '[object String]':
                                return new i(t);
                            case '[object RegExp]':
                                return Po(t);
                            case '[object Set]':
                                return new i();
                            case '[object Symbol]':
                                return Ro(t);
                        }
                    },
                    Oo = Object.create,
                    zo = (function () {
                        function t() {}
                        return function (e) {
                            if (!w(e)) return {};
                            if (Oo) return Oo(e);
                            t.prototype = e;
                            var o = new t();
                            return (t.prototype = void 0), o;
                        };
                    })();
                var Mo = function (t) {
                    return 'function' != typeof t.constructor || It(t) ? {} : zo(Qt(t));
                };
                var No = function (t) {
                        return mt(t) && '[object Map]' == _o(t);
                    },
                    Bo = At.a && At.a.isMap,
                    Fo = Bo ? Ct(Bo) : No;
                var Do = function (t) {
                        return mt(t) && '[object Set]' == _o(t);
                    },
                    Lo = At.a && At.a.isSet,
                    Ho = Lo ? Ct(Lo) : Do,
                    jo = {};
                (jo['[object Arguments]'] =
                    jo['[object Array]'] =
                    jo['[object ArrayBuffer]'] =
                    jo['[object DataView]'] =
                    jo['[object Boolean]'] =
                    jo['[object Date]'] =
                    jo['[object Float32Array]'] =
                    jo['[object Float64Array]'] =
                    jo['[object Int8Array]'] =
                    jo['[object Int16Array]'] =
                    jo['[object Int32Array]'] =
                    jo['[object Map]'] =
                    jo['[object Number]'] =
                    jo['[object Object]'] =
                    jo['[object RegExp]'] =
                    jo['[object Set]'] =
                    jo['[object String]'] =
                    jo['[object Symbol]'] =
                    jo['[object Uint8Array]'] =
                    jo['[object Uint8ClampedArray]'] =
                    jo['[object Uint16Array]'] =
                    jo['[object Uint32Array]'] =
                        !0),
                    (jo['[object Error]'] = jo['[object Function]'] = jo['[object WeakMap]'] = !1);
                var Wo = function t(e, o, i, n, r, s) {
                    var a,
                        l = 1 & o,
                        c = 2 & o,
                        d = 4 & o;
                    if ((i && (a = r ? i(e, n, r, s) : i(e)), void 0 !== a)) return a;
                    if (!w(e)) return e;
                    var h = _t(e);
                    if (h) {
                        if (((a = yo(e)), !l)) return Ye(e, a);
                    } else {
                        var u = _o(e),
                            f = '[object Function]' == u || '[object GeneratorFunction]' == u;
                        if (Object(vt.a)(e)) return Object(Je.a)(e, l);
                        if ('[object Object]' == u || '[object Arguments]' == u || (f && !r)) {
                            if (((a = c || f ? {} : Mo(e)), !l)) return c ? ro(e, Ge(a, e)) : oo(e, Ke(a, e));
                        } else {
                            if (!jo[u]) return r ? e : {};
                            a = Vo(e, u, l);
                        }
                    }
                    s || (s = new He());
                    var m = s.get(e);
                    if (m) return m;
                    s.set(e, a),
                        Ho(e)
                            ? e.forEach(function (n) {
                                  a.add(t(n, o, i, n, e, s));
                              })
                            : Fo(e) &&
                              e.forEach(function (n, r) {
                                  a.set(r, t(n, o, i, r, e, s));
                              });
                    var g = h ? void 0 : (d ? (c ? lo : ao) : c ? Mt : $e)(e);
                    return (
                        je(g || e, function (n, r) {
                            g && (n = e[(r = n)]), Y(a, r, t(n, o, i, r, e, s));
                        }),
                        a
                    );
                };
                var qo = function (t, e) {
                    return Wo(t, 5, (e = 'function' == typeof e ? e : void 0));
                };
                var Uo = function (t) {
                    return mt(t) && 1 === t.nodeType && !re(t);
                };
                class $o {
                    constructor(t, e) {
                        (this._config = {}), e && this.define(Ko(e)), t && this._setObjectToTarget(this._config, t);
                    }
                    set(t, e) {
                        this._setToTarget(this._config, t, e);
                    }
                    define(t, e) {
                        this._setToTarget(this._config, t, e, !0);
                    }
                    get(t) {
                        return this._getFromSource(this._config, t);
                    }
                    *names() {
                        for (const t of Object.keys(this._config)) yield t;
                    }
                    _setToTarget(t, e, o, i = !1) {
                        if (re(e)) return void this._setObjectToTarget(t, e, i);
                        const n = e.split('.');
                        e = n.pop();
                        for (const e of n) re(t[e]) || (t[e] = {}), (t = t[e]);
                        if (re(o)) return re(t[e]) || (t[e] = {}), (t = t[e]), void this._setObjectToTarget(t, o, i);
                        (i && void 0 !== t[e]) || (t[e] = o);
                    }
                    _getFromSource(t, e) {
                        const o = e.split('.');
                        e = o.pop();
                        for (const e of o) {
                            if (!re(t[e])) {
                                t = null;
                                break;
                            }
                            t = t[e];
                        }
                        return t ? Ko(t[e]) : void 0;
                    }
                    _setObjectToTarget(t, e, o) {
                        Object.keys(e).forEach((i) => {
                            this._setToTarget(t, i, e[i], o);
                        });
                    }
                }
                function Ko(t) {
                    return qo(t, Go);
                }
                function Go(t) {
                    return Uo(t) ? t : void 0;
                }
                function Jo(t) {
                    return !(!t || !t[Symbol.iterator]);
                }
                class Yo {
                    constructor(t = {}, e = {}) {
                        const o = Jo(t);
                        if (
                            (o || (e = t),
                            (this._items = []),
                            (this._itemMap = new Map()),
                            (this._idProperty = e.idProperty || 'id'),
                            (this._bindToExternalToInternalMap = new WeakMap()),
                            (this._bindToInternalToExternalMap = new WeakMap()),
                            (this._skippedIndexesFromExternal = []),
                            o)
                        )
                            for (const e of t)
                                this._items.push(e), this._itemMap.set(this._getItemIdBeforeAdding(e), e);
                    }
                    get length() {
                        return this._items.length;
                    }
                    get first() {
                        return this._items[0] || null;
                    }
                    get last() {
                        return this._items[this.length - 1] || null;
                    }
                    add(t, e) {
                        return this.addMany([t], e);
                    }
                    addMany(t, e) {
                        if (void 0 === e) e = this._items.length;
                        else if (e > this._items.length || e < 0)
                            throw new l.a('collection-add-item-invalid-index', this);
                        for (let o = 0; o < t.length; o++) {
                            const i = t[o],
                                n = this._getItemIdBeforeAdding(i),
                                r = e + o;
                            this._items.splice(r, 0, i), this._itemMap.set(n, i), this.fire('add', i, r);
                        }
                        return this.fire('change', { added: t, removed: [], index: e }), this;
                    }
                    get(t) {
                        let e;
                        if ('string' == typeof t) e = this._itemMap.get(t);
                        else {
                            if ('number' != typeof t) throw new l.a('collection-get-invalid-arg', this);
                            e = this._items[t];
                        }
                        return e || null;
                    }
                    has(t) {
                        if ('string' == typeof t) return this._itemMap.has(t);
                        {
                            const e = t[this._idProperty];
                            return this._itemMap.has(e);
                        }
                    }
                    getIndex(t) {
                        let e;
                        return (e = 'string' == typeof t ? this._itemMap.get(t) : t), this._items.indexOf(e);
                    }
                    remove(t) {
                        const [e, o] = this._remove(t);
                        return this.fire('change', { added: [], removed: [e], index: o }), e;
                    }
                    map(t, e) {
                        return this._items.map(t, e);
                    }
                    find(t, e) {
                        return this._items.find(t, e);
                    }
                    filter(t, e) {
                        return this._items.filter(t, e);
                    }
                    clear() {
                        this._bindToCollection &&
                            (this.stopListening(this._bindToCollection), (this._bindToCollection = null));
                        const t = Array.from(this._items);
                        for (; this.length; ) this._remove(0);
                        this.fire('change', { added: [], removed: t, index: 0 });
                    }
                    bindTo(t) {
                        if (this._bindToCollection) throw new l.a('collection-bind-to-rebind', this);
                        return (
                            (this._bindToCollection = t),
                            {
                                as: (t) => {
                                    this._setUpBindToBinding((e) => new t(e));
                                },
                                using: (t) => {
                                    'function' == typeof t
                                        ? this._setUpBindToBinding((e) => t(e))
                                        : this._setUpBindToBinding((e) => e[t]);
                                },
                            }
                        );
                    }
                    _setUpBindToBinding(t) {
                        const e = this._bindToCollection,
                            o = (o, i, n) => {
                                const r = e._bindToCollection == this,
                                    s = e._bindToInternalToExternalMap.get(i);
                                if (r && s)
                                    this._bindToExternalToInternalMap.set(i, s),
                                        this._bindToInternalToExternalMap.set(s, i);
                                else {
                                    const o = t(i);
                                    if (!o) return void this._skippedIndexesFromExternal.push(n);
                                    let r = n;
                                    for (const t of this._skippedIndexesFromExternal) n > t && r--;
                                    for (const t of e._skippedIndexesFromExternal) r >= t && r++;
                                    this._bindToExternalToInternalMap.set(i, o),
                                        this._bindToInternalToExternalMap.set(o, i),
                                        this.add(o, r);
                                    for (let t = 0; t < e._skippedIndexesFromExternal.length; t++)
                                        r <= e._skippedIndexesFromExternal[t] && e._skippedIndexesFromExternal[t]++;
                                }
                            };
                        for (const t of e) o(0, t, e.getIndex(t));
                        this.listenTo(e, 'add', o),
                            this.listenTo(e, 'remove', (t, e, o) => {
                                const i = this._bindToExternalToInternalMap.get(e);
                                i && this.remove(i),
                                    (this._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce(
                                        (t, e) => (o < e && t.push(e - 1), o > e && t.push(e), t),
                                        [],
                                    ));
                            });
                    }
                    _getItemIdBeforeAdding(t) {
                        const e = this._idProperty;
                        let o;
                        if (e in t) {
                            if (((o = t[e]), 'string' != typeof o)) throw new l.a('collection-add-invalid-id', this);
                            if (this.get(o)) throw new l.a('collection-add-item-already-exists', this);
                        } else t[e] = o = s();
                        return o;
                    }
                    _remove(t) {
                        let e,
                            o,
                            i,
                            n = !1;
                        const r = this._idProperty;
                        if (
                            ('string' == typeof t
                                ? ((o = t), (i = this._itemMap.get(o)), (n = !i), i && (e = this._items.indexOf(i)))
                                : 'number' == typeof t
                                ? ((e = t), (i = this._items[e]), (n = !i), i && (o = i[r]))
                                : ((i = t),
                                  (o = i[r]),
                                  (e = this._items.indexOf(i)),
                                  (n = -1 == e || !this._itemMap.get(o))),
                            n)
                        )
                            throw new l.a('collection-remove-404', this);
                        this._items.splice(e, 1), this._itemMap.delete(o);
                        const s = this._bindToInternalToExternalMap.get(i);
                        return (
                            this._bindToInternalToExternalMap.delete(i),
                            this._bindToExternalToInternalMap.delete(s),
                            this.fire('remove', i, e),
                            [i, e]
                        );
                    }
                    [Symbol.iterator]() {
                        return this._items[Symbol.iterator]();
                    }
                }
                Kt(Yo, h);
                class Xo {
                    constructor(t, e = [], o = []) {
                        (this._context = t), (this._plugins = new Map()), (this._availablePlugins = new Map());
                        for (const t of e) t.pluginName && this._availablePlugins.set(t.pluginName, t);
                        this._contextPlugins = new Map();
                        for (const [t, e] of o)
                            this._contextPlugins.set(t, e),
                                this._contextPlugins.set(e, t),
                                t.pluginName && this._availablePlugins.set(t.pluginName, t);
                    }
                    *[Symbol.iterator]() {
                        for (const t of this._plugins) 'function' == typeof t[0] && (yield t);
                    }
                    get(t) {
                        const e = this._plugins.get(t);
                        if (!e) {
                            let e = t;
                            throw (
                                ('function' == typeof t && (e = t.pluginName || t.name),
                                new l.a('plugincollection-plugin-not-loaded', this._context, { plugin: e }))
                            );
                        }
                        return e;
                    }
                    has(t) {
                        return this._plugins.has(t);
                    }
                    init(t, e = [], o = []) {
                        const i = this,
                            n = this._context;
                        !(function t(e, o = new Set()) {
                            e.forEach((e) => {
                                a(e) &&
                                    (o.has(e) ||
                                        (o.add(e),
                                        e.pluginName &&
                                            !i._availablePlugins.has(e.pluginName) &&
                                            i._availablePlugins.set(e.pluginName, e),
                                        e.requires && t(e.requires, o)));
                            });
                        })(t),
                            u(t);
                        const r = [
                            ...(function t(e, o = new Set()) {
                                return e
                                    .map((t) => (a(t) ? t : i._availablePlugins.get(t)))
                                    .reduce(
                                        (e, i) =>
                                            o.has(i)
                                                ? e
                                                : (o.add(i),
                                                  i.requires &&
                                                      (u(i.requires, i), t(i.requires, o).forEach((t) => e.add(t))),
                                                  e.add(i)),
                                        new Set(),
                                    );
                            })(t.filter((t) => !d(t, e))),
                        ];
                        !(function (t, e) {
                            for (const o of e) {
                                if ('function' != typeof o)
                                    throw new l.a('plugincollection-replace-plugin-invalid-type', null, {
                                        pluginItem: o,
                                    });
                                const e = o.pluginName;
                                if (!e)
                                    throw new l.a('plugincollection-replace-plugin-missing-name', null, {
                                        pluginItem: o,
                                    });
                                if (o.requires && o.requires.length)
                                    throw new l.a(
                                        'plugincollection-plugin-for-replacing-cannot-have-dependencies',
                                        null,
                                        { pluginName: e },
                                    );
                                const n = i._availablePlugins.get(e);
                                if (!n)
                                    throw new l.a('plugincollection-plugin-for-replacing-not-exist', null, {
                                        pluginName: e,
                                    });
                                const r = t.indexOf(n);
                                if (-1 === r) {
                                    if (i._contextPlugins.has(n)) return;
                                    throw new l.a('plugincollection-plugin-for-replacing-not-loaded', null, {
                                        pluginName: e,
                                    });
                                }
                                if (n.requires && n.requires.length)
                                    throw new l.a('plugincollection-replaced-plugin-cannot-have-dependencies', null, {
                                        pluginName: e,
                                    });
                                t.splice(r, 1, o), i._availablePlugins.set(e, o);
                            }
                        })(r, o);
                        const s = (function (t) {
                            return t.map((t) => {
                                const e = i._contextPlugins.get(t) || new t(n);
                                return i._add(t, e), e;
                            });
                        })(r);
                        return f(s, 'init')
                            .then(() => f(s, 'afterInit'))
                            .then(() => s);
                        function a(t) {
                            return 'function' == typeof t;
                        }
                        function c(t) {
                            return a(t) && t.isContextPlugin;
                        }
                        function d(t, e) {
                            return e.some((e) => e === t || h(t) === e || h(e) === t);
                        }
                        function h(t) {
                            return a(t) ? t.pluginName || t.name : t;
                        }
                        function u(t, o = null) {
                            t.map((t) => (a(t) ? t : i._availablePlugins.get(t) || t)).forEach((t) => {
                                !(function (t, e) {
                                    if (a(t)) return;
                                    if (e)
                                        throw new l.a('plugincollection-soft-required', n, {
                                            missingPlugin: t,
                                            requiredBy: h(e),
                                        });
                                    throw new l.a('plugincollection-plugin-not-found', n, { plugin: t });
                                })(t, o),
                                    (function (t, e) {
                                        if (!c(e)) return;
                                        if (c(t)) return;
                                        throw new l.a('plugincollection-context-required', n, {
                                            plugin: h(t),
                                            requiredBy: h(e),
                                        });
                                    })(t, o),
                                    (function (t, o) {
                                        if (!o) return;
                                        if (!d(t, e)) return;
                                        throw new l.a('plugincollection-required', n, {
                                            plugin: h(t),
                                            requiredBy: h(o),
                                        });
                                    })(t, o);
                            });
                        }
                        function f(t, e) {
                            return t.reduce(
                                (t, o) => (o[e] ? (i._contextPlugins.has(o) ? t : t.then(o[e].bind(o))) : t),
                                Promise.resolve(),
                            );
                        }
                    }
                    destroy() {
                        const t = [];
                        for (const [, e] of this)
                            'function' != typeof e.destroy || this._contextPlugins.has(e) || t.push(e.destroy());
                        return Promise.all(t);
                    }
                    _add(t, e) {
                        this._plugins.set(t, e);
                        const o = t.pluginName;
                        if (o) {
                            if (this._plugins.has(o))
                                throw new l.a('plugincollection-plugin-name-conflict', null, {
                                    pluginName: o,
                                    plugin1: this._plugins.get(o).constructor,
                                    plugin2: t,
                                });
                            this._plugins.set(o, e);
                        }
                    }
                }
                function Zo(t) {
                    return Array.isArray(t) ? t : [t];
                }
                function Qo(t, e, o = 1) {
                    if ('number' != typeof o)
                        throw new l.a('translation-service-quantity-not-a-number', null, { quantity: o });
                    const i = Object.keys(window.CKEDITOR_TRANSLATIONS).length;
                    1 === i && (t = Object.keys(window.CKEDITOR_TRANSLATIONS)[0]);
                    const n = e.id || e.string;
                    if (
                        0 === i ||
                        !(function (t, e) {
                            return !!window.CKEDITOR_TRANSLATIONS[t] && !!window.CKEDITOR_TRANSLATIONS[t].dictionary[e];
                        })(t, n)
                    )
                        return 1 !== o ? e.plural : e.string;
                    const r = window.CKEDITOR_TRANSLATIONS[t].dictionary,
                        s = window.CKEDITOR_TRANSLATIONS[t].getPluralForm || ((t) => (1 === t ? 0 : 1));
                    if ('string' == typeof r[n]) return r[n];
                    const a = Number(s(o));
                    return r[n][a];
                }
                Kt(Xo, h), window.CKEDITOR_TRANSLATIONS || (window.CKEDITOR_TRANSLATIONS = {});
                const ti = ['ar', 'fa', 'he', 'ku', 'ug'];
                class ei {
                    constructor(t = {}) {
                        (this.uiLanguage = t.uiLanguage || 'en'),
                            (this.contentLanguage = t.contentLanguage || this.uiLanguage),
                            (this.uiLanguageDirection = oi(this.uiLanguage)),
                            (this.contentLanguageDirection = oi(this.contentLanguage)),
                            (this.t = (t, e) => this._t(t, e));
                    }
                    get language() {
                        return (
                            console.warn(
                                'locale-deprecated-language-property: The Locale#language property has been deprecated and will be removed in the near future. Please use #uiLanguage and #contentLanguage properties instead.',
                            ),
                            this.uiLanguage
                        );
                    }
                    _t(t, e = []) {
                        (e = Zo(e)), 'string' == typeof t && (t = { string: t });
                        const o = !!t.plural ? e[0] : 1;
                        return (function (t, e) {
                            return t.replace(/%(\d+)/g, (t, o) => (o < e.length ? e[o] : t));
                        })(Qo(this.uiLanguage, t, o), e);
                    }
                }
                function oi(t) {
                    return ti.includes(t) ? 'rtl' : 'ltr';
                }
                class ii {
                    constructor(t) {
                        this.config = new $o(t, this.constructor.defaultConfig);
                        const e = this.constructor.builtinPlugins;
                        this.config.define('plugins', e), (this.plugins = new Xo(this, e));
                        const o = this.config.get('language') || {};
                        (this.locale = new ei({
                            uiLanguage: 'string' == typeof o ? o : o.ui,
                            contentLanguage: this.config.get('language.content'),
                        })),
                            (this.t = this.locale.t),
                            (this.editors = new Yo()),
                            (this._contextOwner = null);
                    }
                    initPlugins() {
                        const t = this.config.get('plugins') || [],
                            e = this.config.get('substitutePlugins') || [];
                        for (const o of t.concat(e)) {
                            if ('function' != typeof o)
                                throw new l.a('context-initplugins-constructor-only', null, { Plugin: o });
                            if (!0 !== o.isContextPlugin)
                                throw new l.a('context-initplugins-invalid-plugin', null, { Plugin: o });
                        }
                        return this.plugins.init(t, [], e);
                    }
                    destroy() {
                        return Promise.all(Array.from(this.editors, (t) => t.destroy())).then(() =>
                            this.plugins.destroy(),
                        );
                    }
                    _addEditor(t, e) {
                        if (this._contextOwner) throw new l.a('context-addeditor-private-context');
                        this.editors.add(t), e && (this._contextOwner = t);
                    }
                    _removeEditor(t) {
                        return (
                            this.editors.has(t) && this.editors.remove(t),
                            this._contextOwner === t ? this.destroy() : Promise.resolve()
                        );
                    }
                    _getEditorConfig() {
                        const t = {};
                        for (const e of this.config.names())
                            ['plugins', 'removePlugins', 'extraPlugins'].includes(e) || (t[e] = this.config.get(e));
                        return t;
                    }
                    static create(t) {
                        return new Promise((e) => {
                            const o = new this(t);
                            e(o.initPlugins().then(() => o));
                        });
                    }
                }
                class ni {
                    constructor(t) {
                        this.context = t;
                    }
                    destroy() {
                        this.stopListening();
                    }
                    static get isContextPlugin() {
                        return !0;
                    }
                }
                function ri(t, e) {
                    const o = Math.min(t.length, e.length);
                    for (let i = 0; i < o; i++) if (t[i] != e[i]) return i;
                    return t.length == e.length ? 'same' : t.length < e.length ? 'prefix' : 'extension';
                }
                Kt(ni, Ht);
                var si = function (t) {
                    return Wo(t, 4);
                };
                class ai {
                    constructor(t) {
                        (this.document = t), (this.parent = null);
                    }
                    get index() {
                        let t;
                        if (!this.parent) return null;
                        if (-1 == (t = this.parent.getChildIndex(this)))
                            throw new l.a('view-node-not-found-in-parent', this);
                        return t;
                    }
                    get nextSibling() {
                        const t = this.index;
                        return (null !== t && this.parent.getChild(t + 1)) || null;
                    }
                    get previousSibling() {
                        const t = this.index;
                        return (null !== t && this.parent.getChild(t - 1)) || null;
                    }
                    get root() {
                        let t = this;
                        for (; t.parent; ) t = t.parent;
                        return t;
                    }
                    isAttached() {
                        return this.root.is('rootElement');
                    }
                    getPath() {
                        const t = [];
                        let e = this;
                        for (; e.parent; ) t.unshift(e.index), (e = e.parent);
                        return t;
                    }
                    getAncestors(t = { includeSelf: !1, parentFirst: !1 }) {
                        const e = [];
                        let o = t.includeSelf ? this : this.parent;
                        for (; o; ) e[t.parentFirst ? 'push' : 'unshift'](o), (o = o.parent);
                        return e;
                    }
                    getCommonAncestor(t, e = {}) {
                        const o = this.getAncestors(e),
                            i = t.getAncestors(e);
                        let n = 0;
                        for (; o[n] == i[n] && o[n]; ) n++;
                        return 0 === n ? null : o[n - 1];
                    }
                    isBefore(t) {
                        if (this == t) return !1;
                        if (this.root !== t.root) return !1;
                        const e = this.getPath(),
                            o = t.getPath(),
                            i = ri(e, o);
                        switch (i) {
                            case 'prefix':
                                return !0;
                            case 'extension':
                                return !1;
                            default:
                                return e[i] < o[i];
                        }
                    }
                    isAfter(t) {
                        return this != t && this.root === t.root && !this.isBefore(t);
                    }
                    _remove() {
                        this.parent._removeChildren(this.index);
                    }
                    _fireChange(t, e) {
                        this.fire('change:' + t, e), this.parent && this.parent._fireChange(t, e);
                    }
                    toJSON() {
                        const t = si(this);
                        return delete t.parent, t;
                    }
                    is(t) {
                        return 'node' === t || 'view:node' === t;
                    }
                }
                Kt(ai, h);
                class li extends ai {
                    constructor(t, e) {
                        super(t), (this._textData = e);
                    }
                    is(t) {
                        return (
                            '$text' === t ||
                            'view:$text' === t ||
                            'text' === t ||
                            'view:text' === t ||
                            'node' === t ||
                            'view:node' === t
                        );
                    }
                    get data() {
                        return this._textData;
                    }
                    get _data() {
                        return this.data;
                    }
                    set _data(t) {
                        this._fireChange('text', this), (this._textData = t);
                    }
                    isSimilar(t) {
                        return t instanceof li && (this === t || this.data === t.data);
                    }
                    _clone() {
                        return new li(this.document, this.data);
                    }
                }
                class ci {
                    constructor(t, e, o) {
                        if (((this.textNode = t), e < 0 || e > t.data.length))
                            throw new l.a('view-textproxy-wrong-offsetintext', this);
                        if (o < 0 || e + o > t.data.length) throw new l.a('view-textproxy-wrong-length', this);
                        (this.data = t.data.substring(e, e + o)), (this.offsetInText = e);
                    }
                    get offsetSize() {
                        return this.data.length;
                    }
                    get isPartial() {
                        return this.data.length !== this.textNode.data.length;
                    }
                    get parent() {
                        return this.textNode.parent;
                    }
                    get root() {
                        return this.textNode.root;
                    }
                    get document() {
                        return this.textNode.document;
                    }
                    is(t) {
                        return (
                            '$textProxy' === t || 'view:$textProxy' === t || 'textProxy' === t || 'view:textProxy' === t
                        );
                    }
                    getAncestors(t = { includeSelf: !1, parentFirst: !1 }) {
                        const e = [];
                        let o = t.includeSelf ? this.textNode : this.parent;
                        for (; null !== o; ) e[t.parentFirst ? 'push' : 'unshift'](o), (o = o.parent);
                        return e;
                    }
                }
                function di(t) {
                    return Jo(t)
                        ? new Map(t)
                        : (function (t) {
                              const e = new Map();
                              for (const o in t) e.set(o, t[o]);
                              return e;
                          })(t);
                }
                class hi {
                    constructor(...t) {
                        (this._patterns = []), this.add(...t);
                    }
                    add(...t) {
                        for (let e of t)
                            ('string' == typeof e || e instanceof RegExp) && (e = { name: e }),
                                e.classes &&
                                    ('string' == typeof e.classes || e.classes instanceof RegExp) &&
                                    (e.classes = [e.classes]),
                                this._patterns.push(e);
                    }
                    match(...t) {
                        for (const e of t)
                            for (const t of this._patterns) {
                                const o = ui(e, t);
                                if (o) return { element: e, pattern: t, match: o };
                            }
                        return null;
                    }
                    matchAll(...t) {
                        const e = [];
                        for (const o of t)
                            for (const t of this._patterns) {
                                const i = ui(o, t);
                                i && e.push({ element: o, pattern: t, match: i });
                            }
                        return e.length > 0 ? e : null;
                    }
                    getElementName() {
                        if (1 !== this._patterns.length) return null;
                        const t = this._patterns[0],
                            e = t.name;
                        return 'function' == typeof t || !e || e instanceof RegExp ? null : e;
                    }
                }
                function ui(t, e) {
                    if ('function' == typeof e) return e(t);
                    const o = {};
                    return (e.name &&
                        ((o.name = (function (t, e) {
                            if (t instanceof RegExp) return t.test(e);
                            return t === e;
                        })(e.name, t.name)),
                        !o.name)) ||
                        (e.attributes &&
                            ((o.attributes = (function (t, e) {
                                const o = [];
                                for (const i in t) {
                                    const n = t[i];
                                    if (!e.hasAttribute(i)) return null;
                                    {
                                        const t = e.getAttribute(i);
                                        if (!0 === n) o.push(i);
                                        else if (n instanceof RegExp) {
                                            if (!n.test(t)) return null;
                                            o.push(i);
                                        } else {
                                            if (t !== n) return null;
                                            o.push(i);
                                        }
                                    }
                                }
                                return o;
                            })(e.attributes, t)),
                            !o.attributes))
                        ? null
                        : !(
                              e.classes &&
                              ((o.classes = (function (t, e) {
                                  const o = [];
                                  for (const i of t)
                                      if (i instanceof RegExp) {
                                          const t = e.getClassNames();
                                          for (const e of t) i.test(e) && o.push(e);
                                          if (0 === o.length) return null;
                                      } else {
                                          if (!e.hasClass(i)) return null;
                                          o.push(i);
                                      }
                                  return o;
                              })(e.classes, t)),
                              !o.classes)
                          ) &&
                              !(
                                  e.styles &&
                                  ((o.styles = (function (t, e) {
                                      const o = [];
                                      for (const i in t) {
                                          const n = t[i];
                                          if (!e.hasStyle(i)) return null;
                                          {
                                              const t = e.getStyle(i);
                                              if (n instanceof RegExp) {
                                                  if (!n.test(t)) return null;
                                                  o.push(i);
                                              } else {
                                                  if (t !== n) return null;
                                                  o.push(i);
                                              }
                                          }
                                      }
                                      return o;
                                  })(e.styles, t)),
                                  !o.styles)
                              ) &&
                              o;
                }
                var fi = function (t) {
                        return 'symbol' == typeof t || (mt(t) && '[object Symbol]' == E(t));
                    },
                    mi = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                    gi = /^\w*$/;
                var pi = function (t, e) {
                    if (_t(t)) return !1;
                    var o = typeof t;
                    return (
                        !('number' != o && 'symbol' != o && 'boolean' != o && null != t && !fi(t)) ||
                        gi.test(t) ||
                        !mi.test(t) ||
                        (null != e && t in Object(e))
                    );
                };
                function bi(t, e) {
                    if ('function' != typeof t || (null != e && 'function' != typeof e))
                        throw new TypeError('Expected a function');
                    var o = function () {
                        var i = arguments,
                            n = e ? e.apply(this, i) : i[0],
                            r = o.cache;
                        if (r.has(n)) return r.get(n);
                        var s = t.apply(this, i);
                        return (o.cache = r.set(n, s) || r), s;
                    };
                    return (o.cache = new (bi.Cache || Fe)()), o;
                }
                bi.Cache = Fe;
                var wi = bi;
                var ki =
                        /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
                    _i = /\\(\\)?/g,
                    vi = (function (t) {
                        var e = wi(t, function (t) {
                                return 500 === o.size && o.clear(), t;
                            }),
                            o = e.cache;
                        return e;
                    })(function (t) {
                        var e = [];
                        return (
                            46 === t.charCodeAt(0) && e.push(''),
                            t.replace(ki, function (t, o, i, n) {
                                e.push(i ? n.replace(_i, '$1') : o || t);
                            }),
                            e
                        );
                    });
                var yi = function (t, e) {
                        for (var o = -1, i = null == t ? 0 : t.length, n = Array(i); ++o < i; ) n[o] = e(t[o], o, t);
                        return n;
                    },
                    xi = _ ? _.prototype : void 0,
                    Ci = xi ? xi.toString : void 0;
                var Ai = function t(e) {
                    if ('string' == typeof e) return e;
                    if (_t(e)) return yi(e, t) + '';
                    if (fi(e)) return Ci ? Ci.call(e) : '';
                    var o = e + '';
                    return '0' == o && 1 / e == -1 / 0 ? '-0' : o;
                };
                var Ti = function (t) {
                    return null == t ? '' : Ai(t);
                };
                var Pi = function (t, e) {
                    return _t(t) ? t : pi(t, e) ? [t] : vi(Ti(t));
                };
                var Si = function (t) {
                    var e = null == t ? 0 : t.length;
                    return e ? t[e - 1] : void 0;
                };
                var Ei = function (t) {
                    if ('string' == typeof t || fi(t)) return t;
                    var e = t + '';
                    return '0' == e && 1 / t == -1 / 0 ? '-0' : e;
                };
                var Ri = function (t, e) {
                    for (var o = 0, i = (e = Pi(e, t)).length; null != t && o < i; ) t = t[Ei(e[o++])];
                    return o && o == i ? t : void 0;
                };
                var Ii = function (t, e, o) {
                    var i = -1,
                        n = t.length;
                    e < 0 && (e = -e > n ? 0 : n + e),
                        (o = o > n ? n : o) < 0 && (o += n),
                        (n = e > o ? 0 : (o - e) >>> 0),
                        (e >>>= 0);
                    for (var r = Array(n); ++i < n; ) r[i] = t[i + e];
                    return r;
                };
                var Vi = function (t, e) {
                    return e.length < 2 ? t : Ri(t, Ii(e, 0, -1));
                };
                var Oi = function (t, e) {
                    return (e = Pi(e, t)), null == (t = Vi(t, e)) || delete t[Ei(Si(e))];
                };
                var zi = function (t, e) {
                    return null == t || Oi(t, e);
                };
                var Mi = function (t, e, o) {
                    var i = null == t ? void 0 : Ri(t, e);
                    return void 0 === i ? o : i;
                };
                var Ni = function (t, e, o) {
                    ((void 0 !== o && !G(t[e], o)) || (void 0 === o && !(e in t))) && K(t, e, o);
                };
                var Bi = (function (t) {
                    return function (e, o, i) {
                        for (var n = -1, r = Object(e), s = i(e), a = s.length; a--; ) {
                            var l = s[t ? a : ++n];
                            if (!1 === o(r[l], l, r)) break;
                        }
                        return e;
                    };
                })();
                var Fi = function (t) {
                    return mt(t) && lt(t);
                };
                var Di = function (t, e) {
                    if (('constructor' !== e || 'function' != typeof t[e]) && '__proto__' != e) return t[e];
                };
                var Li = function (t) {
                    return X(t, Mt(t));
                };
                var Hi = function (t, e, o, i, n, r, s) {
                    var a = Di(t, o),
                        l = Di(e, o),
                        c = s.get(l);
                    if (c) Ni(t, o, c);
                    else {
                        var d = r ? r(a, l, o + '', t, e, s) : void 0,
                            h = void 0 === d;
                        if (h) {
                            var u = _t(l),
                                f = !u && Object(vt.a)(l),
                                m = !u && !f && Pt(l);
                            (d = l),
                                u || f || m
                                    ? _t(a)
                                        ? (d = a)
                                        : Fi(a)
                                        ? (d = Ye(a))
                                        : f
                                        ? ((h = !1), (d = Object(Je.a)(l, !0)))
                                        : m
                                        ? ((h = !1), (d = Io(l, !0)))
                                        : (d = [])
                                    : re(l) || kt(l)
                                    ? ((d = a), kt(a) ? (d = Li(a)) : (w(a) && !I(a)) || (d = Mo(l)))
                                    : (h = !1);
                        }
                        h && (s.set(l, d), n(d, l, i, r, s), s.delete(l)), Ni(t, o, d);
                    }
                };
                var ji = function t(e, o, i, n, r) {
                        e !== o &&
                            Bi(
                                o,
                                function (s, a) {
                                    if ((r || (r = new He()), w(s))) Hi(e, o, a, i, t, n, r);
                                    else {
                                        var l = n ? n(Di(e, a), s, a + '', e, o, r) : void 0;
                                        void 0 === l && (l = s), Ni(e, a, l);
                                    }
                                },
                                Mt,
                            );
                    },
                    Wi = ut(function (t, e, o) {
                        ji(t, e, o);
                    });
                var qi = function (t, e, o, i) {
                    if (!w(t)) return t;
                    for (var n = -1, r = (e = Pi(e, t)).length, s = r - 1, a = t; null != a && ++n < r; ) {
                        var l = Ei(e[n]),
                            c = o;
                        if ('__proto__' === l || 'constructor' === l || 'prototype' === l) return t;
                        if (n != s) {
                            var d = a[l];
                            void 0 === (c = i ? i(d, l, a) : void 0) && (c = w(d) ? d : dt(e[n + 1]) ? [] : {});
                        }
                        Y(a, l, c), (a = a[l]);
                    }
                    return t;
                };
                var Ui = function (t, e, o) {
                    return null == t ? t : qi(t, e, o);
                };
                class $i {
                    constructor(t) {
                        (this._styles = {}), (this._styleProcessor = t);
                    }
                    get isEmpty() {
                        const t = Object.entries(this._styles);
                        return !Array.from(t).length;
                    }
                    get size() {
                        return this.isEmpty ? 0 : this.getStyleNames().length;
                    }
                    setTo(t) {
                        this.clear();
                        const e = Array.from(
                            (function (t) {
                                let e = null,
                                    o = 0,
                                    i = 0,
                                    n = null;
                                const r = new Map();
                                if ('' === t) return r;
                                ';' != t.charAt(t.length - 1) && (t += ';');
                                for (let s = 0; s < t.length; s++) {
                                    const a = t.charAt(s);
                                    if (null === e)
                                        switch (a) {
                                            case ':':
                                                n || ((n = t.substr(o, s - o)), (i = s + 1));
                                                break;
                                            case '"':
                                            case "'":
                                                e = a;
                                                break;
                                            case ';': {
                                                const e = t.substr(i, s - i);
                                                n && r.set(n.trim(), e.trim()), (n = null), (o = s + 1);
                                                break;
                                            }
                                        }
                                    else a === e && (e = null);
                                }
                                return r;
                            })(t).entries(),
                        );
                        for (const [t, o] of e) this._styleProcessor.toNormalizedForm(t, o, this._styles);
                    }
                    has(t) {
                        if (this.isEmpty) return !1;
                        const e = this._styleProcessor.getReducedForm(t, this._styles).find(([e]) => e === t);
                        return Array.isArray(e);
                    }
                    set(t, e) {
                        if (w(t))
                            for (const [e, o] of Object.entries(t))
                                this._styleProcessor.toNormalizedForm(e, o, this._styles);
                        else this._styleProcessor.toNormalizedForm(t, e, this._styles);
                    }
                    remove(t) {
                        const e = Gi(t);
                        zi(this._styles, e), delete this._styles[t], this._cleanEmptyObjectsOnPath(e);
                    }
                    getNormalized(t) {
                        return this._styleProcessor.getNormalized(t, this._styles);
                    }
                    toString() {
                        return this.isEmpty
                            ? ''
                            : this._getStylesEntries()
                                  .map((t) => t.join(':'))
                                  .sort()
                                  .join(';') + ';';
                    }
                    getAsString(t) {
                        if (this.isEmpty) return;
                        if (this._styles[t] && !w(this._styles[t])) return this._styles[t];
                        const e = this._styleProcessor.getReducedForm(t, this._styles).find(([e]) => e === t);
                        return Array.isArray(e) ? e[1] : void 0;
                    }
                    getStyleNames() {
                        if (this.isEmpty) return [];
                        return this._getStylesEntries().map(([t]) => t);
                    }
                    clear() {
                        this._styles = {};
                    }
                    _getStylesEntries() {
                        const t = [],
                            e = Object.keys(this._styles);
                        for (const o of e) t.push(...this._styleProcessor.getReducedForm(o, this._styles));
                        return t;
                    }
                    _cleanEmptyObjectsOnPath(t) {
                        const e = t.split('.');
                        if (!(e.length > 1)) return;
                        const o = e.splice(0, e.length - 1).join('.'),
                            i = Mi(this._styles, o);
                        if (!i) return;
                        !Array.from(Object.keys(i)).length && this.remove(o);
                    }
                }
                class Ki {
                    constructor() {
                        (this._normalizers = new Map()),
                            (this._extractors = new Map()),
                            (this._reducers = new Map()),
                            (this._consumables = new Map());
                    }
                    toNormalizedForm(t, e, o) {
                        if (w(e)) Ji(o, Gi(t), e);
                        else if (this._normalizers.has(t)) {
                            const i = this._normalizers.get(t),
                                { path: n, value: r } = i(e);
                            Ji(o, n, r);
                        } else Ji(o, t, e);
                    }
                    getNormalized(t, e) {
                        if (!t) return Wi({}, e);
                        if (void 0 !== e[t]) return e[t];
                        if (this._extractors.has(t)) {
                            const o = this._extractors.get(t);
                            if ('string' == typeof o) return Mi(e, o);
                            const i = o(t, e);
                            if (i) return i;
                        }
                        return Mi(e, Gi(t));
                    }
                    getReducedForm(t, e) {
                        const o = this.getNormalized(t, e);
                        if (void 0 === o) return [];
                        if (this._reducers.has(t)) {
                            return this._reducers.get(t)(o);
                        }
                        return [[t, o]];
                    }
                    getRelatedStyles(t) {
                        return this._consumables.get(t) || [];
                    }
                    setNormalizer(t, e) {
                        this._normalizers.set(t, e);
                    }
                    setExtractor(t, e) {
                        this._extractors.set(t, e);
                    }
                    setReducer(t, e) {
                        this._reducers.set(t, e);
                    }
                    setStyleRelation(t, e) {
                        this._mapStyleNames(t, e);
                        for (const o of e) this._mapStyleNames(o, [t]);
                    }
                    _mapStyleNames(t, e) {
                        this._consumables.has(t) || this._consumables.set(t, []), this._consumables.get(t).push(...e);
                    }
                }
                function Gi(t) {
                    return t.replace('-', '.');
                }
                function Ji(t, e, o) {
                    let i = o;
                    w(o) && (i = Wi({}, Mi(t, e), o)), Ui(t, e, i);
                }
                class Yi extends ai {
                    constructor(t, e, o, i) {
                        if (
                            (super(t),
                            (this.name = e),
                            (this._attrs = (function (t) {
                                t = di(t);
                                for (const [e, o] of t)
                                    null === o ? t.delete(e) : 'string' != typeof o && t.set(e, String(o));
                                return t;
                            })(o)),
                            (this._children = []),
                            i && this._insertChild(0, i),
                            (this._classes = new Set()),
                            this._attrs.has('class'))
                        ) {
                            const t = this._attrs.get('class');
                            Xi(this._classes, t), this._attrs.delete('class');
                        }
                        (this._styles = new $i(this.document.stylesProcessor)),
                            this._attrs.has('style') &&
                                (this._styles.setTo(this._attrs.get('style')), this._attrs.delete('style')),
                            (this._customProperties = new Map()),
                            (this._isAllowedInsideAttributeElement = !1);
                    }
                    get childCount() {
                        return this._children.length;
                    }
                    get isEmpty() {
                        return 0 === this._children.length;
                    }
                    get isAllowedInsideAttributeElement() {
                        return this._isAllowedInsideAttributeElement;
                    }
                    is(t, e = null) {
                        return e
                            ? e === this.name && ('element' === t || 'view:element' === t)
                            : 'element' === t || 'view:element' === t || 'node' === t || 'view:node' === t;
                    }
                    getChild(t) {
                        return this._children[t];
                    }
                    getChildIndex(t) {
                        return this._children.indexOf(t);
                    }
                    getChildren() {
                        return this._children[Symbol.iterator]();
                    }
                    *getAttributeKeys() {
                        this._classes.size > 0 && (yield 'class'),
                            this._styles.isEmpty || (yield 'style'),
                            yield* this._attrs.keys();
                    }
                    *getAttributes() {
                        yield* this._attrs.entries(),
                            this._classes.size > 0 && (yield ['class', this.getAttribute('class')]),
                            this._styles.isEmpty || (yield ['style', this.getAttribute('style')]);
                    }
                    getAttribute(t) {
                        if ('class' == t) return this._classes.size > 0 ? [...this._classes].join(' ') : void 0;
                        if ('style' == t) {
                            const t = this._styles.toString();
                            return '' == t ? void 0 : t;
                        }
                        return this._attrs.get(t);
                    }
                    hasAttribute(t) {
                        return 'class' == t
                            ? this._classes.size > 0
                            : 'style' == t
                            ? !this._styles.isEmpty
                            : this._attrs.has(t);
                    }
                    isSimilar(t) {
                        if (!(t instanceof Yi)) return !1;
                        if (this === t) return !0;
                        if (this.name != t.name) return !1;
                        if (this.isAllowedInsideAttributeElement != t.isAllowedInsideAttributeElement) return !1;
                        if (
                            this._attrs.size !== t._attrs.size ||
                            this._classes.size !== t._classes.size ||
                            this._styles.size !== t._styles.size
                        )
                            return !1;
                        for (const [e, o] of this._attrs) if (!t._attrs.has(e) || t._attrs.get(e) !== o) return !1;
                        for (const e of this._classes) if (!t._classes.has(e)) return !1;
                        for (const e of this._styles.getStyleNames())
                            if (!t._styles.has(e) || t._styles.getAsString(e) !== this._styles.getAsString(e))
                                return !1;
                        return !0;
                    }
                    hasClass(...t) {
                        for (const e of t) if (!this._classes.has(e)) return !1;
                        return !0;
                    }
                    getClassNames() {
                        return this._classes.keys();
                    }
                    getStyle(t) {
                        return this._styles.getAsString(t);
                    }
                    getNormalizedStyle(t) {
                        return this._styles.getNormalized(t);
                    }
                    getStyleNames() {
                        return this._styles.getStyleNames();
                    }
                    hasStyle(...t) {
                        for (const e of t) if (!this._styles.has(e)) return !1;
                        return !0;
                    }
                    findAncestor(...t) {
                        const e = new hi(...t);
                        let o = this.parent;
                        for (; o; ) {
                            if (e.match(o)) return o;
                            o = o.parent;
                        }
                        return null;
                    }
                    getCustomProperty(t) {
                        return this._customProperties.get(t);
                    }
                    *getCustomProperties() {
                        yield* this._customProperties.entries();
                    }
                    getIdentity() {
                        const t = Array.from(this._classes).sort().join(','),
                            e = this._styles.toString(),
                            o = Array.from(this._attrs)
                                .map((t) => `${t[0]}="${t[1]}"`)
                                .sort()
                                .join(' ');
                        return (
                            this.name +
                            ('' == t ? '' : ` class="${t}"`) +
                            (e ? ` style="${e}"` : '') +
                            ('' == o ? '' : ' ' + o)
                        );
                    }
                    _clone(t = !1) {
                        const e = [];
                        if (t) for (const o of this.getChildren()) e.push(o._clone(t));
                        const o = new this.constructor(this.document, this.name, this._attrs, e);
                        return (
                            (o._classes = new Set(this._classes)),
                            o._styles.set(this._styles.getNormalized()),
                            (o._customProperties = new Map(this._customProperties)),
                            (o.getFillerOffset = this.getFillerOffset),
                            (o._isAllowedInsideAttributeElement = this.isAllowedInsideAttributeElement),
                            o
                        );
                    }
                    _appendChild(t) {
                        return this._insertChild(this.childCount, t);
                    }
                    _insertChild(t, e) {
                        this._fireChange('children', this);
                        let o = 0;
                        const i = (function (t, e) {
                            if ('string' == typeof e) return [new li(t, e)];
                            Jo(e) || (e = [e]);
                            return Array.from(e).map((e) =>
                                'string' == typeof e ? new li(t, e) : e instanceof ci ? new li(t, e.data) : e,
                            );
                        })(this.document, e);
                        for (const e of i)
                            null !== e.parent && e._remove(),
                                (e.parent = this),
                                (e.document = this.document),
                                this._children.splice(t, 0, e),
                                t++,
                                o++;
                        return o;
                    }
                    _removeChildren(t, e = 1) {
                        this._fireChange('children', this);
                        for (let o = t; o < t + e; o++) this._children[o].parent = null;
                        return this._children.splice(t, e);
                    }
                    _setAttribute(t, e) {
                        (e = String(e)),
                            this._fireChange('attributes', this),
                            'class' == t
                                ? Xi(this._classes, e)
                                : 'style' == t
                                ? this._styles.setTo(e)
                                : this._attrs.set(t, e);
                    }
                    _removeAttribute(t) {
                        return (
                            this._fireChange('attributes', this),
                            'class' == t
                                ? this._classes.size > 0 && (this._classes.clear(), !0)
                                : 'style' == t
                                ? !this._styles.isEmpty && (this._styles.clear(), !0)
                                : this._attrs.delete(t)
                        );
                    }
                    _addClass(t) {
                        this._fireChange('attributes', this);
                        for (const e of Zo(t)) this._classes.add(e);
                    }
                    _removeClass(t) {
                        this._fireChange('attributes', this);
                        for (const e of Zo(t)) this._classes.delete(e);
                    }
                    _setStyle(t, e) {
                        this._fireChange('attributes', this), this._styles.set(t, e);
                    }
                    _removeStyle(t) {
                        this._fireChange('attributes', this);
                        for (const e of Zo(t)) this._styles.remove(e);
                    }
                    _setCustomProperty(t, e) {
                        this._customProperties.set(t, e);
                    }
                    _removeCustomProperty(t) {
                        return this._customProperties.delete(t);
                    }
                }
                function Xi(t, e) {
                    const o = e.split(/\s+/);
                    t.clear(), o.forEach((e) => t.add(e));
                }
                class Zi extends Yi {
                    constructor(t, e, o, i) {
                        super(t, e, o, i), (this.getFillerOffset = Qi);
                    }
                    is(t, e = null) {
                        return e
                            ? e === this.name &&
                                  ('containerElement' === t ||
                                      'view:containerElement' === t ||
                                      'element' === t ||
                                      'view:element' === t)
                            : 'containerElement' === t ||
                                  'view:containerElement' === t ||
                                  'element' === t ||
                                  'view:element' === t ||
                                  'node' === t ||
                                  'view:node' === t;
                    }
                }
                function Qi() {
                    const t = [...this.getChildren()],
                        e = t[this.childCount - 1];
                    if (e && e.is('element', 'br')) return this.childCount;
                    for (const e of t) if (!e.is('uiElement')) return null;
                    return this.childCount;
                }
                class tn extends Zi {
                    constructor(t, e, o, i) {
                        super(t, e, o, i),
                            this.set('isReadOnly', !1),
                            this.set('isFocused', !1),
                            this.bind('isReadOnly').to(t),
                            this.bind('isFocused').to(t, 'isFocused', (e) => e && t.selection.editableElement == this),
                            this.listenTo(t.selection, 'change', () => {
                                this.isFocused = t.isFocused && t.selection.editableElement == this;
                            });
                    }
                    is(t, e = null) {
                        return e
                            ? e === this.name &&
                                  ('editableElement' === t ||
                                      'view:editableElement' === t ||
                                      'containerElement' === t ||
                                      'view:containerElement' === t ||
                                      'element' === t ||
                                      'view:element' === t)
                            : 'editableElement' === t ||
                                  'view:editableElement' === t ||
                                  'containerElement' === t ||
                                  'view:containerElement' === t ||
                                  'element' === t ||
                                  'view:element' === t ||
                                  'node' === t ||
                                  'view:node' === t;
                    }
                    destroy() {
                        this.stopListening();
                    }
                }
                Kt(tn, Ht);
                const en = Symbol('rootName');
                class on extends tn {
                    constructor(t, e) {
                        super(t, e), (this.rootName = 'main');
                    }
                    is(t, e = null) {
                        return e
                            ? e === this.name &&
                                  ('rootElement' === t ||
                                      'view:rootElement' === t ||
                                      'editableElement' === t ||
                                      'view:editableElement' === t ||
                                      'containerElement' === t ||
                                      'view:containerElement' === t ||
                                      'element' === t ||
                                      'view:element' === t)
                            : 'rootElement' === t ||
                                  'view:rootElement' === t ||
                                  'editableElement' === t ||
                                  'view:editableElement' === t ||
                                  'containerElement' === t ||
                                  'view:containerElement' === t ||
                                  'element' === t ||
                                  'view:element' === t ||
                                  'node' === t ||
                                  'view:node' === t;
                    }
                    get rootName() {
                        return this.getCustomProperty(en);
                    }
                    set rootName(t) {
                        this._setCustomProperty(en, t);
                    }
                    set _name(t) {
                        this.name = t;
                    }
                }
                class nn {
                    constructor(t = {}) {
                        if (!t.boundaries && !t.startPosition)
                            throw new l.a('view-tree-walker-no-start-position', null);
                        if (t.direction && 'forward' != t.direction && 'backward' != t.direction)
                            throw new l.a('view-tree-walker-unknown-direction', t.startPosition, {
                                direction: t.direction,
                            });
                        (this.boundaries = t.boundaries || null),
                            t.startPosition
                                ? (this.position = rn._createAt(t.startPosition))
                                : (this.position = rn._createAt(
                                      t.boundaries['backward' == t.direction ? 'end' : 'start'],
                                  )),
                            (this.direction = t.direction || 'forward'),
                            (this.singleCharacters = !!t.singleCharacters),
                            (this.shallow = !!t.shallow),
                            (this.ignoreElementEnd = !!t.ignoreElementEnd),
                            (this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null),
                            (this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null);
                    }
                    [Symbol.iterator]() {
                        return this;
                    }
                    skip(t) {
                        let e, o, i;
                        do {
                            (i = this.position), ({ done: e, value: o } = this.next());
                        } while (!e && t(o));
                        e || (this.position = i);
                    }
                    next() {
                        return 'forward' == this.direction ? this._next() : this._previous();
                    }
                    _next() {
                        let t = this.position.clone();
                        const e = this.position,
                            o = t.parent;
                        if (null === o.parent && t.offset === o.childCount) return { done: !0 };
                        if (o === this._boundaryEndParent && t.offset == this.boundaries.end.offset)
                            return { done: !0 };
                        let i;
                        if (o instanceof li) {
                            if (t.isAtEnd) return (this.position = rn._createAfter(o)), this._next();
                            i = o.data[t.offset];
                        } else i = o.getChild(t.offset);
                        if (i instanceof Yi)
                            return (
                                this.shallow ? t.offset++ : (t = new rn(i, 0)),
                                (this.position = t),
                                this._formatReturnValue('elementStart', i, e, t, 1)
                            );
                        if (i instanceof li) {
                            if (this.singleCharacters) return (t = new rn(i, 0)), (this.position = t), this._next();
                            {
                                let o,
                                    n = i.data.length;
                                return (
                                    i == this._boundaryEndParent
                                        ? ((n = this.boundaries.end.offset),
                                          (o = new ci(i, 0, n)),
                                          (t = rn._createAfter(o)))
                                        : ((o = new ci(i, 0, i.data.length)), t.offset++),
                                    (this.position = t),
                                    this._formatReturnValue('text', o, e, t, n)
                                );
                            }
                        }
                        if ('string' == typeof i) {
                            let i;
                            if (this.singleCharacters) i = 1;
                            else {
                                i =
                                    (o === this._boundaryEndParent ? this.boundaries.end.offset : o.data.length) -
                                    t.offset;
                            }
                            const n = new ci(o, t.offset, i);
                            return (t.offset += i), (this.position = t), this._formatReturnValue('text', n, e, t, i);
                        }
                        return (
                            (t = rn._createAfter(o)),
                            (this.position = t),
                            this.ignoreElementEnd ? this._next() : this._formatReturnValue('elementEnd', o, e, t)
                        );
                    }
                    _previous() {
                        let t = this.position.clone();
                        const e = this.position,
                            o = t.parent;
                        if (null === o.parent && 0 === t.offset) return { done: !0 };
                        if (o == this._boundaryStartParent && t.offset == this.boundaries.start.offset)
                            return { done: !0 };
                        let i;
                        if (o instanceof li) {
                            if (t.isAtStart) return (this.position = rn._createBefore(o)), this._previous();
                            i = o.data[t.offset - 1];
                        } else i = o.getChild(t.offset - 1);
                        if (i instanceof Yi)
                            return this.shallow
                                ? (t.offset--, (this.position = t), this._formatReturnValue('elementStart', i, e, t, 1))
                                : ((t = new rn(i, i.childCount)),
                                  (this.position = t),
                                  this.ignoreElementEnd
                                      ? this._previous()
                                      : this._formatReturnValue('elementEnd', i, e, t));
                        if (i instanceof li) {
                            if (this.singleCharacters)
                                return (t = new rn(i, i.data.length)), (this.position = t), this._previous();
                            {
                                let o,
                                    n = i.data.length;
                                if (i == this._boundaryStartParent) {
                                    const e = this.boundaries.start.offset;
                                    (o = new ci(i, e, i.data.length - e)),
                                        (n = o.data.length),
                                        (t = rn._createBefore(o));
                                } else (o = new ci(i, 0, i.data.length)), t.offset--;
                                return (this.position = t), this._formatReturnValue('text', o, e, t, n);
                            }
                        }
                        if ('string' == typeof i) {
                            let i;
                            if (this.singleCharacters) i = 1;
                            else {
                                const e = o === this._boundaryStartParent ? this.boundaries.start.offset : 0;
                                i = t.offset - e;
                            }
                            t.offset -= i;
                            const n = new ci(o, t.offset, i);
                            return (this.position = t), this._formatReturnValue('text', n, e, t, i);
                        }
                        return (
                            (t = rn._createBefore(o)),
                            (this.position = t),
                            this._formatReturnValue('elementStart', o, e, t, 1)
                        );
                    }
                    _formatReturnValue(t, e, o, i, n) {
                        return (
                            e instanceof ci &&
                                (e.offsetInText + e.data.length == e.textNode.data.length &&
                                    ('forward' != this.direction ||
                                    (this.boundaries && this.boundaries.end.isEqual(this.position))
                                        ? (o = rn._createAfter(e.textNode))
                                        : ((i = rn._createAfter(e.textNode)), (this.position = i))),
                                0 === e.offsetInText &&
                                    ('backward' != this.direction ||
                                    (this.boundaries && this.boundaries.start.isEqual(this.position))
                                        ? (o = rn._createBefore(e.textNode))
                                        : ((i = rn._createBefore(e.textNode)), (this.position = i)))),
                            { done: !1, value: { type: t, item: e, previousPosition: o, nextPosition: i, length: n } }
                        );
                    }
                }
                class rn {
                    constructor(t, e) {
                        (this.parent = t), (this.offset = e);
                    }
                    get nodeAfter() {
                        return this.parent.is('$text') ? null : this.parent.getChild(this.offset) || null;
                    }
                    get nodeBefore() {
                        return this.parent.is('$text') ? null : this.parent.getChild(this.offset - 1) || null;
                    }
                    get isAtStart() {
                        return 0 === this.offset;
                    }
                    get isAtEnd() {
                        const t = this.parent.is('$text') ? this.parent.data.length : this.parent.childCount;
                        return this.offset === t;
                    }
                    get root() {
                        return this.parent.root;
                    }
                    get editableElement() {
                        let t = this.parent;
                        for (; !(t instanceof tn); ) {
                            if (!t.parent) return null;
                            t = t.parent;
                        }
                        return t;
                    }
                    getShiftedBy(t) {
                        const e = rn._createAt(this),
                            o = e.offset + t;
                        return (e.offset = o < 0 ? 0 : o), e;
                    }
                    getLastMatchingPosition(t, e = {}) {
                        e.startPosition = this;
                        const o = new nn(e);
                        return o.skip(t), o.position;
                    }
                    getAncestors() {
                        return this.parent.is('documentFragment')
                            ? [this.parent]
                            : this.parent.getAncestors({ includeSelf: !0 });
                    }
                    getCommonAncestor(t) {
                        const e = this.getAncestors(),
                            o = t.getAncestors();
                        let i = 0;
                        for (; e[i] == o[i] && e[i]; ) i++;
                        return 0 === i ? null : e[i - 1];
                    }
                    is(t) {
                        return 'position' === t || 'view:position' === t;
                    }
                    isEqual(t) {
                        return this.parent == t.parent && this.offset == t.offset;
                    }
                    isBefore(t) {
                        return 'before' == this.compareWith(t);
                    }
                    isAfter(t) {
                        return 'after' == this.compareWith(t);
                    }
                    compareWith(t) {
                        if (this.root !== t.root) return 'different';
                        if (this.isEqual(t)) return 'same';
                        const e = this.parent.is('node') ? this.parent.getPath() : [],
                            o = t.parent.is('node') ? t.parent.getPath() : [];
                        e.push(this.offset), o.push(t.offset);
                        const i = ri(e, o);
                        switch (i) {
                            case 'prefix':
                                return 'before';
                            case 'extension':
                                return 'after';
                            default:
                                return e[i] < o[i] ? 'before' : 'after';
                        }
                    }
                    getWalker(t = {}) {
                        return (t.startPosition = this), new nn(t);
                    }
                    clone() {
                        return new rn(this.parent, this.offset);
                    }
                    static _createAt(t, e) {
                        if (t instanceof rn) return new this(t.parent, t.offset);
                        {
                            const o = t;
                            if ('end' == e) e = o.is('$text') ? o.data.length : o.childCount;
                            else {
                                if ('before' == e) return this._createBefore(o);
                                if ('after' == e) return this._createAfter(o);
                                if (0 !== e && !e) throw new l.a('view-createpositionat-offset-required', o);
                            }
                            return new rn(o, e);
                        }
                    }
                    static _createAfter(t) {
                        if (t.is('$textProxy')) return new rn(t.textNode, t.offsetInText + t.data.length);
                        if (!t.parent) throw new l.a('view-position-after-root', t, { root: t });
                        return new rn(t.parent, t.index + 1);
                    }
                    static _createBefore(t) {
                        if (t.is('$textProxy')) return new rn(t.textNode, t.offsetInText);
                        if (!t.parent) throw new l.a('view-position-before-root', t, { root: t });
                        return new rn(t.parent, t.index);
                    }
                }
                class sn {
                    constructor(t, e = null) {
                        (this.start = t.clone()), (this.end = e ? e.clone() : t.clone());
                    }
                    *[Symbol.iterator]() {
                        yield* new nn({ boundaries: this, ignoreElementEnd: !0 });
                    }
                    get isCollapsed() {
                        return this.start.isEqual(this.end);
                    }
                    get isFlat() {
                        return this.start.parent === this.end.parent;
                    }
                    get root() {
                        return this.start.root;
                    }
                    getEnlarged() {
                        let t = this.start.getLastMatchingPosition(an, { direction: 'backward' }),
                            e = this.end.getLastMatchingPosition(an);
                        return (
                            t.parent.is('$text') && t.isAtStart && (t = rn._createBefore(t.parent)),
                            e.parent.is('$text') && e.isAtEnd && (e = rn._createAfter(e.parent)),
                            new sn(t, e)
                        );
                    }
                    getTrimmed() {
                        let t = this.start.getLastMatchingPosition(an);
                        if (t.isAfter(this.end) || t.isEqual(this.end)) return new sn(t, t);
                        let e = this.end.getLastMatchingPosition(an, { direction: 'backward' });
                        const o = t.nodeAfter,
                            i = e.nodeBefore;
                        return (
                            o && o.is('$text') && (t = new rn(o, 0)),
                            i && i.is('$text') && (e = new rn(i, i.data.length)),
                            new sn(t, e)
                        );
                    }
                    isEqual(t) {
                        return this == t || (this.start.isEqual(t.start) && this.end.isEqual(t.end));
                    }
                    containsPosition(t) {
                        return t.isAfter(this.start) && t.isBefore(this.end);
                    }
                    containsRange(t, e = !1) {
                        t.isCollapsed && (e = !1);
                        const o = this.containsPosition(t.start) || (e && this.start.isEqual(t.start)),
                            i = this.containsPosition(t.end) || (e && this.end.isEqual(t.end));
                        return o && i;
                    }
                    getDifference(t) {
                        const e = [];
                        return (
                            this.isIntersecting(t)
                                ? (this.containsPosition(t.start) && e.push(new sn(this.start, t.start)),
                                  this.containsPosition(t.end) && e.push(new sn(t.end, this.end)))
                                : e.push(this.clone()),
                            e
                        );
                    }
                    getIntersection(t) {
                        if (this.isIntersecting(t)) {
                            let e = this.start,
                                o = this.end;
                            return (
                                this.containsPosition(t.start) && (e = t.start),
                                this.containsPosition(t.end) && (o = t.end),
                                new sn(e, o)
                            );
                        }
                        return null;
                    }
                    getWalker(t = {}) {
                        return (t.boundaries = this), new nn(t);
                    }
                    getCommonAncestor() {
                        return this.start.getCommonAncestor(this.end);
                    }
                    getContainedElement() {
                        if (this.isCollapsed) return null;
                        let t = this.start.nodeAfter,
                            e = this.end.nodeBefore;
                        return (
                            this.start.parent.is('$text') &&
                                this.start.isAtEnd &&
                                this.start.parent.nextSibling &&
                                (t = this.start.parent.nextSibling),
                            this.end.parent.is('$text') &&
                                this.end.isAtStart &&
                                this.end.parent.previousSibling &&
                                (e = this.end.parent.previousSibling),
                            t && t.is('element') && t === e ? t : null
                        );
                    }
                    clone() {
                        return new sn(this.start, this.end);
                    }
                    *getItems(t = {}) {
                        (t.boundaries = this), (t.ignoreElementEnd = !0);
                        const e = new nn(t);
                        for (const t of e) yield t.item;
                    }
                    *getPositions(t = {}) {
                        t.boundaries = this;
                        const e = new nn(t);
                        yield e.position;
                        for (const t of e) yield t.nextPosition;
                    }
                    is(t) {
                        return 'range' === t || 'view:range' === t;
                    }
                    isIntersecting(t) {
                        return this.start.isBefore(t.end) && this.end.isAfter(t.start);
                    }
                    static _createFromParentsAndOffsets(t, e, o, i) {
                        return new this(new rn(t, e), new rn(o, i));
                    }
                    static _createFromPositionAndShift(t, e) {
                        const o = t,
                            i = t.getShiftedBy(e);
                        return e > 0 ? new this(o, i) : new this(i, o);
                    }
                    static _createIn(t) {
                        return this._createFromParentsAndOffsets(t, 0, t, t.childCount);
                    }
                    static _createOn(t) {
                        const e = t.is('$textProxy') ? t.offsetSize : 1;
                        return this._createFromPositionAndShift(rn._createBefore(t), e);
                    }
                }
                function an(t) {
                    return !(!t.item.is('attributeElement') && !t.item.is('uiElement'));
                }
                function ln(t) {
                    let e = 0;
                    for (const o of t) e++;
                    return e;
                }
                class cn {
                    constructor(t = null, e, o) {
                        (this._ranges = []),
                            (this._lastRangeBackward = !1),
                            (this._isFake = !1),
                            (this._fakeSelectionLabel = ''),
                            this.setTo(t, e, o);
                    }
                    get isFake() {
                        return this._isFake;
                    }
                    get fakeSelectionLabel() {
                        return this._fakeSelectionLabel;
                    }
                    get anchor() {
                        if (!this._ranges.length) return null;
                        const t = this._ranges[this._ranges.length - 1];
                        return (this._lastRangeBackward ? t.end : t.start).clone();
                    }
                    get focus() {
                        if (!this._ranges.length) return null;
                        const t = this._ranges[this._ranges.length - 1];
                        return (this._lastRangeBackward ? t.start : t.end).clone();
                    }
                    get isCollapsed() {
                        return 1 === this.rangeCount && this._ranges[0].isCollapsed;
                    }
                    get rangeCount() {
                        return this._ranges.length;
                    }
                    get isBackward() {
                        return !this.isCollapsed && this._lastRangeBackward;
                    }
                    get editableElement() {
                        return this.anchor ? this.anchor.editableElement : null;
                    }
                    *getRanges() {
                        for (const t of this._ranges) yield t.clone();
                    }
                    getFirstRange() {
                        let t = null;
                        for (const e of this._ranges) (t && !e.start.isBefore(t.start)) || (t = e);
                        return t ? t.clone() : null;
                    }
                    getLastRange() {
                        let t = null;
                        for (const e of this._ranges) (t && !e.end.isAfter(t.end)) || (t = e);
                        return t ? t.clone() : null;
                    }
                    getFirstPosition() {
                        const t = this.getFirstRange();
                        return t ? t.start.clone() : null;
                    }
                    getLastPosition() {
                        const t = this.getLastRange();
                        return t ? t.end.clone() : null;
                    }
                    isEqual(t) {
                        if (this.isFake != t.isFake) return !1;
                        if (this.isFake && this.fakeSelectionLabel != t.fakeSelectionLabel) return !1;
                        if (this.rangeCount != t.rangeCount) return !1;
                        if (0 === this.rangeCount) return !0;
                        if (!this.anchor.isEqual(t.anchor) || !this.focus.isEqual(t.focus)) return !1;
                        for (const e of this._ranges) {
                            let o = !1;
                            for (const i of t._ranges)
                                if (e.isEqual(i)) {
                                    o = !0;
                                    break;
                                }
                            if (!o) return !1;
                        }
                        return !0;
                    }
                    isSimilar(t) {
                        if (this.isBackward != t.isBackward) return !1;
                        const e = ln(this.getRanges());
                        if (e != ln(t.getRanges())) return !1;
                        if (0 == e) return !0;
                        for (let e of this.getRanges()) {
                            e = e.getTrimmed();
                            let o = !1;
                            for (let i of t.getRanges())
                                if (((i = i.getTrimmed()), e.start.isEqual(i.start) && e.end.isEqual(i.end))) {
                                    o = !0;
                                    break;
                                }
                            if (!o) return !1;
                        }
                        return !0;
                    }
                    getSelectedElement() {
                        return 1 !== this.rangeCount ? null : this.getFirstRange().getContainedElement();
                    }
                    setTo(t, e, o) {
                        if (null === t) this._setRanges([]), this._setFakeOptions(e);
                        else if (t instanceof cn || t instanceof dn)
                            this._setRanges(t.getRanges(), t.isBackward),
                                this._setFakeOptions({ fake: t.isFake, label: t.fakeSelectionLabel });
                        else if (t instanceof sn) this._setRanges([t], e && e.backward), this._setFakeOptions(e);
                        else if (t instanceof rn) this._setRanges([new sn(t)]), this._setFakeOptions(e);
                        else if (t instanceof ai) {
                            const i = !!o && !!o.backward;
                            let n;
                            if (void 0 === e) throw new l.a('view-selection-setto-required-second-parameter', this);
                            (n =
                                'in' == e ? sn._createIn(t) : 'on' == e ? sn._createOn(t) : new sn(rn._createAt(t, e))),
                                this._setRanges([n], i),
                                this._setFakeOptions(o);
                        } else {
                            if (!Jo(t)) throw new l.a('view-selection-setto-not-selectable', this);
                            this._setRanges(t, e && e.backward), this._setFakeOptions(e);
                        }
                        this.fire('change');
                    }
                    setFocus(t, e) {
                        if (null === this.anchor) throw new l.a('view-selection-setfocus-no-ranges', this);
                        const o = rn._createAt(t, e);
                        if ('same' == o.compareWith(this.focus)) return;
                        const i = this.anchor;
                        this._ranges.pop(),
                            'before' == o.compareWith(i)
                                ? this._addRange(new sn(o, i), !0)
                                : this._addRange(new sn(i, o)),
                            this.fire('change');
                    }
                    is(t) {
                        return 'selection' === t || 'view:selection' === t;
                    }
                    _setRanges(t, e = !1) {
                        (t = Array.from(t)), (this._ranges = []);
                        for (const e of t) this._addRange(e);
                        this._lastRangeBackward = !!e;
                    }
                    _setFakeOptions(t = {}) {
                        (this._isFake = !!t.fake), (this._fakeSelectionLabel = (t.fake && t.label) || '');
                    }
                    _addRange(t, e = !1) {
                        if (!(t instanceof sn)) throw new l.a('view-selection-add-range-not-range', this);
                        this._pushRange(t), (this._lastRangeBackward = !!e);
                    }
                    _pushRange(t) {
                        for (const e of this._ranges)
                            if (t.isIntersecting(e))
                                throw new l.a('view-selection-range-intersects', this, {
                                    addedRange: t,
                                    intersectingRange: e,
                                });
                        this._ranges.push(new sn(t.start, t.end));
                    }
                }
                Kt(cn, h);
                class dn {
                    constructor(t = null, e, o) {
                        (this._selection = new cn()),
                            this._selection.delegate('change').to(this),
                            this._selection.setTo(t, e, o);
                    }
                    get isFake() {
                        return this._selection.isFake;
                    }
                    get fakeSelectionLabel() {
                        return this._selection.fakeSelectionLabel;
                    }
                    get anchor() {
                        return this._selection.anchor;
                    }
                    get focus() {
                        return this._selection.focus;
                    }
                    get isCollapsed() {
                        return this._selection.isCollapsed;
                    }
                    get rangeCount() {
                        return this._selection.rangeCount;
                    }
                    get isBackward() {
                        return this._selection.isBackward;
                    }
                    get editableElement() {
                        return this._selection.editableElement;
                    }
                    get _ranges() {
                        return this._selection._ranges;
                    }
                    *getRanges() {
                        yield* this._selection.getRanges();
                    }
                    getFirstRange() {
                        return this._selection.getFirstRange();
                    }
                    getLastRange() {
                        return this._selection.getLastRange();
                    }
                    getFirstPosition() {
                        return this._selection.getFirstPosition();
                    }
                    getLastPosition() {
                        return this._selection.getLastPosition();
                    }
                    getSelectedElement() {
                        return this._selection.getSelectedElement();
                    }
                    isEqual(t) {
                        return this._selection.isEqual(t);
                    }
                    isSimilar(t) {
                        return this._selection.isSimilar(t);
                    }
                    is(t) {
                        return (
                            'selection' === t ||
                            'documentSelection' == t ||
                            'view:selection' == t ||
                            'view:documentSelection' == t
                        );
                    }
                    _setTo(t, e, o) {
                        this._selection.setTo(t, e, o);
                    }
                    _setFocus(t, e) {
                        this._selection.setFocus(t, e);
                    }
                }
                Kt(dn, h);
                class hn {
                    constructor(t) {
                        (this.selection = new dn()),
                            (this.roots = new Yo({ idProperty: 'rootName' })),
                            (this.stylesProcessor = t),
                            this.set('isReadOnly', !1),
                            this.set('isFocused', !1),
                            this.set('isComposing', !1),
                            (this._postFixers = new Set());
                    }
                    getRoot(t = 'main') {
                        return this.roots.get(t);
                    }
                    registerPostFixer(t) {
                        this._postFixers.add(t);
                    }
                    destroy() {
                        this.roots.map((t) => t.destroy()), this.stopListening();
                    }
                    _callPostFixers(t) {
                        let e = !1;
                        do {
                            for (const o of this._postFixers) if (((e = o(t)), e)) break;
                        } while (e);
                    }
                }
                Kt(hn, Ht);
                class un extends Yi {
                    constructor(t, e, o, i) {
                        super(t, e, o, i),
                            (this.getFillerOffset = fn),
                            (this._priority = 10),
                            (this._id = null),
                            (this._clonesGroup = null);
                    }
                    get priority() {
                        return this._priority;
                    }
                    get id() {
                        return this._id;
                    }
                    getElementsWithSameId() {
                        if (null === this.id) throw new l.a('attribute-element-get-elements-with-same-id-no-id', this);
                        return new Set(this._clonesGroup);
                    }
                    is(t, e = null) {
                        return e
                            ? e === this.name &&
                                  ('attributeElement' === t ||
                                      'view:attributeElement' === t ||
                                      'element' === t ||
                                      'view:element' === t)
                            : 'attributeElement' === t ||
                                  'view:attributeElement' === t ||
                                  'element' === t ||
                                  'view:element' === t ||
                                  'node' === t ||
                                  'view:node' === t;
                    }
                    isSimilar(t) {
                        return null !== this.id || null !== t.id
                            ? this.id === t.id
                            : super.isSimilar(t) && this.priority == t.priority;
                    }
                    _clone(t) {
                        const e = super._clone(t);
                        return (e._priority = this._priority), (e._id = this._id), e;
                    }
                }
                function fn() {
                    if (mn(this)) return null;
                    let t = this.parent;
                    for (; t && t.is('attributeElement'); ) {
                        if (mn(t) > 1) return null;
                        t = t.parent;
                    }
                    return !t || mn(t) > 1 ? null : this.childCount;
                }
                function mn(t) {
                    return Array.from(t.getChildren()).filter((t) => !t.is('uiElement')).length;
                }
                un.DEFAULT_PRIORITY = 10;
                class gn extends Yi {
                    constructor(t, e, o, i) {
                        super(t, e, o, i), (this._isAllowedInsideAttributeElement = !0), (this.getFillerOffset = pn);
                    }
                    is(t, e = null) {
                        return e
                            ? e === this.name &&
                                  ('emptyElement' === t ||
                                      'view:emptyElement' === t ||
                                      'element' === t ||
                                      'view:element' === t)
                            : 'emptyElement' === t ||
                                  'view:emptyElement' === t ||
                                  'element' === t ||
                                  'view:element' === t ||
                                  'node' === t ||
                                  'view:node' === t;
                    }
                    _insertChild(t, e) {
                        if (e && (e instanceof ai || Array.from(e).length > 0))
                            throw new l.a('view-emptyelement-cannot-add', [this, e]);
                    }
                }
                function pn() {
                    return null;
                }
                const bn = navigator.userAgent.toLowerCase();
                var wn = {
                    isMac: (function (t) {
                        return t.indexOf('macintosh') > -1;
                    })(bn),
                    isGecko: (function (t) {
                        return !!t.match(/gecko\/\d+/);
                    })(bn),
                    isSafari: (function (t) {
                        return t.indexOf(' applewebkit/') > -1 && -1 === t.indexOf('chrome');
                    })(bn),
                    isAndroid: (function (t) {
                        return t.indexOf('android') > -1;
                    })(bn),
                    isBlink: (function (t) {
                        return t.indexOf('chrome/') > -1 && t.indexOf('edge/') < 0;
                    })(bn),
                    features: {
                        isRegExpUnicodePropertySupported: (function () {
                            let t = !1;
                            try {
                                t = 0 === 'ć'.search(new RegExp('[\\p{L}]', 'u'));
                            } catch (t) {}
                            return t;
                        })(),
                    },
                };
                const kn = { ctrl: '⌃', cmd: '⌘', alt: '⌥', shift: '⇧' },
                    _n = { ctrl: 'Ctrl+', alt: 'Alt+', shift: 'Shift+' },
                    vn = (function () {
                        const t = {
                            arrowleft: 37,
                            arrowup: 38,
                            arrowright: 39,
                            arrowdown: 40,
                            backspace: 8,
                            delete: 46,
                            enter: 13,
                            space: 32,
                            esc: 27,
                            tab: 9,
                            ctrl: 1114112,
                            shift: 2228224,
                            alt: 4456448,
                            cmd: 8912896,
                        };
                        for (let e = 65; e <= 90; e++) {
                            const o = String.fromCharCode(e);
                            t[o.toLowerCase()] = e;
                        }
                        for (let e = 48; e <= 57; e++) t[e - 48] = e;
                        for (let e = 112; e <= 123; e++) t['f' + (e - 111)] = e;
                        return t;
                    })(),
                    yn = Object.fromEntries(
                        Object.entries(vn).map(([t, e]) => [e, t.charAt(0).toUpperCase() + t.slice(1)]),
                    );
                function xn(t) {
                    let e;
                    if ('string' == typeof t) {
                        if (((e = vn[t.toLowerCase()]), !e)) throw new l.a('keyboard-unknown-key', null, { key: t });
                    } else
                        e =
                            t.keyCode +
                            (t.altKey ? vn.alt : 0) +
                            (t.ctrlKey ? vn.ctrl : 0) +
                            (t.shiftKey ? vn.shift : 0) +
                            (t.metaKey ? vn.cmd : 0);
                    return e;
                }
                function Cn(t) {
                    return (
                        'string' == typeof t &&
                            (t = (function (t) {
                                return t.split(/\s*\+\s*/);
                            })(t)),
                        t
                            .map((t) =>
                                'string' == typeof t
                                    ? (function (t) {
                                          if (t.endsWith('!')) return xn(t.slice(0, -1));
                                          const e = xn(t);
                                          return wn.isMac && e == vn.ctrl ? vn.cmd : e;
                                      })(t)
                                    : t,
                            )
                            .reduce((t, e) => e + t, 0)
                    );
                }
                function An(t) {
                    let e = Cn(t);
                    return (
                        Object.entries(wn.isMac ? kn : _n).reduce(
                            (t, [o, i]) => (0 != (e & vn[o]) && ((e &= ~vn[o]), (t += i)), t),
                            '',
                        ) + (e ? yn[e] : '')
                    );
                }
                function Tn(t) {
                    return t == vn.arrowright || t == vn.arrowleft || t == vn.arrowup || t == vn.arrowdown;
                }
                function Pn(t, e) {
                    const o = 'ltr' === e;
                    switch (t) {
                        case vn.arrowleft:
                            return o ? 'left' : 'right';
                        case vn.arrowright:
                            return o ? 'right' : 'left';
                        case vn.arrowup:
                            return 'up';
                        case vn.arrowdown:
                            return 'down';
                    }
                }
                function Sn(t, e) {
                    const o = Pn(t, e);
                    return 'down' === o || 'right' === o;
                }
                class En extends Yi {
                    constructor(t, e, o, i) {
                        super(t, e, o, i), (this._isAllowedInsideAttributeElement = !0), (this.getFillerOffset = In);
                    }
                    is(t, e = null) {
                        return e
                            ? e === this.name &&
                                  ('uiElement' === t ||
                                      'view:uiElement' === t ||
                                      'element' === t ||
                                      'view:element' === t)
                            : 'uiElement' === t ||
                                  'view:uiElement' === t ||
                                  'element' === t ||
                                  'view:element' === t ||
                                  'node' === t ||
                                  'view:node' === t;
                    }
                    _insertChild(t, e) {
                        if (e && (e instanceof ai || Array.from(e).length > 0))
                            throw new l.a('view-uielement-cannot-add', this);
                    }
                    render(t) {
                        return this.toDomElement(t);
                    }
                    toDomElement(t) {
                        const e = t.createElement(this.name);
                        for (const t of this.getAttributeKeys()) e.setAttribute(t, this.getAttribute(t));
                        return e;
                    }
                }
                function Rn(t) {
                    t.document.on('keydown', (e, o) =>
                        (function (t, e, o) {
                            if (e.keyCode == vn.arrowright) {
                                const t = e.domTarget.ownerDocument.defaultView.getSelection(),
                                    i = 1 == t.rangeCount && t.getRangeAt(0).collapsed;
                                if (i || e.shiftKey) {
                                    const e = t.focusNode,
                                        n = t.focusOffset,
                                        r = o.domPositionToView(e, n);
                                    if (null === r) return;
                                    let s = !1;
                                    const a = r.getLastMatchingPosition(
                                        (t) => (
                                            t.item.is('uiElement') && (s = !0),
                                            !(!t.item.is('uiElement') && !t.item.is('attributeElement'))
                                        ),
                                    );
                                    if (s) {
                                        const e = o.viewPositionToDom(a);
                                        i ? t.collapse(e.parent, e.offset) : t.extend(e.parent, e.offset);
                                    }
                                }
                            }
                        })(0, o, t.domConverter),
                    );
                }
                function In() {
                    return null;
                }
                class Vn extends Yi {
                    constructor(t, e, o, i) {
                        super(t, e, o, i), (this._isAllowedInsideAttributeElement = !0), (this.getFillerOffset = On);
                    }
                    is(t, e = null) {
                        return e
                            ? e === this.name &&
                                  ('rawElement' === t ||
                                      'view:rawElement' === t ||
                                      'element' === t ||
                                      'view:element' === t)
                            : 'rawElement' === t ||
                                  'view:rawElement' === t ||
                                  t === this.name ||
                                  t === 'view:' + this.name ||
                                  'element' === t ||
                                  'view:element' === t ||
                                  'node' === t ||
                                  'view:node' === t;
                    }
                    _insertChild(t, e) {
                        if (e && (e instanceof ai || Array.from(e).length > 0))
                            throw new l.a('view-rawelement-cannot-add', [this, e]);
                    }
                }
                function On() {
                    return null;
                }
                class zn {
                    constructor(t, e) {
                        (this.document = t), (this._children = []), e && this._insertChild(0, e);
                    }
                    [Symbol.iterator]() {
                        return this._children[Symbol.iterator]();
                    }
                    get childCount() {
                        return this._children.length;
                    }
                    get isEmpty() {
                        return 0 === this.childCount;
                    }
                    get root() {
                        return this;
                    }
                    get parent() {
                        return null;
                    }
                    is(t) {
                        return 'documentFragment' === t || 'view:documentFragment' === t;
                    }
                    _appendChild(t) {
                        return this._insertChild(this.childCount, t);
                    }
                    getChild(t) {
                        return this._children[t];
                    }
                    getChildIndex(t) {
                        return this._children.indexOf(t);
                    }
                    getChildren() {
                        return this._children[Symbol.iterator]();
                    }
                    _insertChild(t, e) {
                        this._fireChange('children', this);
                        let o = 0;
                        const i = (function (t, e) {
                            if ('string' == typeof e) return [new li(t, e)];
                            Jo(e) || (e = [e]);
                            return Array.from(e).map((e) =>
                                'string' == typeof e ? new li(t, e) : e instanceof ci ? new li(t, e.data) : e,
                            );
                        })(this.document, e);
                        for (const e of i)
                            null !== e.parent && e._remove(),
                                (e.parent = this),
                                this._children.splice(t, 0, e),
                                t++,
                                o++;
                        return o;
                    }
                    _removeChildren(t, e = 1) {
                        this._fireChange('children', this);
                        for (let o = t; o < t + e; o++) this._children[o].parent = null;
                        return this._children.splice(t, e);
                    }
                    _fireChange(t, e) {
                        this.fire('change:' + t, e);
                    }
                }
                Kt(zn, h);
                class Mn {
                    constructor(t) {
                        (this.document = t), (this._cloneGroups = new Map());
                    }
                    setSelection(t, e, o) {
                        this.document.selection._setTo(t, e, o);
                    }
                    setSelectionFocus(t, e) {
                        this.document.selection._setFocus(t, e);
                    }
                    createDocumentFragment(t) {
                        return new zn(this.document, t);
                    }
                    createText(t) {
                        return new li(this.document, t);
                    }
                    createAttributeElement(t, e, o = {}) {
                        const i = new un(this.document, t, e);
                        return o.priority && (i._priority = o.priority), o.id && (i._id = o.id), i;
                    }
                    createContainerElement(t, e, o = {}) {
                        const i = new Zi(this.document, t, e);
                        return (
                            void 0 !== o.isAllowedInsideAttributeElement &&
                                (i._isAllowedInsideAttributeElement = o.isAllowedInsideAttributeElement),
                            i
                        );
                    }
                    createEditableElement(t, e) {
                        const o = new tn(this.document, t, e);
                        return (o._document = this.document), o;
                    }
                    createEmptyElement(t, e, o = {}) {
                        const i = new gn(this.document, t, e);
                        return (
                            void 0 !== o.isAllowedInsideAttributeElement &&
                                (i._isAllowedInsideAttributeElement = o.isAllowedInsideAttributeElement),
                            i
                        );
                    }
                    createUIElement(t, e, o, i = {}) {
                        const n = new En(this.document, t, e);
                        return (
                            o && (n.render = o),
                            void 0 !== i.isAllowedInsideAttributeElement &&
                                (n._isAllowedInsideAttributeElement = i.isAllowedInsideAttributeElement),
                            n
                        );
                    }
                    createRawElement(t, e, o, i = {}) {
                        const n = new Vn(this.document, t, e);
                        return (
                            (n.render = o || (() => {})),
                            void 0 !== i.isAllowedInsideAttributeElement &&
                                (n._isAllowedInsideAttributeElement = i.isAllowedInsideAttributeElement),
                            n
                        );
                    }
                    setAttribute(t, e, o) {
                        o._setAttribute(t, e);
                    }
                    removeAttribute(t, e) {
                        e._removeAttribute(t);
                    }
                    addClass(t, e) {
                        e._addClass(t);
                    }
                    removeClass(t, e) {
                        e._removeClass(t);
                    }
                    setStyle(t, e, o) {
                        re(t) && void 0 === o && (o = e), o._setStyle(t, e);
                    }
                    removeStyle(t, e) {
                        e._removeStyle(t);
                    }
                    setCustomProperty(t, e, o) {
                        o._setCustomProperty(t, e);
                    }
                    removeCustomProperty(t, e) {
                        return e._removeCustomProperty(t);
                    }
                    breakAttributes(t) {
                        return t instanceof rn ? this._breakAttributes(t) : this._breakAttributesRange(t);
                    }
                    breakContainer(t) {
                        const e = t.parent;
                        if (!e.is('containerElement'))
                            throw new l.a('view-writer-break-non-container-element', this.document);
                        if (!e.parent) throw new l.a('view-writer-break-root', this.document);
                        if (t.isAtStart) return rn._createBefore(e);
                        if (!t.isAtEnd) {
                            const o = e._clone(!1);
                            this.insert(rn._createAfter(e), o);
                            const i = new sn(t, rn._createAt(e, 'end')),
                                n = new rn(o, 0);
                            this.move(i, n);
                        }
                        return rn._createAfter(e);
                    }
                    mergeAttributes(t) {
                        const e = t.offset,
                            o = t.parent;
                        if (o.is('$text')) return t;
                        if (o.is('attributeElement') && 0 === o.childCount) {
                            const t = o.parent,
                                e = o.index;
                            return (
                                o._remove(), this._removeFromClonedElementsGroup(o), this.mergeAttributes(new rn(t, e))
                            );
                        }
                        const i = o.getChild(e - 1),
                            n = o.getChild(e);
                        if (!i || !n) return t;
                        if (i.is('$text') && n.is('$text')) return Ln(i, n);
                        if (i.is('attributeElement') && n.is('attributeElement') && i.isSimilar(n)) {
                            const t = i.childCount;
                            return (
                                i._appendChild(n.getChildren()),
                                n._remove(),
                                this._removeFromClonedElementsGroup(n),
                                this.mergeAttributes(new rn(i, t))
                            );
                        }
                        return t;
                    }
                    mergeContainers(t) {
                        const e = t.nodeBefore,
                            o = t.nodeAfter;
                        if (!(e && o && e.is('containerElement') && o.is('containerElement')))
                            throw new l.a('view-writer-merge-containers-invalid-position', this.document);
                        const i = e.getChild(e.childCount - 1),
                            n = i instanceof li ? rn._createAt(i, 'end') : rn._createAt(e, 'end');
                        return this.move(sn._createIn(o), rn._createAt(e, 'end')), this.remove(sn._createOn(o)), n;
                    }
                    insert(t, e) {
                        (function t(e, o) {
                            for (const i of e) {
                                if (!Hn.some((t) => i instanceof t))
                                    throw new l.a('view-writer-insert-invalid-node-type', o);
                                i.is('$text') || t(i.getChildren(), o);
                            }
                        })((e = Jo(e) ? [...e] : [e]), this.document);
                        const o = e.reduce((t, e) => {
                            const o = t[t.length - 1],
                                i = !(e.is('uiElement') && e.isAllowedInsideAttributeElement);
                            return (
                                o && o.breakAttributes == i
                                    ? o.nodes.push(e)
                                    : t.push({ breakAttributes: i, nodes: [e] }),
                                t
                            );
                        }, []);
                        let i = null,
                            n = t;
                        for (const { nodes: t, breakAttributes: e } of o) {
                            const o = this._insertNodes(n, t, e);
                            i || (i = o.start), (n = o.end);
                        }
                        return i ? new sn(i, n) : new sn(t);
                    }
                    remove(t) {
                        const e = t instanceof sn ? t : sn._createOn(t);
                        if ((Wn(e, this.document), e.isCollapsed)) return new zn(this.document);
                        const { start: o, end: i } = this._breakAttributesRange(e, !0),
                            n = o.parent,
                            r = i.offset - o.offset,
                            s = n._removeChildren(o.offset, r);
                        for (const t of s) this._removeFromClonedElementsGroup(t);
                        const a = this.mergeAttributes(o);
                        return (e.start = a), (e.end = a.clone()), new zn(this.document, s);
                    }
                    clear(t, e) {
                        Wn(t, this.document);
                        const o = t.getWalker({ direction: 'backward', ignoreElementEnd: !0 });
                        for (const i of o) {
                            const o = i.item;
                            let n;
                            if (o.is('element') && e.isSimilar(o)) n = sn._createOn(o);
                            else if (!i.nextPosition.isAfter(t.start) && o.is('$textProxy')) {
                                const t = o.getAncestors().find((t) => t.is('element') && e.isSimilar(t));
                                t && (n = sn._createIn(t));
                            }
                            n &&
                                (n.end.isAfter(t.end) && (n.end = t.end),
                                n.start.isBefore(t.start) && (n.start = t.start),
                                this.remove(n));
                        }
                    }
                    move(t, e) {
                        let o;
                        if (e.isAfter(t.end)) {
                            const i = (e = this._breakAttributes(e, !0)).parent,
                                n = i.childCount;
                            (t = this._breakAttributesRange(t, !0)),
                                (o = this.remove(t)),
                                (e.offset += i.childCount - n);
                        } else o = this.remove(t);
                        return this.insert(e, o);
                    }
                    wrap(t, e) {
                        if (!(e instanceof un)) throw new l.a('view-writer-wrap-invalid-attribute', this.document);
                        if ((Wn(t, this.document), t.isCollapsed)) {
                            let i = t.start;
                            i.parent.is('element') &&
                                ((o = i.parent), !Array.from(o.getChildren()).some((t) => !t.is('uiElement'))) &&
                                (i = i.getLastMatchingPosition((t) => t.item.is('uiElement'))),
                                (i = this._wrapPosition(i, e));
                            const n = this.document.selection;
                            return (
                                n.isCollapsed && n.getFirstPosition().isEqual(t.start) && this.setSelection(i),
                                new sn(i)
                            );
                        }
                        return this._wrapRange(t, e);
                        var o;
                    }
                    unwrap(t, e) {
                        if (!(e instanceof un)) throw new l.a('view-writer-unwrap-invalid-attribute', this.document);
                        if ((Wn(t, this.document), t.isCollapsed)) return t;
                        const { start: o, end: i } = this._breakAttributesRange(t, !0),
                            n = o.parent,
                            r = this._unwrapChildren(n, o.offset, i.offset, e),
                            s = this.mergeAttributes(r.start);
                        s.isEqual(r.start) || r.end.offset--;
                        const a = this.mergeAttributes(r.end);
                        return new sn(s, a);
                    }
                    rename(t, e) {
                        const o = new Zi(this.document, t, e.getAttributes());
                        return (
                            this.insert(rn._createAfter(e), o),
                            this.move(sn._createIn(e), rn._createAt(o, 0)),
                            this.remove(sn._createOn(e)),
                            o
                        );
                    }
                    clearClonedElementsGroup(t) {
                        this._cloneGroups.delete(t);
                    }
                    createPositionAt(t, e) {
                        return rn._createAt(t, e);
                    }
                    createPositionAfter(t) {
                        return rn._createAfter(t);
                    }
                    createPositionBefore(t) {
                        return rn._createBefore(t);
                    }
                    createRange(t, e) {
                        return new sn(t, e);
                    }
                    createRangeOn(t) {
                        return sn._createOn(t);
                    }
                    createRangeIn(t) {
                        return sn._createIn(t);
                    }
                    createSelection(t, e, o) {
                        return new cn(t, e, o);
                    }
                    _insertNodes(t, e, o) {
                        let i, n;
                        if (((i = o ? Nn(t) : t.parent.is('$text') ? t.parent.parent : t.parent), !i))
                            throw new l.a('view-writer-invalid-position-container', this.document);
                        n = o ? this._breakAttributes(t, !0) : t.parent.is('$text') ? Dn(t) : t;
                        const r = i._insertChild(n.offset, e);
                        for (const t of e) this._addToClonedElementsGroup(t);
                        const s = n.getShiftedBy(r),
                            a = this.mergeAttributes(n);
                        a.isEqual(n) || s.offset--;
                        const c = this.mergeAttributes(s);
                        return new sn(a, c);
                    }
                    _wrapChildren(t, e, o, i) {
                        let n = e;
                        const r = [];
                        for (; n < o; ) {
                            const e = t.getChild(n),
                                o = e.is('$text'),
                                s = e.is('attributeElement'),
                                a = e.isAllowedInsideAttributeElement;
                            if (s && this._wrapAttributeElement(i, e)) r.push(new rn(t, n));
                            else if (o || a || (s && Bn(i, e))) {
                                const o = i._clone();
                                e._remove(),
                                    o._appendChild(e),
                                    t._insertChild(n, o),
                                    this._addToClonedElementsGroup(o),
                                    r.push(new rn(t, n));
                            } else s && this._wrapChildren(e, 0, e.childCount, i);
                            n++;
                        }
                        let s = 0;
                        for (const t of r) {
                            if (((t.offset -= s), t.offset == e)) continue;
                            this.mergeAttributes(t).isEqual(t) || (s++, o--);
                        }
                        return sn._createFromParentsAndOffsets(t, e, t, o);
                    }
                    _unwrapChildren(t, e, o, i) {
                        let n = e;
                        const r = [];
                        for (; n < o; ) {
                            const e = t.getChild(n);
                            if (e.is('attributeElement'))
                                if (e.isSimilar(i)) {
                                    const i = e.getChildren(),
                                        s = e.childCount;
                                    e._remove(),
                                        t._insertChild(n, i),
                                        this._removeFromClonedElementsGroup(e),
                                        r.push(new rn(t, n), new rn(t, n + s)),
                                        (n += s),
                                        (o += s - 1);
                                } else
                                    this._unwrapAttributeElement(i, e)
                                        ? (r.push(new rn(t, n), new rn(t, n + 1)), n++)
                                        : (this._unwrapChildren(e, 0, e.childCount, i), n++);
                            else n++;
                        }
                        let s = 0;
                        for (const t of r) {
                            if (((t.offset -= s), t.offset == e || t.offset == o)) continue;
                            this.mergeAttributes(t).isEqual(t) || (s++, o--);
                        }
                        return sn._createFromParentsAndOffsets(t, e, t, o);
                    }
                    _wrapRange(t, e) {
                        const { start: o, end: i } = this._breakAttributesRange(t, !0),
                            n = o.parent,
                            r = this._wrapChildren(n, o.offset, i.offset, e),
                            s = this.mergeAttributes(r.start);
                        s.isEqual(r.start) || r.end.offset--;
                        const a = this.mergeAttributes(r.end);
                        return new sn(s, a);
                    }
                    _wrapPosition(t, e) {
                        if (e.isSimilar(t.parent)) return Fn(t.clone());
                        t.parent.is('$text') && (t = Dn(t));
                        const o = this.createAttributeElement();
                        (o._priority = Number.POSITIVE_INFINITY),
                            (o.isSimilar = () => !1),
                            t.parent._insertChild(t.offset, o);
                        const i = new sn(t, t.getShiftedBy(1));
                        this.wrap(i, e);
                        const n = new rn(o.parent, o.index);
                        o._remove();
                        const r = n.nodeBefore,
                            s = n.nodeAfter;
                        return r instanceof li && s instanceof li ? Ln(r, s) : Fn(n);
                    }
                    _wrapAttributeElement(t, e) {
                        if (!qn(t, e)) return !1;
                        if (t.name !== e.name || t.priority !== e.priority) return !1;
                        for (const o of t.getAttributeKeys())
                            if (
                                'class' !== o &&
                                'style' !== o &&
                                e.hasAttribute(o) &&
                                e.getAttribute(o) !== t.getAttribute(o)
                            )
                                return !1;
                        for (const o of t.getStyleNames())
                            if (e.hasStyle(o) && e.getStyle(o) !== t.getStyle(o)) return !1;
                        for (const o of t.getAttributeKeys())
                            'class' !== o &&
                                'style' !== o &&
                                (e.hasAttribute(o) || this.setAttribute(o, t.getAttribute(o), e));
                        for (const o of t.getStyleNames()) e.hasStyle(o) || this.setStyle(o, t.getStyle(o), e);
                        for (const o of t.getClassNames()) e.hasClass(o) || this.addClass(o, e);
                        return !0;
                    }
                    _unwrapAttributeElement(t, e) {
                        if (!qn(t, e)) return !1;
                        if (t.name !== e.name || t.priority !== e.priority) return !1;
                        for (const o of t.getAttributeKeys())
                            if (
                                'class' !== o &&
                                'style' !== o &&
                                (!e.hasAttribute(o) || e.getAttribute(o) !== t.getAttribute(o))
                            )
                                return !1;
                        if (!e.hasClass(...t.getClassNames())) return !1;
                        for (const o of t.getStyleNames())
                            if (!e.hasStyle(o) || e.getStyle(o) !== t.getStyle(o)) return !1;
                        for (const o of t.getAttributeKeys())
                            'class' !== o && 'style' !== o && this.removeAttribute(o, e);
                        return (
                            this.removeClass(Array.from(t.getClassNames()), e),
                            this.removeStyle(Array.from(t.getStyleNames()), e),
                            !0
                        );
                    }
                    _breakAttributesRange(t, e = !1) {
                        const o = t.start,
                            i = t.end;
                        if ((Wn(t, this.document), t.isCollapsed)) {
                            const o = this._breakAttributes(t.start, e);
                            return new sn(o, o);
                        }
                        const n = this._breakAttributes(i, e),
                            r = n.parent.childCount,
                            s = this._breakAttributes(o, e);
                        return (n.offset += n.parent.childCount - r), new sn(s, n);
                    }
                    _breakAttributes(t, e = !1) {
                        const o = t.offset,
                            i = t.parent;
                        if (t.parent.is('emptyElement'))
                            throw new l.a('view-writer-cannot-break-empty-element', this.document);
                        if (t.parent.is('uiElement'))
                            throw new l.a('view-writer-cannot-break-ui-element', this.document);
                        if (t.parent.is('rawElement'))
                            throw new l.a('view-writer-cannot-break-raw-element', this.document);
                        if (!e && i.is('$text') && jn(i.parent)) return t.clone();
                        if (jn(i)) return t.clone();
                        if (i.is('$text')) return this._breakAttributes(Dn(t), e);
                        if (o == i.childCount) {
                            const t = new rn(i.parent, i.index + 1);
                            return this._breakAttributes(t, e);
                        }
                        if (0 === o) {
                            const t = new rn(i.parent, i.index);
                            return this._breakAttributes(t, e);
                        }
                        {
                            const t = i.index + 1,
                                n = i._clone();
                            i.parent._insertChild(t, n), this._addToClonedElementsGroup(n);
                            const r = i.childCount - o,
                                s = i._removeChildren(o, r);
                            n._appendChild(s);
                            const a = new rn(i.parent, t);
                            return this._breakAttributes(a, e);
                        }
                    }
                    _addToClonedElementsGroup(t) {
                        if (!t.root.is('rootElement')) return;
                        if (t.is('element')) for (const e of t.getChildren()) this._addToClonedElementsGroup(e);
                        const e = t.id;
                        if (!e) return;
                        let o = this._cloneGroups.get(e);
                        o || ((o = new Set()), this._cloneGroups.set(e, o)), o.add(t), (t._clonesGroup = o);
                    }
                    _removeFromClonedElementsGroup(t) {
                        if (t.is('element')) for (const e of t.getChildren()) this._removeFromClonedElementsGroup(e);
                        const e = t.id;
                        if (!e) return;
                        const o = this._cloneGroups.get(e);
                        o && o.delete(t);
                    }
                }
                function Nn(t) {
                    let e = t.parent;
                    for (; !jn(e); ) {
                        if (!e) return;
                        e = e.parent;
                    }
                    return e;
                }
                function Bn(t, e) {
                    return t.priority < e.priority || (!(t.priority > e.priority) && t.getIdentity() < e.getIdentity());
                }
                function Fn(t) {
                    const e = t.nodeBefore;
                    if (e && e.is('$text')) return new rn(e, e.data.length);
                    const o = t.nodeAfter;
                    return o && o.is('$text') ? new rn(o, 0) : t;
                }
                function Dn(t) {
                    if (t.offset == t.parent.data.length) return new rn(t.parent.parent, t.parent.index + 1);
                    if (0 === t.offset) return new rn(t.parent.parent, t.parent.index);
                    const e = t.parent.data.slice(t.offset);
                    return (
                        (t.parent._data = t.parent.data.slice(0, t.offset)),
                        t.parent.parent._insertChild(t.parent.index + 1, new li(t.root.document, e)),
                        new rn(t.parent.parent, t.parent.index + 1)
                    );
                }
                function Ln(t, e) {
                    const o = t.data.length;
                    return (t._data += e.data), e._remove(), new rn(t, o);
                }
                const Hn = [li, un, Zi, gn, Vn, En];
                function jn(t) {
                    return t && (t.is('containerElement') || t.is('documentFragment'));
                }
                function Wn(t, e) {
                    const o = Nn(t.start),
                        i = Nn(t.end);
                    if (!o || !i || o !== i) throw new l.a('view-writer-invalid-range-container', e);
                }
                function qn(t, e) {
                    return null === t.id && null === e.id;
                }
                function Un(t) {
                    return '[object Text]' == Object.prototype.toString.call(t);
                }
                const $n = (t) => t.createTextNode(' '),
                    Kn = (t) => {
                        const e = t.createElement('br');
                        return (e.dataset.ckeFiller = !0), e;
                    },
                    Gn = '⁠'.repeat(7);
                function Jn(t) {
                    return Un(t) && t.data.substr(0, 7) === Gn;
                }
                function Yn(t) {
                    return 7 == t.data.length && Jn(t);
                }
                function Xn(t) {
                    return Jn(t) ? t.data.slice(7) : t.data;
                }
                function Zn(t, e) {
                    if (e.keyCode == vn.arrowleft) {
                        const t = e.domTarget.ownerDocument.defaultView.getSelection();
                        if (1 == t.rangeCount && t.getRangeAt(0).collapsed) {
                            const e = t.getRangeAt(0).startContainer,
                                o = t.getRangeAt(0).startOffset;
                            Jn(e) && o <= 7 && t.collapse(e, 0);
                        }
                    }
                }
                function Qn(t, e, o, i = !1) {
                    (o =
                        o ||
                        function (t, e) {
                            return t === e;
                        }),
                        Array.isArray(t) || (t = Array.prototype.slice.call(t)),
                        Array.isArray(e) || (e = Array.prototype.slice.call(e));
                    const n = (function (t, e, o) {
                        const i = tr(t, e, o);
                        if (-1 === i) return { firstIndex: -1, lastIndexOld: -1, lastIndexNew: -1 };
                        const n = er(t, i),
                            r = er(e, i),
                            s = tr(n, r, o),
                            a = t.length - s,
                            l = e.length - s;
                        return { firstIndex: i, lastIndexOld: a, lastIndexNew: l };
                    })(t, e, o);
                    return i
                        ? (function (t, e) {
                              const { firstIndex: o, lastIndexOld: i, lastIndexNew: n } = t;
                              if (-1 === o) return Array(e).fill('equal');
                              let r = [];
                              o > 0 && (r = r.concat(Array(o).fill('equal')));
                              n - o > 0 && (r = r.concat(Array(n - o).fill('insert')));
                              i - o > 0 && (r = r.concat(Array(i - o).fill('delete')));
                              n < e && (r = r.concat(Array(e - n).fill('equal')));
                              return r;
                          })(n, e.length)
                        : (function (t, e) {
                              const o = [],
                                  { firstIndex: i, lastIndexOld: n, lastIndexNew: r } = e;
                              r - i > 0 && o.push({ index: i, type: 'insert', values: t.slice(i, r) });
                              n - i > 0 && o.push({ index: i + (r - i), type: 'delete', howMany: n - i });
                              return o;
                          })(e, n);
                }
                function tr(t, e, o) {
                    for (let i = 0; i < Math.max(t.length, e.length); i++)
                        if (void 0 === t[i] || void 0 === e[i] || !o(t[i], e[i])) return i;
                    return -1;
                }
                function er(t, e) {
                    return t.slice(e).reverse();
                }
                function or(t, e, o) {
                    o =
                        o ||
                        function (t, e) {
                            return t === e;
                        };
                    const i = t.length,
                        n = e.length;
                    if (i > 200 || n > 200 || i + n > 300) return or.fastDiff(t, e, o, !0);
                    let r, s;
                    if (n < i) {
                        const o = t;
                        (t = e), (e = o), (r = 'delete'), (s = 'insert');
                    } else (r = 'insert'), (s = 'delete');
                    const a = t.length,
                        l = e.length,
                        c = l - a,
                        d = {},
                        h = {};
                    function u(i) {
                        const n = (void 0 !== h[i - 1] ? h[i - 1] : -1) + 1,
                            c = void 0 !== h[i + 1] ? h[i + 1] : -1,
                            u = n > c ? -1 : 1;
                        d[i + u] && (d[i] = d[i + u].slice(0)), d[i] || (d[i] = []), d[i].push(n > c ? r : s);
                        let f = Math.max(n, c),
                            m = f - i;
                        for (; m < a && f < l && o(t[m], e[f]); ) m++, f++, d[i].push('equal');
                        return f;
                    }
                    let f,
                        m = 0;
                    do {
                        for (f = -m; f < c; f++) h[f] = u(f);
                        for (f = c + m; f > c; f--) h[f] = u(f);
                        (h[c] = u(c)), m++;
                    } while (h[c] !== l);
                    return d[c].slice(1);
                }
                function ir(t, e, o) {
                    t.insertBefore(o, t.childNodes[e] || null);
                }
                function nr(t) {
                    const e = t.parentNode;
                    e && e.removeChild(t);
                }
                function rr(t) {
                    if (t) {
                        if (t.defaultView) return t instanceof t.defaultView.Document;
                        if (t.ownerDocument && t.ownerDocument.defaultView)
                            return t instanceof t.ownerDocument.defaultView.Node;
                    }
                    return !1;
                }
                or.fastDiff = Qn;
                class sr {
                    constructor(t, e) {
                        (this.domDocuments = new Set()),
                            (this.domConverter = t),
                            (this.markedAttributes = new Set()),
                            (this.markedChildren = new Set()),
                            (this.markedTexts = new Set()),
                            (this.selection = e),
                            (this.isFocused = !1),
                            (this._inlineFiller = null),
                            (this._fakeSelectionContainer = null);
                    }
                    markToSync(t, e) {
                        if ('text' === t) this.domConverter.mapViewToDom(e.parent) && this.markedTexts.add(e);
                        else {
                            if (!this.domConverter.mapViewToDom(e)) return;
                            if ('attributes' === t) this.markedAttributes.add(e);
                            else {
                                if ('children' !== t) throw new l.a('view-renderer-unknown-type', this);
                                this.markedChildren.add(e);
                            }
                        }
                    }
                    render() {
                        let t;
                        for (const t of this.markedChildren) this._updateChildrenMappings(t);
                        this._inlineFiller && !this._isSelectionInInlineFiller() && this._removeInlineFiller(),
                            this._inlineFiller
                                ? (t = this._getInlineFillerPosition())
                                : this._needsInlineFillerAtSelection() &&
                                  ((t = this.selection.getFirstPosition()), this.markedChildren.add(t.parent));
                        for (const t of this.markedAttributes) this._updateAttrs(t);
                        for (const e of this.markedChildren) this._updateChildren(e, { inlineFillerPosition: t });
                        for (const e of this.markedTexts)
                            !this.markedChildren.has(e.parent) &&
                                this.domConverter.mapViewToDom(e.parent) &&
                                this._updateText(e, { inlineFillerPosition: t });
                        if (t) {
                            const e = this.domConverter.viewPositionToDom(t),
                                o = e.parent.ownerDocument;
                            Jn(e.parent)
                                ? (this._inlineFiller = e.parent)
                                : (this._inlineFiller = ar(o, e.parent, e.offset));
                        } else this._inlineFiller = null;
                        this._updateSelection(),
                            this._updateFocus(),
                            this.markedTexts.clear(),
                            this.markedAttributes.clear(),
                            this.markedChildren.clear();
                    }
                    _updateChildrenMappings(t) {
                        const e = this.domConverter.mapViewToDom(t);
                        if (!e) return;
                        const o = this.domConverter.mapViewToDom(t).childNodes,
                            i = Array.from(
                                this.domConverter.viewChildrenToDom(t, e.ownerDocument, { withChildren: !1 }),
                            ),
                            n = this._diffNodeLists(o, i),
                            r = this._findReplaceActions(n, o, i);
                        if (-1 !== r.indexOf('replace')) {
                            const e = { equal: 0, insert: 0, delete: 0 };
                            for (const n of r)
                                if ('replace' === n) {
                                    const n = e.equal + e.insert,
                                        r = e.equal + e.delete,
                                        s = t.getChild(n);
                                    !s ||
                                        s.is('uiElement') ||
                                        s.is('rawElement') ||
                                        this._updateElementMappings(s, o[r]),
                                        nr(i[n]),
                                        e.equal++;
                                } else e[n]++;
                        }
                    }
                    _updateElementMappings(t, e) {
                        this.domConverter.unbindDomElement(e),
                            this.domConverter.bindElements(e, t),
                            this.markedChildren.add(t),
                            this.markedAttributes.add(t);
                    }
                    _getInlineFillerPosition() {
                        const t = this.selection.getFirstPosition();
                        return t.parent.is('$text') ? rn._createBefore(this.selection.getFirstPosition().parent) : t;
                    }
                    _isSelectionInInlineFiller() {
                        if (1 != this.selection.rangeCount || !this.selection.isCollapsed) return !1;
                        const t = this.selection.getFirstPosition(),
                            e = this.domConverter.viewPositionToDom(t);
                        return !!(e && Un(e.parent) && Jn(e.parent));
                    }
                    _removeInlineFiller() {
                        const t = this._inlineFiller;
                        if (!Jn(t)) throw new l.a('view-renderer-filler-was-lost', this);
                        Yn(t) ? t.parentNode.removeChild(t) : (t.data = t.data.substr(7)), (this._inlineFiller = null);
                    }
                    _needsInlineFillerAtSelection() {
                        if (1 != this.selection.rangeCount || !this.selection.isCollapsed) return !1;
                        const t = this.selection.getFirstPosition(),
                            e = t.parent,
                            o = t.offset;
                        if (!this.domConverter.mapViewToDom(e.root)) return !1;
                        if (!e.is('element')) return !1;
                        if (
                            !(function (t) {
                                if ('false' == t.getAttribute('contenteditable')) return !1;
                                const e = t.findAncestor((t) => t.hasAttribute('contenteditable'));
                                return !e || 'true' == e.getAttribute('contenteditable');
                            })(e)
                        )
                            return !1;
                        if (o === e.getFillerOffset()) return !1;
                        const i = t.nodeBefore,
                            n = t.nodeAfter;
                        return !(i instanceof li || n instanceof li);
                    }
                    _updateText(t, e) {
                        const o = this.domConverter.findCorrespondingDomText(t),
                            i = this.domConverter.viewToDom(t, o.ownerDocument),
                            n = o.data;
                        let r = i.data;
                        const s = e.inlineFillerPosition;
                        if ((s && s.parent == t.parent && s.offset == t.index && (r = Gn + r), n != r)) {
                            const t = Qn(n, r);
                            for (const e of t)
                                'insert' === e.type
                                    ? o.insertData(e.index, e.values.join(''))
                                    : o.deleteData(e.index, e.howMany);
                        }
                    }
                    _updateAttrs(t) {
                        const e = this.domConverter.mapViewToDom(t);
                        if (!e) return;
                        const o = Array.from(e.attributes).map((t) => t.name),
                            i = t.getAttributeKeys();
                        for (const o of i) e.setAttribute(o, t.getAttribute(o));
                        for (const i of o) t.hasAttribute(i) || e.removeAttribute(i);
                    }
                    _updateChildren(t, e) {
                        const o = this.domConverter.mapViewToDom(t);
                        if (!o) return;
                        const i = e.inlineFillerPosition,
                            n = this.domConverter.mapViewToDom(t).childNodes,
                            r = Array.from(
                                this.domConverter.viewChildrenToDom(t, o.ownerDocument, {
                                    bind: !0,
                                    inlineFillerPosition: i,
                                }),
                            );
                        i && i.parent === t && ar(o.ownerDocument, r, i.offset);
                        const s = this._diffNodeLists(n, r);
                        let a = 0;
                        const l = new Set();
                        for (const t of s) 'delete' === t ? (l.add(n[a]), nr(n[a])) : 'equal' === t && a++;
                        a = 0;
                        for (const t of s)
                            'insert' === t
                                ? (ir(o, a, r[a]), a++)
                                : 'equal' === t &&
                                  (this._markDescendantTextToSync(this.domConverter.domToView(r[a])), a++);
                        for (const t of l) t.parentNode || this.domConverter.unbindDomElement(t);
                    }
                    _diffNodeLists(t, e) {
                        return or(
                            (t = (function (t, e) {
                                const o = Array.from(t);
                                if (0 == o.length || !e) return o;
                                o[o.length - 1] == e && o.pop();
                                return o;
                            })(t, this._fakeSelectionContainer)),
                            e,
                            cr.bind(null, this.domConverter),
                        );
                    }
                    _findReplaceActions(t, e, o) {
                        if (-1 === t.indexOf('insert') || -1 === t.indexOf('delete')) return t;
                        let i = [],
                            n = [],
                            r = [];
                        const s = { equal: 0, insert: 0, delete: 0 };
                        for (const a of t)
                            'insert' === a
                                ? r.push(o[s.equal + s.insert])
                                : 'delete' === a
                                ? n.push(e[s.equal + s.delete])
                                : ((i = i.concat(or(n, r, lr).map((t) => ('equal' === t ? 'replace' : t)))),
                                  i.push('equal'),
                                  (n = []),
                                  (r = [])),
                                s[a]++;
                        return i.concat(or(n, r, lr).map((t) => ('equal' === t ? 'replace' : t)));
                    }
                    _markDescendantTextToSync(t) {
                        if (t)
                            if (t.is('$text')) this.markedTexts.add(t);
                            else if (t.is('element'))
                                for (const e of t.getChildren()) this._markDescendantTextToSync(e);
                    }
                    _updateSelection() {
                        if (0 === this.selection.rangeCount)
                            return this._removeDomSelection(), void this._removeFakeSelection();
                        const t = this.domConverter.mapViewToDom(this.selection.editableElement);
                        this.isFocused &&
                            t &&
                            (this.selection.isFake
                                ? this._updateFakeSelection(t)
                                : (this._removeFakeSelection(), this._updateDomSelection(t)));
                    }
                    _updateFakeSelection(t) {
                        const e = t.ownerDocument;
                        this._fakeSelectionContainer ||
                            (this._fakeSelectionContainer = (function (t) {
                                const e = t.createElement('div');
                                return (
                                    (e.className = 'ck-fake-selection-container'),
                                    Object.assign(e.style, {
                                        position: 'fixed',
                                        top: 0,
                                        left: '-9999px',
                                        width: '42px',
                                    }),
                                    (e.textContent = ' '),
                                    e
                                );
                            })(e));
                        const o = this._fakeSelectionContainer;
                        if (
                            (this.domConverter.bindFakeSelection(o, this.selection), !this._fakeSelectionNeedsUpdate(t))
                        )
                            return;
                        (o.parentElement && o.parentElement == t) || t.appendChild(o),
                            (o.textContent = this.selection.fakeSelectionLabel || ' ');
                        const i = e.getSelection(),
                            n = e.createRange();
                        i.removeAllRanges(), n.selectNodeContents(o), i.addRange(n);
                    }
                    _updateDomSelection(t) {
                        const e = t.ownerDocument.defaultView.getSelection();
                        if (!this._domSelectionNeedsUpdate(e)) return;
                        const o = this.domConverter.viewPositionToDom(this.selection.anchor),
                            i = this.domConverter.viewPositionToDom(this.selection.focus);
                        t.focus(),
                            e.collapse(o.parent, o.offset),
                            e.extend(i.parent, i.offset),
                            wn.isGecko &&
                                (function (t, e) {
                                    const o = t.parent;
                                    if (o.nodeType != Node.ELEMENT_NODE || t.offset != o.childNodes.length - 1) return;
                                    const i = o.childNodes[t.offset];
                                    i && 'BR' == i.tagName && e.addRange(e.getRangeAt(0));
                                })(i, e);
                    }
                    _domSelectionNeedsUpdate(t) {
                        if (!this.domConverter.isDomSelectionCorrect(t)) return !0;
                        const e = t && this.domConverter.domSelectionToView(t);
                        return (
                            (!e || !this.selection.isEqual(e)) &&
                            !(!this.selection.isCollapsed && this.selection.isSimilar(e))
                        );
                    }
                    _fakeSelectionNeedsUpdate(t) {
                        const e = this._fakeSelectionContainer,
                            o = t.ownerDocument.getSelection();
                        return (
                            !e ||
                            e.parentElement !== t ||
                            (o.anchorNode !== e && !e.contains(o.anchorNode)) ||
                            e.textContent !== this.selection.fakeSelectionLabel
                        );
                    }
                    _removeDomSelection() {
                        for (const t of this.domDocuments) {
                            if (t.getSelection().rangeCount) {
                                const e = t.activeElement,
                                    o = this.domConverter.mapDomToView(e);
                                e && o && t.getSelection().removeAllRanges();
                            }
                        }
                    }
                    _removeFakeSelection() {
                        const t = this._fakeSelectionContainer;
                        t && t.remove();
                    }
                    _updateFocus() {
                        if (this.isFocused) {
                            const t = this.selection.editableElement;
                            t && this.domConverter.focus(t);
                        }
                    }
                }
                function ar(t, e, o) {
                    const i = e instanceof Array ? e : e.childNodes,
                        n = i[o];
                    if (Un(n)) return (n.data = Gn + n.data), n;
                    {
                        const n = t.createTextNode(Gn);
                        return Array.isArray(e) ? i.splice(o, 0, n) : ir(e, o, n), n;
                    }
                }
                function lr(t, e) {
                    return (
                        rr(t) &&
                        rr(e) &&
                        !Un(t) &&
                        !Un(e) &&
                        t.nodeType !== Node.COMMENT_NODE &&
                        e.nodeType !== Node.COMMENT_NODE &&
                        t.tagName.toLowerCase() === e.tagName.toLowerCase()
                    );
                }
                function cr(t, e, o) {
                    return (
                        e === o || (Un(e) && Un(o) ? e.data === o.data : !(!t.isBlockFiller(e) || !t.isBlockFiller(o)))
                    );
                }
                Kt(sr, Ht);
                var dr = { window: window, document: document };
                function hr(t) {
                    let e = 0;
                    for (; t.previousSibling; ) (t = t.previousSibling), e++;
                    return e;
                }
                function ur(t) {
                    const e = [];
                    for (; t && t.nodeType != Node.DOCUMENT_NODE; ) e.unshift(t), (t = t.parentNode);
                    return e;
                }
                const fr = Kn(document);
                class mr {
                    constructor(t, e = {}) {
                        (this.document = t),
                            (this.blockFillerMode = e.blockFillerMode || 'br'),
                            (this.preElements = ['pre']),
                            (this.blockElements = [
                                'p',
                                'div',
                                'h1',
                                'h2',
                                'h3',
                                'h4',
                                'h5',
                                'h6',
                                'li',
                                'dd',
                                'dt',
                                'figcaption',
                                'td',
                                'th',
                            ]),
                            (this._blockFiller = 'br' == this.blockFillerMode ? Kn : $n),
                            (this._domToViewMapping = new WeakMap()),
                            (this._viewToDomMapping = new WeakMap()),
                            (this._fakeSelectionMapping = new WeakMap()),
                            (this._rawContentElementMatcher = new hi()),
                            (this._encounteredRawContentDomNodes = new WeakSet());
                    }
                    bindFakeSelection(t, e) {
                        this._fakeSelectionMapping.set(t, new cn(e));
                    }
                    fakeSelectionToView(t) {
                        return this._fakeSelectionMapping.get(t);
                    }
                    bindElements(t, e) {
                        this._domToViewMapping.set(t, e), this._viewToDomMapping.set(e, t);
                    }
                    unbindDomElement(t) {
                        const e = this._domToViewMapping.get(t);
                        if (e) {
                            this._domToViewMapping.delete(t), this._viewToDomMapping.delete(e);
                            for (const e of t.childNodes) this.unbindDomElement(e);
                        }
                    }
                    bindDocumentFragments(t, e) {
                        this._domToViewMapping.set(t, e), this._viewToDomMapping.set(e, t);
                    }
                    viewToDom(t, e, o = {}) {
                        if (t.is('$text')) {
                            const o = this._processDataFromViewText(t);
                            return e.createTextNode(o);
                        }
                        {
                            if (this.mapViewToDom(t)) return this.mapViewToDom(t);
                            let i;
                            if (t.is('documentFragment'))
                                (i = e.createDocumentFragment()), o.bind && this.bindDocumentFragments(i, t);
                            else {
                                if (t.is('uiElement')) return (i = t.render(e)), o.bind && this.bindElements(i, t), i;
                                (i = t.hasAttribute('xmlns')
                                    ? e.createElementNS(t.getAttribute('xmlns'), t.name)
                                    : e.createElement(t.name)),
                                    t.is('rawElement') && t.render(i),
                                    o.bind && this.bindElements(i, t);
                                for (const e of t.getAttributeKeys()) i.setAttribute(e, t.getAttribute(e));
                            }
                            if (!1 !== o.withChildren)
                                for (const n of this.viewChildrenToDom(t, e, o)) i.appendChild(n);
                            return i;
                        }
                    }
                    *viewChildrenToDom(t, e, o = {}) {
                        const i = t.getFillerOffset && t.getFillerOffset();
                        let n = 0;
                        for (const r of t.getChildren())
                            i === n && (yield this._blockFiller(e)), yield this.viewToDom(r, e, o), n++;
                        i === n && (yield this._blockFiller(e));
                    }
                    viewRangeToDom(t) {
                        const e = this.viewPositionToDom(t.start),
                            o = this.viewPositionToDom(t.end),
                            i = document.createRange();
                        return i.setStart(e.parent, e.offset), i.setEnd(o.parent, o.offset), i;
                    }
                    viewPositionToDom(t) {
                        const e = t.parent;
                        if (e.is('$text')) {
                            const o = this.findCorrespondingDomText(e);
                            if (!o) return null;
                            let i = t.offset;
                            return Jn(o) && (i += 7), { parent: o, offset: i };
                        }
                        {
                            let o, i, n;
                            if (0 === t.offset) {
                                if (((o = this.mapViewToDom(e)), !o)) return null;
                                n = o.childNodes[0];
                            } else {
                                const e = t.nodeBefore;
                                if (
                                    ((i = e.is('$text')
                                        ? this.findCorrespondingDomText(e)
                                        : this.mapViewToDom(t.nodeBefore)),
                                    !i)
                                )
                                    return null;
                                (o = i.parentNode), (n = i.nextSibling);
                            }
                            if (Un(n) && Jn(n)) return { parent: n, offset: 7 };
                            return { parent: o, offset: i ? hr(i) + 1 : 0 };
                        }
                    }
                    domToView(t, e = {}) {
                        if (this.isBlockFiller(t, this.blockFillerMode)) return null;
                        const o = this.getHostViewElement(t);
                        if (o) return o;
                        if (Un(t)) {
                            if (Yn(t)) return null;
                            {
                                const e = this._processDataFromDomText(t);
                                return '' === e ? null : new li(this.document, e);
                            }
                        }
                        if (this.isComment(t)) return null;
                        {
                            if (this.mapDomToView(t)) return this.mapDomToView(t);
                            let o;
                            if (this.isDocumentFragment(t))
                                (o = new zn(this.document)), e.bind && this.bindDocumentFragments(t, o);
                            else {
                                const i = e.keepOriginalCase ? t.tagName : t.tagName.toLowerCase();
                                (o = new Yi(this.document, i)), e.bind && this.bindElements(t, o);
                                const n = t.attributes;
                                for (let t = n.length - 1; t >= 0; t--) o._setAttribute(n[t].name, n[t].value);
                                if (!1 !== e.withChildren && this._rawContentElementMatcher.match(o))
                                    return (
                                        o._setCustomProperty('$rawContent', t.innerHTML),
                                        this._encounteredRawContentDomNodes.add(t),
                                        o
                                    );
                            }
                            if (!1 !== e.withChildren) for (const i of this.domChildrenToView(t, e)) o._appendChild(i);
                            return o;
                        }
                    }
                    *domChildrenToView(t, e = {}) {
                        for (let o = 0; o < t.childNodes.length; o++) {
                            const i = t.childNodes[o],
                                n = this.domToView(i, e);
                            null !== n && (yield n);
                        }
                    }
                    domSelectionToView(t) {
                        if (1 === t.rangeCount) {
                            let e = t.getRangeAt(0).startContainer;
                            Un(e) && (e = e.parentNode);
                            const o = this.fakeSelectionToView(e);
                            if (o) return o;
                        }
                        const e = this.isDomSelectionBackward(t),
                            o = [];
                        for (let e = 0; e < t.rangeCount; e++) {
                            const i = t.getRangeAt(e),
                                n = this.domRangeToView(i);
                            n && o.push(n);
                        }
                        return new cn(o, { backward: e });
                    }
                    domRangeToView(t) {
                        const e = this.domPositionToView(t.startContainer, t.startOffset),
                            o = this.domPositionToView(t.endContainer, t.endOffset);
                        return e && o ? new sn(e, o) : null;
                    }
                    domPositionToView(t, e) {
                        if (this.isBlockFiller(t, this.blockFillerMode))
                            return this.domPositionToView(t.parentNode, hr(t));
                        const o = this.mapDomToView(t);
                        if (o && (o.is('uiElement') || o.is('rawElement'))) return rn._createBefore(o);
                        if (Un(t)) {
                            if (Yn(t)) return this.domPositionToView(t.parentNode, hr(t));
                            const o = this.findCorrespondingViewText(t);
                            let i = e;
                            return o ? (Jn(t) && ((i -= 7), (i = i < 0 ? 0 : i)), new rn(o, i)) : null;
                        }
                        if (0 === e) {
                            const e = this.mapDomToView(t);
                            if (e) return new rn(e, 0);
                        } else {
                            const o = t.childNodes[e - 1],
                                i = Un(o) ? this.findCorrespondingViewText(o) : this.mapDomToView(o);
                            if (i && i.parent) return new rn(i.parent, i.index + 1);
                        }
                        return null;
                    }
                    mapDomToView(t) {
                        return this.getHostViewElement(t) || this._domToViewMapping.get(t);
                    }
                    findCorrespondingViewText(t) {
                        if (Yn(t)) return null;
                        const e = this.getHostViewElement(t);
                        if (e) return e;
                        const o = t.previousSibling;
                        if (o) {
                            if (!this.isElement(o)) return null;
                            const t = this.mapDomToView(o);
                            if (t) {
                                return t.nextSibling instanceof li ? t.nextSibling : null;
                            }
                        } else {
                            const e = this.mapDomToView(t.parentNode);
                            if (e) {
                                const t = e.getChild(0);
                                return t instanceof li ? t : null;
                            }
                        }
                        return null;
                    }
                    mapViewToDom(t) {
                        return this._viewToDomMapping.get(t);
                    }
                    findCorrespondingDomText(t) {
                        const e = t.previousSibling;
                        return e && this.mapViewToDom(e)
                            ? this.mapViewToDom(e).nextSibling
                            : !e && t.parent && this.mapViewToDom(t.parent)
                            ? this.mapViewToDom(t.parent).childNodes[0]
                            : null;
                    }
                    focus(t) {
                        const e = this.mapViewToDom(t);
                        if (e && e.ownerDocument.activeElement !== e) {
                            const { scrollX: t, scrollY: o } = dr.window,
                                i = [];
                            pr(e, (t) => {
                                const { scrollLeft: e, scrollTop: o } = t;
                                i.push([e, o]);
                            }),
                                e.focus(),
                                pr(e, (t) => {
                                    const [e, o] = i.shift();
                                    (t.scrollLeft = e), (t.scrollTop = o);
                                }),
                                dr.window.scrollTo(t, o);
                        }
                    }
                    isElement(t) {
                        return t && t.nodeType == Node.ELEMENT_NODE;
                    }
                    isDocumentFragment(t) {
                        return t && t.nodeType == Node.DOCUMENT_FRAGMENT_NODE;
                    }
                    isComment(t) {
                        return t && t.nodeType == Node.COMMENT_NODE;
                    }
                    isBlockFiller(t) {
                        return 'br' == this.blockFillerMode
                            ? t.isEqualNode(fr)
                            : !(
                                  'BR' !== t.tagName ||
                                  !br(t, this.blockElements) ||
                                  1 !== t.parentNode.childNodes.length
                              ) ||
                                  (function (t, e) {
                                      return Un(t) && ' ' == t.data && br(t, e) && 1 === t.parentNode.childNodes.length;
                                  })(t, this.blockElements);
                    }
                    isDomSelectionBackward(t) {
                        if (t.isCollapsed) return !1;
                        const e = document.createRange();
                        e.setStart(t.anchorNode, t.anchorOffset), e.setEnd(t.focusNode, t.focusOffset);
                        const o = e.collapsed;
                        return e.detach(), o;
                    }
                    getHostViewElement(t) {
                        const e = ur(t);
                        for (e.pop(); e.length; ) {
                            const t = e.pop(),
                                o = this._domToViewMapping.get(t);
                            if (o && (o.is('uiElement') || o.is('rawElement'))) return o;
                        }
                        return null;
                    }
                    isDomSelectionCorrect(t) {
                        return (
                            this._isDomSelectionPositionCorrect(t.anchorNode, t.anchorOffset) &&
                            this._isDomSelectionPositionCorrect(t.focusNode, t.focusOffset)
                        );
                    }
                    registerRawContentMatcher(t) {
                        this._rawContentElementMatcher.add(t);
                    }
                    _isDomSelectionPositionCorrect(t, e) {
                        if (Un(t) && Jn(t) && e < 7) return !1;
                        if (this.isElement(t) && Jn(t.childNodes[e])) return !1;
                        const o = this.mapDomToView(t);
                        return !o || (!o.is('uiElement') && !o.is('rawElement'));
                    }
                    _processDataFromViewText(t) {
                        let e = t.data;
                        if (t.getAncestors().some((t) => this.preElements.includes(t.name))) return e;
                        if (' ' == e.charAt(0)) {
                            const o = this._getTouchingViewTextNode(t, !1);
                            (!(o && this._nodeEndsWithSpace(o)) && o) || (e = ' ' + e.substr(1));
                        }
                        if (' ' == e.charAt(e.length - 1)) {
                            const o = this._getTouchingViewTextNode(t, !0);
                            (' ' != e.charAt(e.length - 2) && o && ' ' != o.data.charAt(0)) ||
                                (e = e.substr(0, e.length - 1) + ' ');
                        }
                        return e.replace(/ {2}/g, '  ');
                    }
                    _nodeEndsWithSpace(t) {
                        if (t.getAncestors().some((t) => this.preElements.includes(t.name))) return !1;
                        const e = this._processDataFromViewText(t);
                        return ' ' == e.charAt(e.length - 1);
                    }
                    _processDataFromDomText(t) {
                        let e = t.data;
                        if (gr(t, this.preElements)) return Xn(t);
                        e = e.replace(/[ \n\t\r]{1,}/g, ' ');
                        const o = this._getTouchingInlineDomNode(t, !1),
                            i = this._getTouchingInlineDomNode(t, !0),
                            n = this._checkShouldLeftTrimDomText(t, o),
                            r = this._checkShouldRightTrimDomText(t, i);
                        return (
                            n && (e = e.replace(/^ /, '')),
                            r && (e = e.replace(/ $/, '')),
                            (e = Xn(new Text(e))),
                            (e = e.replace(/ \u00A0/g, '  ')),
                            (/( |\u00A0)\u00A0$/.test(e) || !i || (i.data && ' ' == i.data.charAt(0))) &&
                                (e = e.replace(/\u00A0$/, ' ')),
                            n && (e = e.replace(/^\u00A0/, ' ')),
                            e
                        );
                    }
                    _checkShouldLeftTrimDomText(t, e) {
                        return (
                            !e ||
                            !!Uo(e) ||
                            (!this._encounteredRawContentDomNodes.has(t.previousSibling) &&
                                /[^\S\u00A0]/.test(e.data.charAt(e.data.length - 1)))
                        );
                    }
                    _checkShouldRightTrimDomText(t, e) {
                        return !e && !Jn(t);
                    }
                    _getTouchingViewTextNode(t, e) {
                        const o = new nn({
                            startPosition: e ? rn._createAfter(t) : rn._createBefore(t),
                            direction: e ? 'forward' : 'backward',
                        });
                        for (const t of o) {
                            if (t.item.is('containerElement')) return null;
                            if (t.item.is('element', 'br')) return null;
                            if (t.item.is('$textProxy')) return t.item;
                        }
                        return null;
                    }
                    _getTouchingInlineDomNode(t, e) {
                        if (!t.parentNode) return null;
                        const o = e ? 'nextNode' : 'previousNode',
                            i = t.ownerDocument,
                            n = ur(t)[0],
                            r = i.createTreeWalker(n, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, {
                                acceptNode: (t) =>
                                    Un(t) || 'BR' == t.tagName ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP,
                            });
                        r.currentNode = t;
                        const s = r[o]();
                        if (null !== s) {
                            const e = (function (t, e) {
                                const o = ur(t),
                                    i = ur(e);
                                let n = 0;
                                for (; o[n] == i[n] && o[n]; ) n++;
                                return 0 === n ? null : o[n - 1];
                            })(t, s);
                            if (e && !gr(t, this.blockElements, e) && !gr(s, this.blockElements, e)) return s;
                        }
                        return null;
                    }
                }
                function gr(t, e, o) {
                    let i = ur(t);
                    return (
                        o && (i = i.slice(i.indexOf(o) + 1)),
                        i.some((t) => t.tagName && e.includes(t.tagName.toLowerCase()))
                    );
                }
                function pr(t, e) {
                    for (; t && t != dr.document; ) e(t), (t = t.parentNode);
                }
                function br(t, e) {
                    const o = t.parentNode;
                    return o && o.tagName && e.includes(o.tagName.toLowerCase());
                }
                function wr(t) {
                    const e = Object.prototype.toString.apply(t);
                    return '[object Window]' == e || '[object global]' == e;
                }
                var kr = Nt({}, h, {
                    listenTo(t, ...e) {
                        if (rr(t) || wr(t)) {
                            const o = this._getProxyEmitter(t) || new _r(t);
                            o.attach(...e), (t = o);
                        }
                        h.listenTo.call(this, t, ...e);
                    },
                    stopListening(t, e, o) {
                        if (rr(t) || wr(t)) {
                            const e = this._getProxyEmitter(t);
                            if (!e) return;
                            t = e;
                        }
                        h.stopListening.call(this, t, e, o), t instanceof _r && t.detach(e);
                    },
                    _getProxyEmitter(t) {
                        return (e = this), (o = vr(t)), e[c] && e[c][o] ? e[c][o].emitter : null;
                        var e, o;
                    },
                });
                class _r {
                    constructor(t) {
                        u(this, vr(t)), (this._domNode = t);
                    }
                }
                function vr(t) {
                    return t['data-ck-expando'] || (t['data-ck-expando'] = s());
                }
                Nt(_r.prototype, h, {
                    attach(t, e, o = {}) {
                        if (this._domListeners && this._domListeners[t]) return;
                        const i = { capture: !!o.useCapture, passive: !!o.usePassive },
                            n = this._createDomListener(t, i);
                        this._domNode.addEventListener(t, n, i),
                            this._domListeners || (this._domListeners = {}),
                            (this._domListeners[t] = n);
                    },
                    detach(t) {
                        let e;
                        !this._domListeners[t] ||
                            ((e = this._events[t]) && e.callbacks.length) ||
                            this._domListeners[t].removeListener();
                    },
                    _createDomListener(t, e) {
                        const o = (e) => {
                            this.fire(t, e);
                        };
                        return (
                            (o.removeListener = () => {
                                this._domNode.removeEventListener(t, o, e), delete this._domListeners[t];
                            }),
                            o
                        );
                    },
                });
                class yr {
                    constructor(t) {
                        (this.view = t), (this.document = t.document), (this.isEnabled = !1);
                    }
                    enable() {
                        this.isEnabled = !0;
                    }
                    disable() {
                        this.isEnabled = !1;
                    }
                    destroy() {
                        this.disable(), this.stopListening();
                    }
                    checkShouldIgnoreEventFromTarget(t) {
                        return (
                            t && 3 === t.nodeType && (t = t.parentNode),
                            !(!t || 1 !== t.nodeType) &&
                                t.matches('[data-cke-ignore-events], [data-cke-ignore-events] *')
                        );
                    }
                }
                Kt(yr, kr);
                var xr = function (t) {
                    return this.__data__.set(t, '__lodash_hash_undefined__'), this;
                };
                var Cr = function (t) {
                    return this.__data__.has(t);
                };
                function Ar(t) {
                    var e = -1,
                        o = null == t ? 0 : t.length;
                    for (this.__data__ = new Fe(); ++e < o; ) this.add(t[e]);
                }
                (Ar.prototype.add = Ar.prototype.push = xr), (Ar.prototype.has = Cr);
                var Tr = Ar;
                var Pr = function (t, e) {
                    for (var o = -1, i = null == t ? 0 : t.length; ++o < i; ) if (e(t[o], o, t)) return !0;
                    return !1;
                };
                var Sr = function (t, e) {
                    return t.has(e);
                };
                var Er = function (t, e, o, i, n, r) {
                    var s = 1 & o,
                        a = t.length,
                        l = e.length;
                    if (a != l && !(s && l > a)) return !1;
                    var c = r.get(t),
                        d = r.get(e);
                    if (c && d) return c == e && d == t;
                    var h = -1,
                        u = !0,
                        f = 2 & o ? new Tr() : void 0;
                    for (r.set(t, e), r.set(e, t); ++h < a; ) {
                        var m = t[h],
                            g = e[h];
                        if (i) var p = s ? i(g, m, h, e, t, r) : i(m, g, h, t, e, r);
                        if (void 0 !== p) {
                            if (p) continue;
                            u = !1;
                            break;
                        }
                        if (f) {
                            if (
                                !Pr(e, function (t, e) {
                                    if (!Sr(f, e) && (m === t || n(m, t, o, i, r))) return f.push(e);
                                })
                            ) {
                                u = !1;
                                break;
                            }
                        } else if (m !== g && !n(m, g, o, i, r)) {
                            u = !1;
                            break;
                        }
                    }
                    return r.delete(t), r.delete(e), u;
                };
                var Rr = function (t) {
                    var e = -1,
                        o = Array(t.size);
                    return (
                        t.forEach(function (t, i) {
                            o[++e] = [i, t];
                        }),
                        o
                    );
                };
                var Ir = function (t) {
                        var e = -1,
                            o = Array(t.size);
                        return (
                            t.forEach(function (t) {
                                o[++e] = t;
                            }),
                            o
                        );
                    },
                    Vr = _ ? _.prototype : void 0,
                    Or = Vr ? Vr.valueOf : void 0;
                var zr = function (t, e, o, i, n, r, s) {
                        switch (o) {
                            case '[object DataView]':
                                if (t.byteLength != e.byteLength || t.byteOffset != e.byteOffset) return !1;
                                (t = t.buffer), (e = e.buffer);
                            case '[object ArrayBuffer]':
                                return !(t.byteLength != e.byteLength || !r(new xo(t), new xo(e)));
                            case '[object Boolean]':
                            case '[object Date]':
                            case '[object Number]':
                                return G(+t, +e);
                            case '[object Error]':
                                return t.name == e.name && t.message == e.message;
                            case '[object RegExp]':
                            case '[object String]':
                                return t == e + '';
                            case '[object Map]':
                                var a = Rr;
                            case '[object Set]':
                                var l = 1 & i;
                                if ((a || (a = Ir), t.size != e.size && !l)) return !1;
                                var c = s.get(t);
                                if (c) return c == e;
                                (i |= 2), s.set(t, e);
                                var d = Er(a(t), a(e), i, n, r, s);
                                return s.delete(t), d;
                            case '[object Symbol]':
                                if (Or) return Or.call(t) == Or.call(e);
                        }
                        return !1;
                    },
                    Mr = Object.prototype.hasOwnProperty;
                var Nr = function (t, e, o, i, n, r) {
                        var s = 1 & o,
                            a = ao(t),
                            l = a.length;
                        if (l != ao(e).length && !s) return !1;
                        for (var c = l; c--; ) {
                            var d = a[c];
                            if (!(s ? d in e : Mr.call(e, d))) return !1;
                        }
                        var h = r.get(t),
                            u = r.get(e);
                        if (h && u) return h == e && u == t;
                        var f = !0;
                        r.set(t, e), r.set(e, t);
                        for (var m = s; ++c < l; ) {
                            var g = t[(d = a[c])],
                                p = e[d];
                            if (i) var b = s ? i(p, g, d, e, t, r) : i(g, p, d, t, e, r);
                            if (!(void 0 === b ? g === p || n(g, p, o, i, r) : b)) {
                                f = !1;
                                break;
                            }
                            m || (m = 'constructor' == d);
                        }
                        if (f && !m) {
                            var w = t.constructor,
                                k = e.constructor;
                            w == k ||
                                !('constructor' in t) ||
                                !('constructor' in e) ||
                                ('function' == typeof w &&
                                    w instanceof w &&
                                    'function' == typeof k &&
                                    k instanceof k) ||
                                (f = !1);
                        }
                        return r.delete(t), r.delete(e), f;
                    },
                    Br = Object.prototype.hasOwnProperty;
                var Fr = function (t, e, o, i, n, r) {
                    var s = _t(t),
                        a = _t(e),
                        l = s ? '[object Array]' : _o(t),
                        c = a ? '[object Array]' : _o(e),
                        d = '[object Object]' == (l = '[object Arguments]' == l ? '[object Object]' : l),
                        h = '[object Object]' == (c = '[object Arguments]' == c ? '[object Object]' : c),
                        u = l == c;
                    if (u && Object(vt.a)(t)) {
                        if (!Object(vt.a)(e)) return !1;
                        (s = !0), (d = !1);
                    }
                    if (u && !d)
                        return r || (r = new He()), s || Pt(t) ? Er(t, e, o, i, n, r) : zr(t, e, l, o, i, n, r);
                    if (!(1 & o)) {
                        var f = d && Br.call(t, '__wrapped__'),
                            m = h && Br.call(e, '__wrapped__');
                        if (f || m) {
                            var g = f ? t.value() : t,
                                p = m ? e.value() : e;
                            return r || (r = new He()), n(g, p, o, i, r);
                        }
                    }
                    return !!u && (r || (r = new He()), Nr(t, e, o, i, n, r));
                };
                var Dr = function t(e, o, i, n, r) {
                    return (
                        e === o ||
                        (null == e || null == o || (!mt(e) && !mt(o)) ? e != e && o != o : Fr(e, o, i, n, t, r))
                    );
                };
                var Lr = function (t, e, o) {
                    var i = (o = 'function' == typeof o ? o : void 0) ? o(t, e) : void 0;
                    return void 0 === i ? Dr(t, e, void 0, o) : !!i;
                };
                class Hr extends yr {
                    constructor(t) {
                        super(t),
                            (this._config = {
                                childList: !0,
                                characterData: !0,
                                characterDataOldValue: !0,
                                subtree: !0,
                            }),
                            (this.domConverter = t.domConverter),
                            (this.renderer = t._renderer),
                            (this._domElements = []),
                            (this._mutationObserver = new window.MutationObserver(this._onMutations.bind(this)));
                    }
                    flush() {
                        this._onMutations(this._mutationObserver.takeRecords());
                    }
                    observe(t) {
                        this._domElements.push(t), this.isEnabled && this._mutationObserver.observe(t, this._config);
                    }
                    enable() {
                        super.enable();
                        for (const t of this._domElements) this._mutationObserver.observe(t, this._config);
                    }
                    disable() {
                        super.disable(), this._mutationObserver.disconnect();
                    }
                    destroy() {
                        super.destroy(), this._mutationObserver.disconnect();
                    }
                    _onMutations(t) {
                        if (0 === t.length) return;
                        const e = this.domConverter,
                            o = new Map(),
                            i = new Set();
                        for (const o of t)
                            if ('childList' === o.type) {
                                const t = e.mapDomToView(o.target);
                                if (t && (t.is('uiElement') || t.is('rawElement'))) continue;
                                t && !this._isBogusBrMutation(o) && i.add(t);
                            }
                        for (const n of t) {
                            const t = e.mapDomToView(n.target);
                            if ((!t || (!t.is('uiElement') && !t.is('rawElement'))) && 'characterData' === n.type) {
                                const t = e.findCorrespondingViewText(n.target);
                                t && !i.has(t.parent)
                                    ? o.set(t, { type: 'text', oldText: t.data, newText: Xn(n.target), node: t })
                                    : !t && Jn(n.target) && i.add(e.mapDomToView(n.target.parentNode));
                            }
                        }
                        const n = [];
                        for (const t of o.values()) this.renderer.markToSync('text', t.node), n.push(t);
                        for (const t of i) {
                            const o = e.mapViewToDom(t),
                                i = Array.from(t.getChildren()),
                                r = Array.from(e.domChildrenToView(o, { withChildren: !1 }));
                            Lr(i, r, a) ||
                                (this.renderer.markToSync('children', t),
                                n.push({ type: 'children', oldChildren: i, newChildren: r, node: t }));
                        }
                        const r = t[0].target.ownerDocument.getSelection();
                        let s = null;
                        if (r && r.anchorNode) {
                            const t = e.domPositionToView(r.anchorNode, r.anchorOffset),
                                o = e.domPositionToView(r.focusNode, r.focusOffset);
                            t && o && ((s = new cn(t)), s.setFocus(o));
                        }
                        function a(t, e) {
                            if (!Array.isArray(t))
                                return t === e || (!(!t.is('$text') || !e.is('$text')) && t.data === e.data);
                        }
                        n.length && (this.document.fire('mutations', n, s), this.view.forceRender());
                    }
                    _isBogusBrMutation(t) {
                        let e = null;
                        return (
                            null === t.nextSibling &&
                                0 === t.removedNodes.length &&
                                1 == t.addedNodes.length &&
                                (e = this.domConverter.domToView(t.addedNodes[0], { withChildren: !1 })),
                            e && e.is('element', 'br')
                        );
                    }
                }
                class jr {
                    constructor(t, e, o) {
                        (this.view = t),
                            (this.document = t.document),
                            (this.domEvent = e),
                            (this.domTarget = e.target),
                            Nt(this, o);
                    }
                    get target() {
                        return this.view.domConverter.mapDomToView(this.domTarget);
                    }
                    preventDefault() {
                        this.domEvent.preventDefault();
                    }
                    stopPropagation() {
                        this.domEvent.stopPropagation();
                    }
                }
                class Wr extends yr {
                    constructor(t) {
                        super(t), (this.useCapture = !1);
                    }
                    observe(t) {
                        ('string' == typeof this.domEventType ? [this.domEventType] : this.domEventType).forEach(
                            (e) => {
                                this.listenTo(
                                    t,
                                    e,
                                    (t, e) => {
                                        this.isEnabled &&
                                            !this.checkShouldIgnoreEventFromTarget(e.target) &&
                                            this.onDomEvent(e);
                                    },
                                    { useCapture: this.useCapture },
                                );
                            },
                        );
                    }
                    fire(t, e, o) {
                        this.isEnabled && this.document.fire(t, new jr(this.view, e, o));
                    }
                }
                class qr extends Wr {
                    constructor(t) {
                        super(t), (this.domEventType = ['keydown', 'keyup']);
                    }
                    onDomEvent(t) {
                        this.fire(t.type, t, {
                            keyCode: t.keyCode,
                            altKey: t.altKey,
                            ctrlKey: t.ctrlKey,
                            shiftKey: t.shiftKey,
                            metaKey: t.metaKey,
                            get keystroke() {
                                return xn(this);
                            },
                        });
                    }
                }
                var Ur = function () {
                        return k.a.Date.now();
                    },
                    $r = /\s/;
                var Kr = function (t) {
                        for (var e = t.length; e-- && $r.test(t.charAt(e)); );
                        return e;
                    },
                    Gr = /^\s+/;
                var Jr = function (t) {
                        return t ? t.slice(0, Kr(t) + 1).replace(Gr, '') : t;
                    },
                    Yr = /^[-+]0x[0-9a-f]+$/i,
                    Xr = /^0b[01]+$/i,
                    Zr = /^0o[0-7]+$/i,
                    Qr = parseInt;
                var ts = function (t) {
                        if ('number' == typeof t) return t;
                        if (fi(t)) return NaN;
                        if (w(t)) {
                            var e = 'function' == typeof t.valueOf ? t.valueOf() : t;
                            t = w(e) ? e + '' : e;
                        }
                        if ('string' != typeof t) return 0 === t ? t : +t;
                        t = Jr(t);
                        var o = Xr.test(t);
                        return o || Zr.test(t) ? Qr(t.slice(2), o ? 2 : 8) : Yr.test(t) ? NaN : +t;
                    },
                    es = Math.max,
                    os = Math.min;
                var is = function (t, e, o) {
                    var i,
                        n,
                        r,
                        s,
                        a,
                        l,
                        c = 0,
                        d = !1,
                        h = !1,
                        u = !0;
                    if ('function' != typeof t) throw new TypeError('Expected a function');
                    function f(e) {
                        var o = i,
                            r = n;
                        return (i = n = void 0), (c = e), (s = t.apply(r, o));
                    }
                    function m(t) {
                        return (c = t), (a = setTimeout(p, e)), d ? f(t) : s;
                    }
                    function g(t) {
                        var o = t - l;
                        return void 0 === l || o >= e || o < 0 || (h && t - c >= r);
                    }
                    function p() {
                        var t = Ur();
                        if (g(t)) return b(t);
                        a = setTimeout(
                            p,
                            (function (t) {
                                var o = e - (t - l);
                                return h ? os(o, r - (t - c)) : o;
                            })(t),
                        );
                    }
                    function b(t) {
                        return (a = void 0), u && i ? f(t) : ((i = n = void 0), s);
                    }
                    function k() {
                        var t = Ur(),
                            o = g(t);
                        if (((i = arguments), (n = this), (l = t), o)) {
                            if (void 0 === a) return m(l);
                            if (h) return clearTimeout(a), (a = setTimeout(p, e)), f(l);
                        }
                        return void 0 === a && (a = setTimeout(p, e)), s;
                    }
                    return (
                        (e = ts(e) || 0),
                        w(o) &&
                            ((d = !!o.leading),
                            (r = (h = 'maxWait' in o) ? es(ts(o.maxWait) || 0, e) : r),
                            (u = 'trailing' in o ? !!o.trailing : u)),
                        (k.cancel = function () {
                            void 0 !== a && clearTimeout(a), (c = 0), (i = l = n = a = void 0);
                        }),
                        (k.flush = function () {
                            return void 0 === a ? s : b(Ur());
                        }),
                        k
                    );
                };
                class ns extends yr {
                    constructor(t) {
                        super(t),
                            (this._fireSelectionChangeDoneDebounced = is(
                                (t) => this.document.fire('selectionChangeDone', t),
                                200,
                            ));
                    }
                    observe() {
                        const t = this.document;
                        t.on(
                            'keydown',
                            (e, o) => {
                                t.selection.isFake &&
                                    Tn(o.keyCode) &&
                                    this.isEnabled &&
                                    (o.preventDefault(), this._handleSelectionMove(o.keyCode));
                            },
                            { priority: 'lowest' },
                        );
                    }
                    destroy() {
                        super.destroy(), this._fireSelectionChangeDoneDebounced.cancel();
                    }
                    _handleSelectionMove(t) {
                        const e = this.document.selection,
                            o = new cn(e.getRanges(), { backward: e.isBackward, fake: !1 });
                        (t != vn.arrowleft && t != vn.arrowup) || o.setTo(o.getFirstPosition()),
                            (t != vn.arrowright && t != vn.arrowdown) || o.setTo(o.getLastPosition());
                        const i = { oldSelection: e, newSelection: o, domSelection: null };
                        this.document.fire('selectionChange', i), this._fireSelectionChangeDoneDebounced(i);
                    }
                }
                class rs extends yr {
                    constructor(t) {
                        super(t),
                            (this.mutationObserver = t.getObserver(Hr)),
                            (this.selection = this.document.selection),
                            (this.domConverter = t.domConverter),
                            (this._documents = new WeakSet()),
                            (this._fireSelectionChangeDoneDebounced = is(
                                (t) => this.document.fire('selectionChangeDone', t),
                                200,
                            )),
                            (this._clearInfiniteLoopInterval = setInterval(() => this._clearInfiniteLoop(), 1e3)),
                            (this._loopbackCounter = 0);
                    }
                    observe(t) {
                        const e = t.ownerDocument;
                        this._documents.has(e) ||
                            (this.listenTo(e, 'selectionchange', (t, o) => {
                                this._handleSelectionChange(o, e);
                            }),
                            this._documents.add(e));
                    }
                    destroy() {
                        super.destroy(),
                            clearInterval(this._clearInfiniteLoopInterval),
                            this._fireSelectionChangeDoneDebounced.cancel();
                    }
                    _handleSelectionChange(t, e) {
                        if (!this.isEnabled) return;
                        const o = e.defaultView.getSelection();
                        if (this.checkShouldIgnoreEventFromTarget(o.anchorNode)) return;
                        this.mutationObserver.flush();
                        const i = this.domConverter.domSelectionToView(o);
                        if (0 != i.rangeCount) {
                            if (
                                ((this.view.hasDomSelection = !0),
                                !(
                                    (this.selection.isEqual(i) && this.domConverter.isDomSelectionCorrect(o)) ||
                                    ++this._loopbackCounter > 60
                                ))
                            )
                                if (this.selection.isSimilar(i)) this.view.forceRender();
                                else {
                                    const t = { oldSelection: this.selection, newSelection: i, domSelection: o };
                                    this.document.fire('selectionChange', t), this._fireSelectionChangeDoneDebounced(t);
                                }
                        } else this.view.hasDomSelection = !1;
                    }
                    _clearInfiniteLoop() {
                        this._loopbackCounter = 0;
                    }
                }
                class ss extends Wr {
                    constructor(t) {
                        super(t), (this.domEventType = ['focus', 'blur']), (this.useCapture = !0);
                        const e = this.document;
                        e.on('focus', () => {
                            (e.isFocused = !0), (this._renderTimeoutId = setTimeout(() => t.forceRender(), 50));
                        }),
                            e.on('blur', (o, i) => {
                                const n = e.selection.editableElement;
                                (null !== n && n !== i.target) || ((e.isFocused = !1), t.forceRender());
                            });
                    }
                    onDomEvent(t) {
                        this.fire(t.type, t);
                    }
                    destroy() {
                        this._renderTimeoutId && clearTimeout(this._renderTimeoutId), super.destroy();
                    }
                }
                class as extends Wr {
                    constructor(t) {
                        super(t), (this.domEventType = ['compositionstart', 'compositionupdate', 'compositionend']);
                        const e = this.document;
                        e.on('compositionstart', () => {
                            e.isComposing = !0;
                        }),
                            e.on('compositionend', () => {
                                e.isComposing = !1;
                            });
                    }
                    onDomEvent(t) {
                        this.fire(t.type, t);
                    }
                }
                class ls extends Wr {
                    constructor(t) {
                        super(t), (this.domEventType = ['beforeinput']);
                    }
                    onDomEvent(t) {
                        this.fire(t.type, t);
                    }
                }
                function cs(t) {
                    return '[object Range]' == Object.prototype.toString.apply(t);
                }
                function ds(t) {
                    const e = t.ownerDocument.defaultView.getComputedStyle(t);
                    return {
                        top: parseInt(e.borderTopWidth, 10),
                        right: parseInt(e.borderRightWidth, 10),
                        bottom: parseInt(e.borderBottomWidth, 10),
                        left: parseInt(e.borderLeftWidth, 10),
                    };
                }
                const hs = ['top', 'right', 'bottom', 'left', 'width', 'height'];
                class us {
                    constructor(t) {
                        const e = cs(t);
                        if (
                            (Object.defineProperty(this, '_source', {
                                value: t._source || t,
                                writable: !0,
                                enumerable: !1,
                            }),
                            Uo(t) || e)
                        )
                            if (e) {
                                const e = us.getDomRangeRects(t);
                                fs(this, us.getBoundingRect(e));
                            } else fs(this, t.getBoundingClientRect());
                        else if (wr(t)) {
                            const { innerWidth: e, innerHeight: o } = t;
                            fs(this, { top: 0, right: e, bottom: o, left: 0, width: e, height: o });
                        } else fs(this, t);
                    }
                    clone() {
                        return new us(this);
                    }
                    moveTo(t, e) {
                        return (
                            (this.top = e),
                            (this.right = t + this.width),
                            (this.bottom = e + this.height),
                            (this.left = t),
                            this
                        );
                    }
                    moveBy(t, e) {
                        return (this.top += e), (this.right += t), (this.left += t), (this.bottom += e), this;
                    }
                    getIntersection(t) {
                        const e = {
                            top: Math.max(this.top, t.top),
                            right: Math.min(this.right, t.right),
                            bottom: Math.min(this.bottom, t.bottom),
                            left: Math.max(this.left, t.left),
                        };
                        return (
                            (e.width = e.right - e.left),
                            (e.height = e.bottom - e.top),
                            e.width < 0 || e.height < 0 ? null : new us(e)
                        );
                    }
                    getIntersectionArea(t) {
                        const e = this.getIntersection(t);
                        return e ? e.getArea() : 0;
                    }
                    getArea() {
                        return this.width * this.height;
                    }
                    getVisible() {
                        const t = this._source;
                        let e = this.clone();
                        if (!ms(t)) {
                            let o = t.parentNode || t.commonAncestorContainer;
                            for (; o && !ms(o); ) {
                                const t = new us(o),
                                    i = e.getIntersection(t);
                                if (!i) return null;
                                i.getArea() < e.getArea() && (e = i), (o = o.parentNode);
                            }
                        }
                        return e;
                    }
                    isEqual(t) {
                        for (const e of hs) if (this[e] !== t[e]) return !1;
                        return !0;
                    }
                    contains(t) {
                        const e = this.getIntersection(t);
                        return !(!e || !e.isEqual(t));
                    }
                    excludeScrollbarsAndBorders() {
                        const t = this._source;
                        let e, o, i;
                        if (wr(t))
                            (e = t.innerWidth - t.document.documentElement.clientWidth),
                                (o = t.innerHeight - t.document.documentElement.clientHeight),
                                (i = t.getComputedStyle(t.document.documentElement).direction);
                        else {
                            const n = ds(this._source);
                            (e = t.offsetWidth - t.clientWidth - n.left - n.right),
                                (o = t.offsetHeight - t.clientHeight - n.top - n.bottom),
                                (i = t.ownerDocument.defaultView.getComputedStyle(t).direction),
                                (this.left += n.left),
                                (this.top += n.top),
                                (this.right -= n.right),
                                (this.bottom -= n.bottom),
                                (this.width = this.right - this.left),
                                (this.height = this.bottom - this.top);
                        }
                        return (
                            (this.width -= e),
                            'ltr' === i ? (this.right -= e) : (this.left += e),
                            (this.height -= o),
                            (this.bottom -= o),
                            this
                        );
                    }
                    static getDomRangeRects(t) {
                        const e = [],
                            o = Array.from(t.getClientRects());
                        if (o.length) for (const t of o) e.push(new us(t));
                        else {
                            let o = t.startContainer;
                            Un(o) && (o = o.parentNode);
                            const i = new us(o.getBoundingClientRect());
                            (i.right = i.left), (i.width = 0), e.push(i);
                        }
                        return e;
                    }
                    static getBoundingRect(t) {
                        const e = {
                            left: Number.POSITIVE_INFINITY,
                            top: Number.POSITIVE_INFINITY,
                            right: Number.NEGATIVE_INFINITY,
                            bottom: Number.NEGATIVE_INFINITY,
                        };
                        let o = 0;
                        for (const i of t)
                            o++,
                                (e.left = Math.min(e.left, i.left)),
                                (e.top = Math.min(e.top, i.top)),
                                (e.right = Math.max(e.right, i.right)),
                                (e.bottom = Math.max(e.bottom, i.bottom));
                        return 0 == o ? null : ((e.width = e.right - e.left), (e.height = e.bottom - e.top), new us(e));
                    }
                }
                function fs(t, e) {
                    for (const o of hs) t[o] = e[o];
                }
                function ms(t) {
                    return !!Uo(t) && t === t.ownerDocument.body;
                }
                function gs({ target: t, viewportOffset: e = 0 }) {
                    const o = ys(t);
                    let i = o,
                        n = null;
                    for (; i; ) {
                        let r;
                        (r = xs(i == o ? t : n)), bs(r, () => Cs(t, i));
                        const s = Cs(t, i);
                        if ((ps(i, s, e), i.parent != i)) {
                            if (((n = i.frameElement), (i = i.parent), !n)) return;
                        } else i = null;
                    }
                }
                function ps(t, e, o) {
                    const i = e.clone().moveBy(0, o),
                        n = e.clone().moveBy(0, -o),
                        r = new us(t).excludeScrollbarsAndBorders();
                    if (![n, i].every((t) => r.contains(t))) {
                        let { scrollX: s, scrollY: a } = t;
                        ks(n, r) ? (a -= r.top - e.top + o) : ws(i, r) && (a += e.bottom - r.bottom + o),
                            _s(e, r) ? (s -= r.left - e.left + o) : vs(e, r) && (s += e.right - r.right + o),
                            t.scrollTo(s, a);
                    }
                }
                function bs(t, e) {
                    const o = ys(t);
                    let i, n;
                    for (; t != o.document.body; )
                        (n = e()),
                            (i = new us(t).excludeScrollbarsAndBorders()),
                            i.contains(n) ||
                                (ks(n, i)
                                    ? (t.scrollTop -= i.top - n.top)
                                    : ws(n, i) && (t.scrollTop += n.bottom - i.bottom),
                                _s(n, i)
                                    ? (t.scrollLeft -= i.left - n.left)
                                    : vs(n, i) && (t.scrollLeft += n.right - i.right)),
                            (t = t.parentNode);
                }
                function ws(t, e) {
                    return t.bottom > e.bottom;
                }
                function ks(t, e) {
                    return t.top < e.top;
                }
                function _s(t, e) {
                    return t.left < e.left;
                }
                function vs(t, e) {
                    return t.right > e.right;
                }
                function ys(t) {
                    return cs(t) ? t.startContainer.ownerDocument.defaultView : t.ownerDocument.defaultView;
                }
                function xs(t) {
                    if (cs(t)) {
                        let e = t.commonAncestorContainer;
                        return Un(e) && (e = e.parentNode), e;
                    }
                    return t.parentNode;
                }
                function Cs(t, e) {
                    const o = ys(t),
                        i = new us(t);
                    if (o === e) return i;
                    {
                        let t = o;
                        for (; t != e; ) {
                            const e = t.frameElement,
                                o = new us(e).excludeScrollbarsAndBorders();
                            i.moveBy(o.left, o.top), (t = t.parent);
                        }
                    }
                    return i;
                }
                Object.assign(
                    {},
                    {
                        scrollViewportToShowTarget: gs,
                        scrollAncestorsToShowTarget: function (t) {
                            bs(xs(t), () => new us(t));
                        },
                    },
                );
                class As {
                    constructor(t) {
                        (this.document = new hn(t)),
                            (this.domConverter = new mr(this.document)),
                            (this.domRoots = new Map()),
                            this.set('isRenderingInProgress', !1),
                            this.set('hasDomSelection', !1),
                            (this._renderer = new sr(this.domConverter, this.document.selection)),
                            this._renderer.bind('isFocused').to(this.document),
                            (this._initialDomRootAttributes = new WeakMap()),
                            (this._observers = new Map()),
                            (this._ongoingChange = !1),
                            (this._postFixersInProgress = !1),
                            (this._renderingDisabled = !1),
                            (this._hasChangedSinceTheLastRendering = !1),
                            (this._writer = new Mn(this.document)),
                            this.addObserver(Hr),
                            this.addObserver(rs),
                            this.addObserver(ss),
                            this.addObserver(qr),
                            this.addObserver(ns),
                            this.addObserver(as),
                            wn.isAndroid && this.addObserver(ls),
                            this.document.on('keydown', Zn),
                            Rn(this),
                            this.on('render', () => {
                                this._render(),
                                    this.document.fire('layoutChanged'),
                                    (this._hasChangedSinceTheLastRendering = !1);
                            }),
                            this.listenTo(this.document.selection, 'change', () => {
                                this._hasChangedSinceTheLastRendering = !0;
                            });
                    }
                    attachDomRoot(t, e = 'main') {
                        const o = this.document.getRoot(e);
                        o._name = t.tagName.toLowerCase();
                        const i = {};
                        for (const { name: e, value: n } of Array.from(t.attributes))
                            (i[e] = n),
                                'class' === e
                                    ? this._writer.addClass(n.split(' '), o)
                                    : this._writer.setAttribute(e, n, o);
                        this._initialDomRootAttributes.set(t, i);
                        const n = () => {
                            this._writer.setAttribute('contenteditable', !o.isReadOnly, o),
                                o.isReadOnly
                                    ? this._writer.addClass('ck-read-only', o)
                                    : this._writer.removeClass('ck-read-only', o);
                        };
                        n(),
                            this.domRoots.set(e, t),
                            this.domConverter.bindElements(t, o),
                            this._renderer.markToSync('children', o),
                            this._renderer.markToSync('attributes', o),
                            this._renderer.domDocuments.add(t.ownerDocument),
                            o.on('change:children', (t, e) => this._renderer.markToSync('children', e)),
                            o.on('change:attributes', (t, e) => this._renderer.markToSync('attributes', e)),
                            o.on('change:text', (t, e) => this._renderer.markToSync('text', e)),
                            o.on('change:isReadOnly', () => this.change(n)),
                            o.on('change', () => {
                                this._hasChangedSinceTheLastRendering = !0;
                            });
                        for (const o of this._observers.values()) o.observe(t, e);
                    }
                    detachDomRoot(t) {
                        const e = this.domRoots.get(t);
                        Array.from(e.attributes).forEach(({ name: t }) => e.removeAttribute(t));
                        const o = this._initialDomRootAttributes.get(e);
                        for (const t in o) e.setAttribute(t, o[t]);
                        this.domRoots.delete(t), this.domConverter.unbindDomElement(e);
                    }
                    getDomRoot(t = 'main') {
                        return this.domRoots.get(t);
                    }
                    addObserver(t) {
                        let e = this._observers.get(t);
                        if (e) return e;
                        (e = new t(this)), this._observers.set(t, e);
                        for (const [t, o] of this.domRoots) e.observe(o, t);
                        return e.enable(), e;
                    }
                    getObserver(t) {
                        return this._observers.get(t);
                    }
                    disableObservers() {
                        for (const t of this._observers.values()) t.disable();
                    }
                    enableObservers() {
                        for (const t of this._observers.values()) t.enable();
                    }
                    scrollToTheSelection() {
                        const t = this.document.selection.getFirstRange();
                        t && gs({ target: this.domConverter.viewRangeToDom(t), viewportOffset: 20 });
                    }
                    focus() {
                        if (!this.document.isFocused) {
                            const t = this.document.selection.editableElement;
                            t && (this.domConverter.focus(t), this.forceRender());
                        }
                    }
                    change(t) {
                        if (this.isRenderingInProgress || this._postFixersInProgress)
                            throw new l.a('cannot-change-view-tree', this);
                        try {
                            if (this._ongoingChange) return t(this._writer);
                            this._ongoingChange = !0;
                            const e = t(this._writer);
                            return (
                                (this._ongoingChange = !1),
                                !this._renderingDisabled &&
                                    this._hasChangedSinceTheLastRendering &&
                                    ((this._postFixersInProgress = !0),
                                    this.document._callPostFixers(this._writer),
                                    (this._postFixersInProgress = !1),
                                    this.fire('render')),
                                e
                            );
                        } catch (t) {
                            l.a.rethrowUnexpectedError(t, this);
                        }
                    }
                    forceRender() {
                        (this._hasChangedSinceTheLastRendering = !0), this.change(() => {});
                    }
                    destroy() {
                        for (const t of this._observers.values()) t.destroy();
                        this.document.destroy(), this.stopListening();
                    }
                    createPositionAt(t, e) {
                        return rn._createAt(t, e);
                    }
                    createPositionAfter(t) {
                        return rn._createAfter(t);
                    }
                    createPositionBefore(t) {
                        return rn._createBefore(t);
                    }
                    createRange(t, e) {
                        return new sn(t, e);
                    }
                    createRangeOn(t) {
                        return sn._createOn(t);
                    }
                    createRangeIn(t) {
                        return sn._createIn(t);
                    }
                    createSelection(t, e, o) {
                        return new cn(t, e, o);
                    }
                    _disableRendering(t) {
                        (this._renderingDisabled = t), 0 == t && this.change(() => {});
                    }
                    _render() {
                        (this.isRenderingInProgress = !0),
                            this.disableObservers(),
                            this._renderer.render(),
                            this.enableObservers(),
                            (this.isRenderingInProgress = !1);
                    }
                }
                Kt(As, Ht);
                class Ts {
                    constructor(t) {
                        (this.parent = null), (this._attrs = di(t));
                    }
                    get index() {
                        let t;
                        if (!this.parent) return null;
                        if (null === (t = this.parent.getChildIndex(this)))
                            throw new l.a('model-node-not-found-in-parent', this);
                        return t;
                    }
                    get startOffset() {
                        let t;
                        if (!this.parent) return null;
                        if (null === (t = this.parent.getChildStartOffset(this)))
                            throw new l.a('model-node-not-found-in-parent', this);
                        return t;
                    }
                    get offsetSize() {
                        return 1;
                    }
                    get endOffset() {
                        return this.parent ? this.startOffset + this.offsetSize : null;
                    }
                    get nextSibling() {
                        const t = this.index;
                        return (null !== t && this.parent.getChild(t + 1)) || null;
                    }
                    get previousSibling() {
                        const t = this.index;
                        return (null !== t && this.parent.getChild(t - 1)) || null;
                    }
                    get root() {
                        let t = this;
                        for (; t.parent; ) t = t.parent;
                        return t;
                    }
                    isAttached() {
                        return this.root.is('rootElement');
                    }
                    getPath() {
                        const t = [];
                        let e = this;
                        for (; e.parent; ) t.unshift(e.startOffset), (e = e.parent);
                        return t;
                    }
                    getAncestors(t = { includeSelf: !1, parentFirst: !1 }) {
                        const e = [];
                        let o = t.includeSelf ? this : this.parent;
                        for (; o; ) e[t.parentFirst ? 'push' : 'unshift'](o), (o = o.parent);
                        return e;
                    }
                    getCommonAncestor(t, e = {}) {
                        const o = this.getAncestors(e),
                            i = t.getAncestors(e);
                        let n = 0;
                        for (; o[n] == i[n] && o[n]; ) n++;
                        return 0 === n ? null : o[n - 1];
                    }
                    isBefore(t) {
                        if (this == t) return !1;
                        if (this.root !== t.root) return !1;
                        const e = this.getPath(),
                            o = t.getPath(),
                            i = ri(e, o);
                        switch (i) {
                            case 'prefix':
                                return !0;
                            case 'extension':
                                return !1;
                            default:
                                return e[i] < o[i];
                        }
                    }
                    isAfter(t) {
                        return this != t && this.root === t.root && !this.isBefore(t);
                    }
                    hasAttribute(t) {
                        return this._attrs.has(t);
                    }
                    getAttribute(t) {
                        return this._attrs.get(t);
                    }
                    getAttributes() {
                        return this._attrs.entries();
                    }
                    getAttributeKeys() {
                        return this._attrs.keys();
                    }
                    toJSON() {
                        const t = {};
                        return (
                            this._attrs.size &&
                                (t.attributes = Array.from(this._attrs).reduce((t, e) => ((t[e[0]] = e[1]), t), {})),
                            t
                        );
                    }
                    is(t) {
                        return 'node' === t || 'model:node' === t;
                    }
                    _clone() {
                        return new Ts(this._attrs);
                    }
                    _remove() {
                        this.parent._removeChildren(this.index);
                    }
                    _setAttribute(t, e) {
                        this._attrs.set(t, e);
                    }
                    _setAttributesTo(t) {
                        this._attrs = di(t);
                    }
                    _removeAttribute(t) {
                        return this._attrs.delete(t);
                    }
                    _clearAttributes() {
                        this._attrs.clear();
                    }
                }
                class Ps extends Ts {
                    constructor(t, e) {
                        super(e), (this._data = t || '');
                    }
                    get offsetSize() {
                        return this.data.length;
                    }
                    get data() {
                        return this._data;
                    }
                    is(t) {
                        return (
                            '$text' === t ||
                            'model:$text' === t ||
                            'text' === t ||
                            'model:text' === t ||
                            'node' === t ||
                            'model:node' === t
                        );
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.data = this.data), t;
                    }
                    _clone() {
                        return new Ps(this.data, this.getAttributes());
                    }
                    static fromJSON(t) {
                        return new Ps(t.data, t.attributes);
                    }
                }
                class Ss {
                    constructor(t, e, o) {
                        if (((this.textNode = t), e < 0 || e > t.offsetSize))
                            throw new l.a('model-textproxy-wrong-offsetintext', this);
                        if (o < 0 || e + o > t.offsetSize) throw new l.a('model-textproxy-wrong-length', this);
                        (this.data = t.data.substring(e, e + o)), (this.offsetInText = e);
                    }
                    get startOffset() {
                        return null !== this.textNode.startOffset
                            ? this.textNode.startOffset + this.offsetInText
                            : null;
                    }
                    get offsetSize() {
                        return this.data.length;
                    }
                    get endOffset() {
                        return null !== this.startOffset ? this.startOffset + this.offsetSize : null;
                    }
                    get isPartial() {
                        return this.offsetSize !== this.textNode.offsetSize;
                    }
                    get parent() {
                        return this.textNode.parent;
                    }
                    get root() {
                        return this.textNode.root;
                    }
                    is(t) {
                        return (
                            '$textProxy' === t ||
                            'model:$textProxy' === t ||
                            'textProxy' === t ||
                            'model:textProxy' === t
                        );
                    }
                    getPath() {
                        const t = this.textNode.getPath();
                        return t.length > 0 && (t[t.length - 1] += this.offsetInText), t;
                    }
                    getAncestors(t = { includeSelf: !1, parentFirst: !1 }) {
                        const e = [];
                        let o = t.includeSelf ? this : this.parent;
                        for (; o; ) e[t.parentFirst ? 'push' : 'unshift'](o), (o = o.parent);
                        return e;
                    }
                    hasAttribute(t) {
                        return this.textNode.hasAttribute(t);
                    }
                    getAttribute(t) {
                        return this.textNode.getAttribute(t);
                    }
                    getAttributes() {
                        return this.textNode.getAttributes();
                    }
                    getAttributeKeys() {
                        return this.textNode.getAttributeKeys();
                    }
                }
                class Es {
                    constructor(t) {
                        (this._nodes = []), t && this._insertNodes(0, t);
                    }
                    [Symbol.iterator]() {
                        return this._nodes[Symbol.iterator]();
                    }
                    get length() {
                        return this._nodes.length;
                    }
                    get maxOffset() {
                        return this._nodes.reduce((t, e) => t + e.offsetSize, 0);
                    }
                    getNode(t) {
                        return this._nodes[t] || null;
                    }
                    getNodeIndex(t) {
                        const e = this._nodes.indexOf(t);
                        return -1 == e ? null : e;
                    }
                    getNodeStartOffset(t) {
                        const e = this.getNodeIndex(t);
                        return null === e ? null : this._nodes.slice(0, e).reduce((t, e) => t + e.offsetSize, 0);
                    }
                    indexToOffset(t) {
                        if (t == this._nodes.length) return this.maxOffset;
                        const e = this._nodes[t];
                        if (!e) throw new l.a('model-nodelist-index-out-of-bounds', this);
                        return this.getNodeStartOffset(e);
                    }
                    offsetToIndex(t) {
                        let e = 0;
                        for (const o of this._nodes) {
                            if (t >= e && t < e + o.offsetSize) return this.getNodeIndex(o);
                            e += o.offsetSize;
                        }
                        if (e != t)
                            throw new l.a('model-nodelist-offset-out-of-bounds', this, { offset: t, nodeList: this });
                        return this.length;
                    }
                    _insertNodes(t, e) {
                        for (const t of e)
                            if (!(t instanceof Ts)) throw new l.a('model-nodelist-insertnodes-not-node', this);
                        this._nodes.splice(t, 0, ...e);
                    }
                    _removeNodes(t, e = 1) {
                        return this._nodes.splice(t, e);
                    }
                    toJSON() {
                        return this._nodes.map((t) => t.toJSON());
                    }
                }
                class Rs extends Ts {
                    constructor(t, e, o) {
                        super(e), (this.name = t), (this._children = new Es()), o && this._insertChild(0, o);
                    }
                    get childCount() {
                        return this._children.length;
                    }
                    get maxOffset() {
                        return this._children.maxOffset;
                    }
                    get isEmpty() {
                        return 0 === this.childCount;
                    }
                    is(t, e = null) {
                        return e
                            ? e === this.name && ('element' === t || 'model:element' === t)
                            : 'element' === t || 'model:element' === t || 'node' === t || 'model:node' === t;
                    }
                    getChild(t) {
                        return this._children.getNode(t);
                    }
                    getChildren() {
                        return this._children[Symbol.iterator]();
                    }
                    getChildIndex(t) {
                        return this._children.getNodeIndex(t);
                    }
                    getChildStartOffset(t) {
                        return this._children.getNodeStartOffset(t);
                    }
                    offsetToIndex(t) {
                        return this._children.offsetToIndex(t);
                    }
                    getNodeByPath(t) {
                        let e = this;
                        for (const o of t) e = e.getChild(e.offsetToIndex(o));
                        return e;
                    }
                    findAncestor(t, e = { includeSelf: !1 }) {
                        let o = e.includeSelf ? this : this.parent;
                        for (; o; ) {
                            if (o.name === t) return o;
                            o = o.parent;
                        }
                        return null;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        if (((t.name = this.name), this._children.length > 0)) {
                            t.children = [];
                            for (const e of this._children) t.children.push(e.toJSON());
                        }
                        return t;
                    }
                    _clone(t = !1) {
                        const e = t ? Array.from(this._children).map((t) => t._clone(!0)) : null;
                        return new Rs(this.name, this.getAttributes(), e);
                    }
                    _appendChild(t) {
                        this._insertChild(this.childCount, t);
                    }
                    _insertChild(t, e) {
                        const o = (function (t) {
                            if ('string' == typeof t) return [new Ps(t)];
                            Jo(t) || (t = [t]);
                            return Array.from(t).map((t) =>
                                'string' == typeof t
                                    ? new Ps(t)
                                    : t instanceof Ss
                                    ? new Ps(t.data, t.getAttributes())
                                    : t,
                            );
                        })(e);
                        for (const t of o) null !== t.parent && t._remove(), (t.parent = this);
                        this._children._insertNodes(t, o);
                    }
                    _removeChildren(t, e = 1) {
                        const o = this._children._removeNodes(t, e);
                        for (const t of o) t.parent = null;
                        return o;
                    }
                    static fromJSON(t) {
                        let e = null;
                        if (t.children) {
                            e = [];
                            for (const o of t.children) o.name ? e.push(Rs.fromJSON(o)) : e.push(Ps.fromJSON(o));
                        }
                        return new Rs(t.name, t.attributes, e);
                    }
                }
                class Is {
                    constructor(t = {}) {
                        if (!t.boundaries && !t.startPosition)
                            throw new l.a('model-tree-walker-no-start-position', null);
                        const e = t.direction || 'forward';
                        if ('forward' != e && 'backward' != e)
                            throw new l.a('model-tree-walker-unknown-direction', t, { direction: e });
                        (this.direction = e),
                            (this.boundaries = t.boundaries || null),
                            t.startPosition
                                ? (this.position = t.startPosition.clone())
                                : (this.position = Os._createAt(
                                      this.boundaries['backward' == this.direction ? 'end' : 'start'],
                                  )),
                            (this.position.stickiness = 'toNone'),
                            (this.singleCharacters = !!t.singleCharacters),
                            (this.shallow = !!t.shallow),
                            (this.ignoreElementEnd = !!t.ignoreElementEnd),
                            (this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null),
                            (this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null),
                            (this._visitedParent = this.position.parent);
                    }
                    [Symbol.iterator]() {
                        return this;
                    }
                    skip(t) {
                        let e, o, i, n;
                        do {
                            (i = this.position), (n = this._visitedParent), ({ done: e, value: o } = this.next());
                        } while (!e && t(o));
                        e || ((this.position = i), (this._visitedParent = n));
                    }
                    next() {
                        return 'forward' == this.direction ? this._next() : this._previous();
                    }
                    _next() {
                        const t = this.position,
                            e = this.position.clone(),
                            o = this._visitedParent;
                        if (null === o.parent && e.offset === o.maxOffset) return { done: !0 };
                        if (o === this._boundaryEndParent && e.offset == this.boundaries.end.offset)
                            return { done: !0 };
                        const i = e.parent,
                            n = zs(e, i),
                            r = n || Ms(e, i, n);
                        if (r instanceof Rs)
                            return (
                                this.shallow ? e.offset++ : (e.path.push(0), (this._visitedParent = r)),
                                (this.position = e),
                                Vs('elementStart', r, t, e, 1)
                            );
                        if (r instanceof Ps) {
                            let i;
                            if (this.singleCharacters) i = 1;
                            else {
                                let t = r.endOffset;
                                this._boundaryEndParent == o &&
                                    this.boundaries.end.offset < t &&
                                    (t = this.boundaries.end.offset),
                                    (i = t - e.offset);
                            }
                            const n = e.offset - r.startOffset,
                                s = new Ss(r, n, i);
                            return (e.offset += i), (this.position = e), Vs('text', s, t, e, i);
                        }
                        return (
                            e.path.pop(),
                            e.offset++,
                            (this.position = e),
                            (this._visitedParent = o.parent),
                            this.ignoreElementEnd ? this._next() : Vs('elementEnd', o, t, e)
                        );
                    }
                    _previous() {
                        const t = this.position,
                            e = this.position.clone(),
                            o = this._visitedParent;
                        if (null === o.parent && 0 === e.offset) return { done: !0 };
                        if (o == this._boundaryStartParent && e.offset == this.boundaries.start.offset)
                            return { done: !0 };
                        const i = e.parent,
                            n = zs(e, i),
                            r = n || Ns(e, i, n);
                        if (r instanceof Rs)
                            return (
                                e.offset--,
                                this.shallow
                                    ? ((this.position = e), Vs('elementStart', r, t, e, 1))
                                    : (e.path.push(r.maxOffset),
                                      (this.position = e),
                                      (this._visitedParent = r),
                                      this.ignoreElementEnd ? this._previous() : Vs('elementEnd', r, t, e))
                            );
                        if (r instanceof Ps) {
                            let i;
                            if (this.singleCharacters) i = 1;
                            else {
                                let t = r.startOffset;
                                this._boundaryStartParent == o &&
                                    this.boundaries.start.offset > t &&
                                    (t = this.boundaries.start.offset),
                                    (i = e.offset - t);
                            }
                            const n = e.offset - r.startOffset,
                                s = new Ss(r, n - i, i);
                            return (e.offset -= i), (this.position = e), Vs('text', s, t, e, i);
                        }
                        return (
                            e.path.pop(),
                            (this.position = e),
                            (this._visitedParent = o.parent),
                            Vs('elementStart', o, t, e, 1)
                        );
                    }
                }
                function Vs(t, e, o, i, n) {
                    return { done: !1, value: { type: t, item: e, previousPosition: o, nextPosition: i, length: n } };
                }
                class Os {
                    constructor(t, e, o = 'toNone') {
                        if (!t.is('element') && !t.is('documentFragment'))
                            throw new l.a('model-position-root-invalid', t);
                        if (!(e instanceof Array) || 0 === e.length)
                            throw new l.a('model-position-path-incorrect-format', t, { path: e });
                        t.is('rootElement') ? (e = e.slice()) : ((e = [...t.getPath(), ...e]), (t = t.root)),
                            (this.root = t),
                            (this.path = e),
                            (this.stickiness = o);
                    }
                    get offset() {
                        return this.path[this.path.length - 1];
                    }
                    set offset(t) {
                        this.path[this.path.length - 1] = t;
                    }
                    get parent() {
                        let t = this.root;
                        for (let e = 0; e < this.path.length - 1; e++)
                            if (((t = t.getChild(t.offsetToIndex(this.path[e]))), !t))
                                throw new l.a('model-position-path-incorrect', this, { position: this });
                        if (t.is('$text')) throw new l.a('model-position-path-incorrect', this, { position: this });
                        return t;
                    }
                    get index() {
                        return this.parent.offsetToIndex(this.offset);
                    }
                    get textNode() {
                        return zs(this, this.parent);
                    }
                    get nodeAfter() {
                        const t = this.parent;
                        return Ms(this, t, zs(this, t));
                    }
                    get nodeBefore() {
                        const t = this.parent;
                        return Ns(this, t, zs(this, t));
                    }
                    get isAtStart() {
                        return 0 === this.offset;
                    }
                    get isAtEnd() {
                        return this.offset == this.parent.maxOffset;
                    }
                    compareWith(t) {
                        if (this.root != t.root) return 'different';
                        const e = ri(this.path, t.path);
                        switch (e) {
                            case 'same':
                                return 'same';
                            case 'prefix':
                                return 'before';
                            case 'extension':
                                return 'after';
                            default:
                                return this.path[e] < t.path[e] ? 'before' : 'after';
                        }
                    }
                    getLastMatchingPosition(t, e = {}) {
                        e.startPosition = this;
                        const o = new Is(e);
                        return o.skip(t), o.position;
                    }
                    getParentPath() {
                        return this.path.slice(0, -1);
                    }
                    getAncestors() {
                        const t = this.parent;
                        return t.is('documentFragment') ? [t] : t.getAncestors({ includeSelf: !0 });
                    }
                    findAncestor(t) {
                        const e = this.parent;
                        return e.is('element') ? e.findAncestor(t, { includeSelf: !0 }) : null;
                    }
                    getCommonPath(t) {
                        if (this.root != t.root) return [];
                        const e = ri(this.path, t.path),
                            o = 'string' == typeof e ? Math.min(this.path.length, t.path.length) : e;
                        return this.path.slice(0, o);
                    }
                    getCommonAncestor(t) {
                        const e = this.getAncestors(),
                            o = t.getAncestors();
                        let i = 0;
                        for (; e[i] == o[i] && e[i]; ) i++;
                        return 0 === i ? null : e[i - 1];
                    }
                    getShiftedBy(t) {
                        const e = this.clone(),
                            o = e.offset + t;
                        return (e.offset = o < 0 ? 0 : o), e;
                    }
                    isAfter(t) {
                        return 'after' == this.compareWith(t);
                    }
                    isBefore(t) {
                        return 'before' == this.compareWith(t);
                    }
                    isEqual(t) {
                        return 'same' == this.compareWith(t);
                    }
                    isTouching(t) {
                        let e = null,
                            o = null;
                        switch (this.compareWith(t)) {
                            case 'same':
                                return !0;
                            case 'before':
                                (e = Os._createAt(this)), (o = Os._createAt(t));
                                break;
                            case 'after':
                                (e = Os._createAt(t)), (o = Os._createAt(this));
                                break;
                            default:
                                return !1;
                        }
                        let i = e.parent;
                        for (; e.path.length + o.path.length; ) {
                            if (e.isEqual(o)) return !0;
                            if (e.path.length > o.path.length) {
                                if (e.offset !== i.maxOffset) return !1;
                                (e.path = e.path.slice(0, -1)), (i = i.parent), e.offset++;
                            } else {
                                if (0 !== o.offset) return !1;
                                o.path = o.path.slice(0, -1);
                            }
                        }
                    }
                    is(t) {
                        return 'position' === t || 'model:position' === t;
                    }
                    hasSameParentAs(t) {
                        if (this.root !== t.root) return !1;
                        return 'same' == ri(this.getParentPath(), t.getParentPath());
                    }
                    getTransformedByOperation(t) {
                        let e;
                        switch (t.type) {
                            case 'insert':
                                e = this._getTransformedByInsertOperation(t);
                                break;
                            case 'move':
                            case 'remove':
                            case 'reinsert':
                                e = this._getTransformedByMoveOperation(t);
                                break;
                            case 'split':
                                e = this._getTransformedBySplitOperation(t);
                                break;
                            case 'merge':
                                e = this._getTransformedByMergeOperation(t);
                                break;
                            default:
                                e = Os._createAt(this);
                        }
                        return e;
                    }
                    _getTransformedByInsertOperation(t) {
                        return this._getTransformedByInsertion(t.position, t.howMany);
                    }
                    _getTransformedByMoveOperation(t) {
                        return this._getTransformedByMove(t.sourcePosition, t.targetPosition, t.howMany);
                    }
                    _getTransformedBySplitOperation(t) {
                        const e = t.movedRange;
                        return e.containsPosition(this) || (e.start.isEqual(this) && 'toNext' == this.stickiness)
                            ? this._getCombined(t.splitPosition, t.moveTargetPosition)
                            : t.graveyardPosition
                            ? this._getTransformedByMove(t.graveyardPosition, t.insertionPosition, 1)
                            : this._getTransformedByInsertion(t.insertionPosition, 1);
                    }
                    _getTransformedByMergeOperation(t) {
                        const e = t.movedRange;
                        let o;
                        return (
                            e.containsPosition(this) || e.start.isEqual(this)
                                ? ((o = this._getCombined(t.sourcePosition, t.targetPosition)),
                                  t.sourcePosition.isBefore(t.targetPosition) &&
                                      (o = o._getTransformedByDeletion(t.deletionPosition, 1)))
                                : (o = this.isEqual(t.deletionPosition)
                                      ? Os._createAt(t.deletionPosition)
                                      : this._getTransformedByMove(t.deletionPosition, t.graveyardPosition, 1)),
                            o
                        );
                    }
                    _getTransformedByDeletion(t, e) {
                        const o = Os._createAt(this);
                        if (this.root != t.root) return o;
                        if ('same' == ri(t.getParentPath(), this.getParentPath())) {
                            if (t.offset < this.offset) {
                                if (t.offset + e > this.offset) return null;
                                o.offset -= e;
                            }
                        } else if ('prefix' == ri(t.getParentPath(), this.getParentPath())) {
                            const i = t.path.length - 1;
                            if (t.offset <= this.path[i]) {
                                if (t.offset + e > this.path[i]) return null;
                                o.path[i] -= e;
                            }
                        }
                        return o;
                    }
                    _getTransformedByInsertion(t, e) {
                        const o = Os._createAt(this);
                        if (this.root != t.root) return o;
                        if ('same' == ri(t.getParentPath(), this.getParentPath()))
                            (t.offset < this.offset || (t.offset == this.offset && 'toPrevious' != this.stickiness)) &&
                                (o.offset += e);
                        else if ('prefix' == ri(t.getParentPath(), this.getParentPath())) {
                            const i = t.path.length - 1;
                            t.offset <= this.path[i] && (o.path[i] += e);
                        }
                        return o;
                    }
                    _getTransformedByMove(t, e, o) {
                        if (((e = e._getTransformedByDeletion(t, o)), t.isEqual(e))) return Os._createAt(this);
                        const i = this._getTransformedByDeletion(t, o);
                        return null === i ||
                            (t.isEqual(this) && 'toNext' == this.stickiness) ||
                            (t.getShiftedBy(o).isEqual(this) && 'toPrevious' == this.stickiness)
                            ? this._getCombined(t, e)
                            : i._getTransformedByInsertion(e, o);
                    }
                    _getCombined(t, e) {
                        const o = t.path.length - 1,
                            i = Os._createAt(e);
                        return (
                            (i.stickiness = this.stickiness),
                            (i.offset = i.offset + this.path[o] - t.offset),
                            (i.path = [...i.path, ...this.path.slice(o + 1)]),
                            i
                        );
                    }
                    toJSON() {
                        return { root: this.root.toJSON(), path: Array.from(this.path), stickiness: this.stickiness };
                    }
                    clone() {
                        return new this.constructor(this.root, this.path, this.stickiness);
                    }
                    static _createAt(t, e, o = 'toNone') {
                        if (t instanceof Os) return new Os(t.root, t.path, t.stickiness);
                        {
                            const i = t;
                            if ('end' == e) e = i.maxOffset;
                            else {
                                if ('before' == e) return this._createBefore(i, o);
                                if ('after' == e) return this._createAfter(i, o);
                                if (0 !== e && !e) throw new l.a('model-createpositionat-offset-required', [this, t]);
                            }
                            if (!i.is('element') && !i.is('documentFragment'))
                                throw new l.a('model-position-parent-incorrect', [this, t]);
                            const n = i.getPath();
                            return n.push(e), new this(i.root, n, o);
                        }
                    }
                    static _createAfter(t, e) {
                        if (!t.parent) throw new l.a('model-position-after-root', [this, t], { root: t });
                        return this._createAt(t.parent, t.endOffset, e);
                    }
                    static _createBefore(t, e) {
                        if (!t.parent) throw new l.a('model-position-before-root', t, { root: t });
                        return this._createAt(t.parent, t.startOffset, e);
                    }
                    static fromJSON(t, e) {
                        if ('$graveyard' === t.root) {
                            const o = new Os(e.graveyard, t.path);
                            return (o.stickiness = t.stickiness), o;
                        }
                        if (!e.getRoot(t.root))
                            throw new l.a('model-position-fromjson-no-root', e, { rootName: t.root });
                        return new Os(e.getRoot(t.root), t.path, t.stickiness);
                    }
                }
                function zs(t, e) {
                    const o = e.getChild(e.offsetToIndex(t.offset));
                    return o && o.is('$text') && o.startOffset < t.offset ? o : null;
                }
                function Ms(t, e, o) {
                    return null !== o ? null : e.getChild(e.offsetToIndex(t.offset));
                }
                function Ns(t, e, o) {
                    return null !== o ? null : e.getChild(e.offsetToIndex(t.offset) - 1);
                }
                class Bs {
                    constructor(t, e = null) {
                        (this.start = Os._createAt(t)),
                            (this.end = e ? Os._createAt(e) : Os._createAt(t)),
                            (this.start.stickiness = this.isCollapsed ? 'toNone' : 'toNext'),
                            (this.end.stickiness = this.isCollapsed ? 'toNone' : 'toPrevious');
                    }
                    *[Symbol.iterator]() {
                        yield* new Is({ boundaries: this, ignoreElementEnd: !0 });
                    }
                    get isCollapsed() {
                        return this.start.isEqual(this.end);
                    }
                    get isFlat() {
                        return 'same' == ri(this.start.getParentPath(), this.end.getParentPath());
                    }
                    get root() {
                        return this.start.root;
                    }
                    containsPosition(t) {
                        return t.isAfter(this.start) && t.isBefore(this.end);
                    }
                    containsRange(t, e = !1) {
                        t.isCollapsed && (e = !1);
                        const o = this.containsPosition(t.start) || (e && this.start.isEqual(t.start)),
                            i = this.containsPosition(t.end) || (e && this.end.isEqual(t.end));
                        return o && i;
                    }
                    containsItem(t) {
                        const e = Os._createBefore(t);
                        return this.containsPosition(e) || this.start.isEqual(e);
                    }
                    is(t) {
                        return 'range' === t || 'model:range' === t;
                    }
                    isEqual(t) {
                        return this.start.isEqual(t.start) && this.end.isEqual(t.end);
                    }
                    isIntersecting(t) {
                        return this.start.isBefore(t.end) && this.end.isAfter(t.start);
                    }
                    getDifference(t) {
                        const e = [];
                        return (
                            this.isIntersecting(t)
                                ? (this.containsPosition(t.start) && e.push(new Bs(this.start, t.start)),
                                  this.containsPosition(t.end) && e.push(new Bs(t.end, this.end)))
                                : e.push(new Bs(this.start, this.end)),
                            e
                        );
                    }
                    getIntersection(t) {
                        if (this.isIntersecting(t)) {
                            let e = this.start,
                                o = this.end;
                            return (
                                this.containsPosition(t.start) && (e = t.start),
                                this.containsPosition(t.end) && (o = t.end),
                                new Bs(e, o)
                            );
                        }
                        return null;
                    }
                    getJoined(t, e = !1) {
                        let o = this.isIntersecting(t);
                        if (
                            (o ||
                                (o = this.start.isBefore(t.start)
                                    ? e
                                        ? this.end.isTouching(t.start)
                                        : this.end.isEqual(t.start)
                                    : e
                                    ? t.end.isTouching(this.start)
                                    : t.end.isEqual(this.start)),
                            !o)
                        )
                            return null;
                        let i = this.start,
                            n = this.end;
                        return t.start.isBefore(i) && (i = t.start), t.end.isAfter(n) && (n = t.end), new Bs(i, n);
                    }
                    getMinimalFlatRanges() {
                        const t = [],
                            e = this.start.getCommonPath(this.end).length,
                            o = Os._createAt(this.start);
                        let i = o.parent;
                        for (; o.path.length > e + 1; ) {
                            const e = i.maxOffset - o.offset;
                            0 !== e && t.push(new Bs(o, o.getShiftedBy(e))),
                                (o.path = o.path.slice(0, -1)),
                                o.offset++,
                                (i = i.parent);
                        }
                        for (; o.path.length <= this.end.path.length; ) {
                            const e = this.end.path[o.path.length - 1],
                                i = e - o.offset;
                            0 !== i && t.push(new Bs(o, o.getShiftedBy(i))), (o.offset = e), o.path.push(0);
                        }
                        return t;
                    }
                    getWalker(t = {}) {
                        return (t.boundaries = this), new Is(t);
                    }
                    *getItems(t = {}) {
                        (t.boundaries = this), (t.ignoreElementEnd = !0);
                        const e = new Is(t);
                        for (const t of e) yield t.item;
                    }
                    *getPositions(t = {}) {
                        t.boundaries = this;
                        const e = new Is(t);
                        yield e.position;
                        for (const t of e) yield t.nextPosition;
                    }
                    getTransformedByOperation(t) {
                        switch (t.type) {
                            case 'insert':
                                return this._getTransformedByInsertOperation(t);
                            case 'move':
                            case 'remove':
                            case 'reinsert':
                                return this._getTransformedByMoveOperation(t);
                            case 'split':
                                return [this._getTransformedBySplitOperation(t)];
                            case 'merge':
                                return [this._getTransformedByMergeOperation(t)];
                        }
                        return [new Bs(this.start, this.end)];
                    }
                    getTransformedByOperations(t) {
                        const e = [new Bs(this.start, this.end)];
                        for (const o of t)
                            for (let t = 0; t < e.length; t++) {
                                const i = e[t].getTransformedByOperation(o);
                                e.splice(t, 1, ...i), (t += i.length - 1);
                            }
                        for (let t = 0; t < e.length; t++) {
                            const o = e[t];
                            for (let i = t + 1; i < e.length; i++) {
                                const t = e[i];
                                (o.containsRange(t) || t.containsRange(o) || o.isEqual(t)) && e.splice(i, 1);
                            }
                        }
                        return e;
                    }
                    getCommonAncestor() {
                        return this.start.getCommonAncestor(this.end);
                    }
                    getContainedElement() {
                        if (this.isCollapsed) return null;
                        const t = this.start.nodeAfter,
                            e = this.end.nodeBefore;
                        return t && t.is('element') && t === e ? t : null;
                    }
                    toJSON() {
                        return { start: this.start.toJSON(), end: this.end.toJSON() };
                    }
                    clone() {
                        return new this.constructor(this.start, this.end);
                    }
                    _getTransformedByInsertOperation(t, e = !1) {
                        return this._getTransformedByInsertion(t.position, t.howMany, e);
                    }
                    _getTransformedByMoveOperation(t, e = !1) {
                        const o = t.sourcePosition,
                            i = t.howMany,
                            n = t.targetPosition;
                        return this._getTransformedByMove(o, n, i, e);
                    }
                    _getTransformedBySplitOperation(t) {
                        const e = this.start._getTransformedBySplitOperation(t);
                        let o = this.end._getTransformedBySplitOperation(t);
                        return (
                            this.end.isEqual(t.insertionPosition) && (o = this.end.getShiftedBy(1)),
                            e.root != o.root && (o = this.end.getShiftedBy(-1)),
                            new Bs(e, o)
                        );
                    }
                    _getTransformedByMergeOperation(t) {
                        if (this.start.isEqual(t.targetPosition) && this.end.isEqual(t.deletionPosition))
                            return new Bs(this.start);
                        let e = this.start._getTransformedByMergeOperation(t),
                            o = this.end._getTransformedByMergeOperation(t);
                        return (
                            e.root != o.root && (o = this.end.getShiftedBy(-1)),
                            e.isAfter(o)
                                ? (t.sourcePosition.isBefore(t.targetPosition)
                                      ? ((e = Os._createAt(o)), (e.offset = 0))
                                      : (t.deletionPosition.isEqual(e) || (o = t.deletionPosition),
                                        (e = t.targetPosition)),
                                  new Bs(e, o))
                                : new Bs(e, o)
                        );
                    }
                    _getTransformedByInsertion(t, e, o = !1) {
                        if (o && this.containsPosition(t))
                            return [
                                new Bs(this.start, t),
                                new Bs(t.getShiftedBy(e), this.end._getTransformedByInsertion(t, e)),
                            ];
                        {
                            const o = new Bs(this.start, this.end);
                            return (
                                (o.start = o.start._getTransformedByInsertion(t, e)),
                                (o.end = o.end._getTransformedByInsertion(t, e)),
                                [o]
                            );
                        }
                    }
                    _getTransformedByMove(t, e, o, i = !1) {
                        if (this.isCollapsed) {
                            const i = this.start._getTransformedByMove(t, e, o);
                            return [new Bs(i)];
                        }
                        const n = Bs._createFromPositionAndShift(t, o),
                            r = e._getTransformedByDeletion(t, o);
                        if (
                            this.containsPosition(e) &&
                            !i &&
                            (n.containsPosition(this.start) || n.containsPosition(this.end))
                        ) {
                            const i = this.start._getTransformedByMove(t, e, o),
                                n = this.end._getTransformedByMove(t, e, o);
                            return [new Bs(i, n)];
                        }
                        let s;
                        const a = this.getDifference(n);
                        let l = null;
                        const c = this.getIntersection(n);
                        if (
                            (1 == a.length
                                ? (l = new Bs(
                                      a[0].start._getTransformedByDeletion(t, o),
                                      a[0].end._getTransformedByDeletion(t, o),
                                  ))
                                : 2 == a.length && (l = new Bs(this.start, this.end._getTransformedByDeletion(t, o))),
                            (s = l ? l._getTransformedByInsertion(r, o, null !== c || i) : []),
                            c)
                        ) {
                            const t = new Bs(c.start._getCombined(n.start, r), c.end._getCombined(n.start, r));
                            2 == s.length ? s.splice(1, 0, t) : s.push(t);
                        }
                        return s;
                    }
                    _getTransformedByDeletion(t, e) {
                        let o = this.start._getTransformedByDeletion(t, e),
                            i = this.end._getTransformedByDeletion(t, e);
                        return null == o && null == i
                            ? null
                            : (null == o && (o = t), null == i && (i = t), new Bs(o, i));
                    }
                    static _createFromPositionAndShift(t, e) {
                        const o = t,
                            i = t.getShiftedBy(e);
                        return e > 0 ? new this(o, i) : new this(i, o);
                    }
                    static _createIn(t) {
                        return new this(Os._createAt(t, 0), Os._createAt(t, t.maxOffset));
                    }
                    static _createOn(t) {
                        return this._createFromPositionAndShift(Os._createBefore(t), t.offsetSize);
                    }
                    static _createFromRanges(t) {
                        if (0 === t.length) throw new l.a('range-create-from-ranges-empty-array', null);
                        if (1 == t.length) return t[0].clone();
                        const e = t[0];
                        t.sort((t, e) => (t.start.isAfter(e.start) ? 1 : -1));
                        const o = t.indexOf(e),
                            i = new this(e.start, e.end);
                        if (o > 0)
                            for (let e = o - 1; t[e].end.isEqual(i.start); e++) i.start = Os._createAt(t[e].start);
                        for (let e = o + 1; e < t.length && t[e].start.isEqual(i.end); e++)
                            i.end = Os._createAt(t[e].end);
                        return i;
                    }
                    static fromJSON(t, e) {
                        return new this(Os.fromJSON(t.start, e), Os.fromJSON(t.end, e));
                    }
                }
                class Fs {
                    constructor() {
                        (this._modelToViewMapping = new WeakMap()),
                            (this._viewToModelMapping = new WeakMap()),
                            (this._viewToModelLengthCallbacks = new Map()),
                            (this._markerNameToElements = new Map()),
                            (this._elementToMarkerNames = new Map()),
                            (this._unboundMarkerNames = new Set()),
                            this.on(
                                'modelToViewPosition',
                                (t, e) => {
                                    if (e.viewPosition) return;
                                    const o = this._modelToViewMapping.get(e.modelPosition.parent);
                                    e.viewPosition = this.findPositionIn(o, e.modelPosition.offset);
                                },
                                { priority: 'low' },
                            ),
                            this.on(
                                'viewToModelPosition',
                                (t, e) => {
                                    if (e.modelPosition) return;
                                    const o = this.findMappedViewAncestor(e.viewPosition),
                                        i = this._viewToModelMapping.get(o),
                                        n = this._toModelOffset(e.viewPosition.parent, e.viewPosition.offset, o);
                                    e.modelPosition = Os._createAt(i, n);
                                },
                                { priority: 'low' },
                            );
                    }
                    bindElements(t, e) {
                        this._modelToViewMapping.set(t, e), this._viewToModelMapping.set(e, t);
                    }
                    unbindViewElement(t) {
                        const e = this.toModelElement(t);
                        if ((this._viewToModelMapping.delete(t), this._elementToMarkerNames.has(t)))
                            for (const e of this._elementToMarkerNames.get(t)) this._unboundMarkerNames.add(e);
                        this._modelToViewMapping.get(e) == t && this._modelToViewMapping.delete(e);
                    }
                    unbindModelElement(t) {
                        const e = this.toViewElement(t);
                        this._modelToViewMapping.delete(t),
                            this._viewToModelMapping.get(e) == t && this._viewToModelMapping.delete(e);
                    }
                    bindElementToMarker(t, e) {
                        const o = this._markerNameToElements.get(e) || new Set();
                        o.add(t);
                        const i = this._elementToMarkerNames.get(t) || new Set();
                        i.add(e), this._markerNameToElements.set(e, o), this._elementToMarkerNames.set(t, i);
                    }
                    unbindElementFromMarkerName(t, e) {
                        const o = this._markerNameToElements.get(e);
                        o && (o.delete(t), 0 == o.size && this._markerNameToElements.delete(e));
                        const i = this._elementToMarkerNames.get(t);
                        i && (i.delete(e), 0 == i.size && this._elementToMarkerNames.delete(t));
                    }
                    flushUnboundMarkerNames() {
                        const t = Array.from(this._unboundMarkerNames);
                        return this._unboundMarkerNames.clear(), t;
                    }
                    clearBindings() {
                        (this._modelToViewMapping = new WeakMap()),
                            (this._viewToModelMapping = new WeakMap()),
                            (this._markerNameToElements = new Map()),
                            (this._elementToMarkerNames = new Map()),
                            (this._unboundMarkerNames = new Set());
                    }
                    toModelElement(t) {
                        return this._viewToModelMapping.get(t);
                    }
                    toViewElement(t) {
                        return this._modelToViewMapping.get(t);
                    }
                    toModelRange(t) {
                        return new Bs(this.toModelPosition(t.start), this.toModelPosition(t.end));
                    }
                    toViewRange(t) {
                        return new sn(this.toViewPosition(t.start), this.toViewPosition(t.end));
                    }
                    toModelPosition(t) {
                        const e = { viewPosition: t, mapper: this };
                        return this.fire('viewToModelPosition', e), e.modelPosition;
                    }
                    toViewPosition(t, e = { isPhantom: !1 }) {
                        const o = { modelPosition: t, mapper: this, isPhantom: e.isPhantom };
                        return this.fire('modelToViewPosition', o), o.viewPosition;
                    }
                    markerNameToElements(t) {
                        const e = this._markerNameToElements.get(t);
                        if (!e) return null;
                        const o = new Set();
                        for (const t of e)
                            if (t.is('attributeElement')) for (const e of t.getElementsWithSameId()) o.add(e);
                            else o.add(t);
                        return o;
                    }
                    registerViewToModelLength(t, e) {
                        this._viewToModelLengthCallbacks.set(t, e);
                    }
                    findMappedViewAncestor(t) {
                        let e = t.parent;
                        for (; !this._viewToModelMapping.has(e); ) e = e.parent;
                        return e;
                    }
                    _toModelOffset(t, e, o) {
                        if (o != t) {
                            return this._toModelOffset(t.parent, t.index, o) + this._toModelOffset(t, e, t);
                        }
                        if (t.is('$text')) return e;
                        let i = 0;
                        for (let o = 0; o < e; o++) i += this.getModelLength(t.getChild(o));
                        return i;
                    }
                    getModelLength(t) {
                        if (this._viewToModelLengthCallbacks.get(t.name)) {
                            return this._viewToModelLengthCallbacks.get(t.name)(t);
                        }
                        if (this._viewToModelMapping.has(t)) return 1;
                        if (t.is('$text')) return t.data.length;
                        if (t.is('uiElement')) return 0;
                        {
                            let e = 0;
                            for (const o of t.getChildren()) e += this.getModelLength(o);
                            return e;
                        }
                    }
                    findPositionIn(t, e) {
                        let o,
                            i = 0,
                            n = 0,
                            r = 0;
                        if (t.is('$text')) return new rn(t, e);
                        for (; n < e; ) (o = t.getChild(r)), (i = this.getModelLength(o)), (n += i), r++;
                        return n == e
                            ? this._moveViewPositionToTextNode(new rn(t, r))
                            : this.findPositionIn(o, e - (n - i));
                    }
                    _moveViewPositionToTextNode(t) {
                        const e = t.nodeBefore,
                            o = t.nodeAfter;
                        return e instanceof li ? new rn(e, e.data.length) : o instanceof li ? new rn(o, 0) : t;
                    }
                }
                Kt(Fs, h);
                class Ds {
                    constructor() {
                        (this._consumable = new Map()), (this._textProxyRegistry = new Map());
                    }
                    add(t, e) {
                        (e = Ls(e)),
                            t instanceof Ss && (t = this._getSymbolForTextProxy(t)),
                            this._consumable.has(t) || this._consumable.set(t, new Map()),
                            this._consumable.get(t).set(e, !0);
                    }
                    consume(t, e) {
                        return (
                            (e = Ls(e)),
                            t instanceof Ss && (t = this._getSymbolForTextProxy(t)),
                            !!this.test(t, e) && (this._consumable.get(t).set(e, !1), !0)
                        );
                    }
                    test(t, e) {
                        (e = Ls(e)), t instanceof Ss && (t = this._getSymbolForTextProxy(t));
                        const o = this._consumable.get(t);
                        if (void 0 === o) return null;
                        const i = o.get(e);
                        return void 0 === i ? null : i;
                    }
                    revert(t, e) {
                        (e = Ls(e)), t instanceof Ss && (t = this._getSymbolForTextProxy(t));
                        const o = this.test(t, e);
                        return !1 === o ? (this._consumable.get(t).set(e, !0), !0) : !0 !== o && null;
                    }
                    _getSymbolForTextProxy(t) {
                        let e = null;
                        const o = this._textProxyRegistry.get(t.startOffset);
                        if (o) {
                            const i = o.get(t.endOffset);
                            i && (e = i.get(t.parent));
                        }
                        return e || (e = this._addSymbolForTextProxy(t.startOffset, t.endOffset, t.parent)), e;
                    }
                    _addSymbolForTextProxy(t, e, o) {
                        const i = Symbol('textProxySymbol');
                        let n, r;
                        return (
                            (n = this._textProxyRegistry.get(t)),
                            n || ((n = new Map()), this._textProxyRegistry.set(t, n)),
                            (r = n.get(e)),
                            r || ((r = new Map()), n.set(e, r)),
                            r.set(o, i),
                            i
                        );
                    }
                }
                function Ls(t) {
                    const e = t.split(':');
                    return e.length > 1 ? e[0] + ':' + e[1] : e[0];
                }
                class Hs {
                    constructor(t) {
                        (this.conversionApi = Object.assign({ dispatcher: this }, t)),
                            (this._reconversionEventsMapping = new Map());
                    }
                    convertChanges(t, e, o) {
                        for (const e of t.getMarkersToRemove()) this.convertMarkerRemove(e.name, e.range, o);
                        const i = this._mapChangesWithAutomaticReconversion(t);
                        for (const t of i)
                            'insert' === t.type
                                ? this.convertInsert(Bs._createFromPositionAndShift(t.position, t.length), o)
                                : 'remove' === t.type
                                ? this.convertRemove(t.position, t.length, t.name, o)
                                : 'reconvert' === t.type
                                ? this.reconvertElement(t.element, o)
                                : this.convertAttribute(
                                      t.range,
                                      t.attributeKey,
                                      t.attributeOldValue,
                                      t.attributeNewValue,
                                      o,
                                  );
                        for (const t of this.conversionApi.mapper.flushUnboundMarkerNames()) {
                            const i = e.get(t).getRange();
                            this.convertMarkerRemove(t, i, o), this.convertMarkerAdd(t, i, o);
                        }
                        for (const e of t.getMarkersToAdd()) this.convertMarkerAdd(e.name, e.range, o);
                    }
                    convertInsert(t, e) {
                        (this.conversionApi.writer = e),
                            (this.conversionApi.consumable = this._createInsertConsumable(t));
                        for (const e of Array.from(t).map(Ws)) this._convertInsertWithAttributes(e);
                        this._clearConversionApi();
                    }
                    convertRemove(t, e, o, i) {
                        (this.conversionApi.writer = i),
                            this.fire('remove:' + o, { position: t, length: e }, this.conversionApi),
                            this._clearConversionApi();
                    }
                    convertAttribute(t, e, o, i, n) {
                        (this.conversionApi.writer = n),
                            (this.conversionApi.consumable = this._createConsumableForRange(t, 'attribute:' + e));
                        for (const n of t) {
                            const t = {
                                item: n.item,
                                range: Bs._createFromPositionAndShift(n.previousPosition, n.length),
                                attributeKey: e,
                                attributeOldValue: o,
                                attributeNewValue: i,
                            };
                            this._testAndFire('attribute:' + e, t);
                        }
                        this._clearConversionApi();
                    }
                    reconvertElement(t, e) {
                        const o = Bs._createOn(t);
                        (this.conversionApi.writer = e),
                            (this.conversionApi.consumable = this._createInsertConsumable(o));
                        const i = this.conversionApi.mapper,
                            n = i.toViewElement(t);
                        e.remove(n), this._convertInsertWithAttributes({ item: t, range: o });
                        const r = i.toViewElement(t);
                        for (const o of Bs._createIn(t)) {
                            const { item: t } = o,
                                n = qs(t, i);
                            n
                                ? n.root !== r.root && e.move(e.createRangeOn(n), i.toViewPosition(Os._createBefore(t)))
                                : this._convertInsertWithAttributes(Ws(o));
                        }
                        i.unbindViewElement(n), this._clearConversionApi();
                    }
                    convertSelection(t, e, o) {
                        const i = Array.from(e.getMarkersAtPosition(t.getFirstPosition()));
                        if (
                            ((this.conversionApi.writer = o),
                            (this.conversionApi.consumable = this._createSelectionConsumable(t, i)),
                            this.fire('selection', { selection: t }, this.conversionApi),
                            t.isCollapsed)
                        ) {
                            for (const e of i) {
                                const o = e.getRange();
                                if (!js(t.getFirstPosition(), e, this.conversionApi.mapper)) continue;
                                const i = { item: t, markerName: e.name, markerRange: o };
                                this.conversionApi.consumable.test(t, 'addMarker:' + e.name) &&
                                    this.fire('addMarker:' + e.name, i, this.conversionApi);
                            }
                            for (const e of t.getAttributeKeys()) {
                                const o = {
                                    item: t,
                                    range: t.getFirstRange(),
                                    attributeKey: e,
                                    attributeOldValue: null,
                                    attributeNewValue: t.getAttribute(e),
                                };
                                this.conversionApi.consumable.test(t, 'attribute:' + o.attributeKey) &&
                                    this.fire('attribute:' + o.attributeKey + ':$text', o, this.conversionApi);
                            }
                            this._clearConversionApi();
                        }
                    }
                    convertMarkerAdd(t, e, o) {
                        if (!e.root.document || '$graveyard' == e.root.rootName) return;
                        this.conversionApi.writer = o;
                        const i = 'addMarker:' + t,
                            n = new Ds();
                        if (
                            (n.add(e, i),
                            (this.conversionApi.consumable = n),
                            this.fire(i, { markerName: t, markerRange: e }, this.conversionApi),
                            n.test(e, i))
                        ) {
                            this.conversionApi.consumable = this._createConsumableForRange(e, i);
                            for (const o of e.getItems()) {
                                if (!this.conversionApi.consumable.test(o, i)) continue;
                                const n = { item: o, range: Bs._createOn(o), markerName: t, markerRange: e };
                                this.fire(i, n, this.conversionApi);
                            }
                            this._clearConversionApi();
                        }
                    }
                    convertMarkerRemove(t, e, o) {
                        e.root.document &&
                            '$graveyard' != e.root.rootName &&
                            ((this.conversionApi.writer = o),
                            this.fire('removeMarker:' + t, { markerName: t, markerRange: e }, this.conversionApi),
                            this._clearConversionApi());
                    }
                    _mapReconversionTriggerEvent(t, e) {
                        this._reconversionEventsMapping.set(e, t);
                    }
                    _createInsertConsumable(t) {
                        const e = new Ds();
                        for (const o of t) {
                            const t = o.item;
                            e.add(t, 'insert');
                            for (const o of t.getAttributeKeys()) e.add(t, 'attribute:' + o);
                        }
                        return e;
                    }
                    _createConsumableForRange(t, e) {
                        const o = new Ds();
                        for (const i of t.getItems()) o.add(i, e);
                        return o;
                    }
                    _createSelectionConsumable(t, e) {
                        const o = new Ds();
                        o.add(t, 'selection');
                        for (const i of e) o.add(t, 'addMarker:' + i.name);
                        for (const e of t.getAttributeKeys()) o.add(t, 'attribute:' + e);
                        return o;
                    }
                    _testAndFire(t, e) {
                        this.conversionApi.consumable.test(e.item, t) &&
                            this.fire(
                                (function (t, e) {
                                    const o = e.item.name || '$text';
                                    return `${t}:${o}`;
                                })(t, e),
                                e,
                                this.conversionApi,
                            );
                    }
                    _clearConversionApi() {
                        delete this.conversionApi.writer, delete this.conversionApi.consumable;
                    }
                    _convertInsertWithAttributes(t) {
                        this._testAndFire('insert', t);
                        for (const e of t.item.getAttributeKeys())
                            (t.attributeKey = e),
                                (t.attributeOldValue = null),
                                (t.attributeNewValue = t.item.getAttribute(e)),
                                this._testAndFire('attribute:' + e, t);
                    }
                    _mapChangesWithAutomaticReconversion(t) {
                        const e = new Set(),
                            o = [];
                        for (const i of t.getChanges()) {
                            const t = i.position || i.range.start,
                                n = t.parent;
                            if (zs(t, n)) {
                                o.push(i);
                                continue;
                            }
                            const r = 'attribute' === i.type ? Ms(t, n, null) : n;
                            if (r.is('$text')) {
                                o.push(i);
                                continue;
                            }
                            let s;
                            if (
                                ((s =
                                    'attribute' === i.type
                                        ? `attribute:${i.attributeKey}:${r.name}`
                                        : `${i.type}:${i.name}`),
                                this._isReconvertTriggerEvent(s, r.name))
                            ) {
                                if (e.has(r)) continue;
                                e.add(r), o.push({ type: 'reconvert', element: r });
                            } else o.push(i);
                        }
                        return o;
                    }
                    _isReconvertTriggerEvent(t, e) {
                        return this._reconversionEventsMapping.get(t) === e;
                    }
                }
                function js(t, e, o) {
                    const i = e.getRange(),
                        n = Array.from(t.getAncestors());
                    n.shift(), n.reverse();
                    return !n.some((t) => {
                        if (i.containsItem(t)) {
                            return !!o.toViewElement(t).getCustomProperty('addHighlight');
                        }
                    });
                }
                function Ws(t) {
                    return { item: t.item, range: Bs._createFromPositionAndShift(t.previousPosition, t.length) };
                }
                function qs(t, e) {
                    if (t.is('textProxy')) {
                        const o = e.toViewPosition(Os._createBefore(t)).parent;
                        return o.is('$text') ? o : null;
                    }
                    return e.toViewElement(t);
                }
                Kt(Hs, h);
                class Us {
                    constructor(t, e, o) {
                        (this._lastRangeBackward = !1),
                            (this._ranges = []),
                            (this._attrs = new Map()),
                            t && this.setTo(t, e, o);
                    }
                    get anchor() {
                        if (this._ranges.length > 0) {
                            const t = this._ranges[this._ranges.length - 1];
                            return this._lastRangeBackward ? t.end : t.start;
                        }
                        return null;
                    }
                    get focus() {
                        if (this._ranges.length > 0) {
                            const t = this._ranges[this._ranges.length - 1];
                            return this._lastRangeBackward ? t.start : t.end;
                        }
                        return null;
                    }
                    get isCollapsed() {
                        return 1 === this._ranges.length && this._ranges[0].isCollapsed;
                    }
                    get rangeCount() {
                        return this._ranges.length;
                    }
                    get isBackward() {
                        return !this.isCollapsed && this._lastRangeBackward;
                    }
                    isEqual(t) {
                        if (this.rangeCount != t.rangeCount) return !1;
                        if (0 === this.rangeCount) return !0;
                        if (!this.anchor.isEqual(t.anchor) || !this.focus.isEqual(t.focus)) return !1;
                        for (const e of this._ranges) {
                            let o = !1;
                            for (const i of t._ranges)
                                if (e.isEqual(i)) {
                                    o = !0;
                                    break;
                                }
                            if (!o) return !1;
                        }
                        return !0;
                    }
                    *getRanges() {
                        for (const t of this._ranges) yield new Bs(t.start, t.end);
                    }
                    getFirstRange() {
                        let t = null;
                        for (const e of this._ranges) (t && !e.start.isBefore(t.start)) || (t = e);
                        return t ? new Bs(t.start, t.end) : null;
                    }
                    getLastRange() {
                        let t = null;
                        for (const e of this._ranges) (t && !e.end.isAfter(t.end)) || (t = e);
                        return t ? new Bs(t.start, t.end) : null;
                    }
                    getFirstPosition() {
                        const t = this.getFirstRange();
                        return t ? t.start.clone() : null;
                    }
                    getLastPosition() {
                        const t = this.getLastRange();
                        return t ? t.end.clone() : null;
                    }
                    setTo(t, e, o) {
                        if (null === t) this._setRanges([]);
                        else if (t instanceof Us) this._setRanges(t.getRanges(), t.isBackward);
                        else if (t && 'function' == typeof t.getRanges) this._setRanges(t.getRanges(), t.isBackward);
                        else if (t instanceof Bs) this._setRanges([t], !!e && !!e.backward);
                        else if (t instanceof Os) this._setRanges([new Bs(t)]);
                        else if (t instanceof Ts) {
                            const i = !!o && !!o.backward;
                            let n;
                            if ('in' == e) n = Bs._createIn(t);
                            else if ('on' == e) n = Bs._createOn(t);
                            else {
                                if (void 0 === e)
                                    throw new l.a('model-selection-setto-required-second-parameter', [this, t]);
                                n = new Bs(Os._createAt(t, e));
                            }
                            this._setRanges([n], i);
                        } else {
                            if (!Jo(t)) throw new l.a('model-selection-setto-not-selectable', [this, t]);
                            this._setRanges(t, e && !!e.backward);
                        }
                    }
                    _setRanges(t, e = !1) {
                        const o = (t = Array.from(t)).some((e) => {
                            if (!(e instanceof Bs)) throw new l.a('model-selection-set-ranges-not-range', [this, t]);
                            return this._ranges.every((t) => !t.isEqual(e));
                        });
                        if (t.length !== this._ranges.length || o) {
                            this._removeAllRanges();
                            for (const e of t) this._pushRange(e);
                            (this._lastRangeBackward = !!e), this.fire('change:range', { directChange: !0 });
                        }
                    }
                    setFocus(t, e) {
                        if (null === this.anchor) throw new l.a('model-selection-setfocus-no-ranges', [this, t]);
                        const o = Os._createAt(t, e);
                        if ('same' == o.compareWith(this.focus)) return;
                        const i = this.anchor;
                        this._ranges.length && this._popRange(),
                            'before' == o.compareWith(i)
                                ? (this._pushRange(new Bs(o, i)), (this._lastRangeBackward = !0))
                                : (this._pushRange(new Bs(i, o)), (this._lastRangeBackward = !1)),
                            this.fire('change:range', { directChange: !0 });
                    }
                    getAttribute(t) {
                        return this._attrs.get(t);
                    }
                    getAttributes() {
                        return this._attrs.entries();
                    }
                    getAttributeKeys() {
                        return this._attrs.keys();
                    }
                    hasAttribute(t) {
                        return this._attrs.has(t);
                    }
                    removeAttribute(t) {
                        this.hasAttribute(t) &&
                            (this._attrs.delete(t),
                            this.fire('change:attribute', { attributeKeys: [t], directChange: !0 }));
                    }
                    setAttribute(t, e) {
                        this.getAttribute(t) !== e &&
                            (this._attrs.set(t, e),
                            this.fire('change:attribute', { attributeKeys: [t], directChange: !0 }));
                    }
                    getSelectedElement() {
                        return 1 !== this.rangeCount ? null : this.getFirstRange().getContainedElement();
                    }
                    is(t) {
                        return 'selection' === t || 'model:selection' === t;
                    }
                    *getSelectedBlocks() {
                        const t = new WeakSet();
                        for (const e of this.getRanges()) {
                            const o = Gs(e.start, t);
                            o && Js(o, e) && (yield o);
                            for (const o of e.getWalker()) {
                                const i = o.item;
                                'elementEnd' == o.type && Ks(i, t, e) && (yield i);
                            }
                            const i = Gs(e.end, t);
                            i && !e.end.isTouching(Os._createAt(i, 0)) && Js(i, e) && (yield i);
                        }
                    }
                    containsEntireContent(t = this.anchor.root) {
                        const e = Os._createAt(t, 0),
                            o = Os._createAt(t, 'end');
                        return e.isTouching(this.getFirstPosition()) && o.isTouching(this.getLastPosition());
                    }
                    _pushRange(t) {
                        this._checkRange(t), this._ranges.push(new Bs(t.start, t.end));
                    }
                    _checkRange(t) {
                        for (let e = 0; e < this._ranges.length; e++)
                            if (t.isIntersecting(this._ranges[e]))
                                throw new l.a('model-selection-range-intersects', [this, t], {
                                    addedRange: t,
                                    intersectingRange: this._ranges[e],
                                });
                    }
                    _removeAllRanges() {
                        for (; this._ranges.length > 0; ) this._popRange();
                    }
                    _popRange() {
                        this._ranges.pop();
                    }
                }
                function $s(t, e) {
                    return !e.has(t) && (e.add(t), t.root.document.model.schema.isBlock(t) && t.parent);
                }
                function Ks(t, e, o) {
                    return $s(t, e) && Js(t, o);
                }
                function Gs(t, e) {
                    const o = t.parent.root.document.model.schema,
                        i = t.parent.getAncestors({ parentFirst: !0, includeSelf: !0 });
                    let n = !1;
                    const r = i.find((t) => !n && ((n = o.isLimit(t)), !n && $s(t, e)));
                    return i.forEach((t) => e.add(t)), r;
                }
                function Js(t, e) {
                    const o = (function (t) {
                        const e = t.root.document.model.schema;
                        let o = t.parent;
                        for (; o; ) {
                            if (e.isBlock(o)) return o;
                            o = o.parent;
                        }
                    })(t);
                    if (!o) return !0;
                    return !e.containsRange(Bs._createOn(o), !0);
                }
                Kt(Us, h);
                class Ys extends Bs {
                    constructor(t, e) {
                        super(t, e), Xs.call(this);
                    }
                    detach() {
                        this.stopListening();
                    }
                    is(t) {
                        return 'liveRange' === t || 'model:liveRange' === t || 'range' == t || 'model:range' === t;
                    }
                    toRange() {
                        return new Bs(this.start, this.end);
                    }
                    static fromRange(t) {
                        return new Ys(t.start, t.end);
                    }
                }
                function Xs() {
                    this.listenTo(
                        this.root.document.model,
                        'applyOperation',
                        (t, e) => {
                            const o = e[0];
                            o.isDocumentOperation && Zs.call(this, o);
                        },
                        { priority: 'low' },
                    );
                }
                function Zs(t) {
                    const e = this.getTransformedByOperation(t),
                        o = Bs._createFromRanges(e),
                        i = !o.isEqual(this),
                        n = (function (t, e) {
                            switch (e.type) {
                                case 'insert':
                                    return t.containsPosition(e.position);
                                case 'move':
                                case 'remove':
                                case 'reinsert':
                                case 'merge':
                                    return (
                                        t.containsPosition(e.sourcePosition) ||
                                        t.start.isEqual(e.sourcePosition) ||
                                        t.containsPosition(e.targetPosition)
                                    );
                                case 'split':
                                    return (
                                        t.containsPosition(e.splitPosition) || t.containsPosition(e.insertionPosition)
                                    );
                            }
                            return !1;
                        })(this, t);
                    let r = null;
                    if (i) {
                        '$graveyard' == o.root.rootName &&
                            (r = 'remove' == t.type ? t.sourcePosition : t.deletionPosition);
                        const e = this.toRange();
                        (this.start = o.start),
                            (this.end = o.end),
                            this.fire('change:range', e, { deletionPosition: r });
                    } else n && this.fire('change:content', this.toRange(), { deletionPosition: r });
                }
                Kt(Ys, h);
                class Qs {
                    constructor(t) {
                        (this._selection = new ta(t)),
                            this._selection.delegate('change:range').to(this),
                            this._selection.delegate('change:attribute').to(this),
                            this._selection.delegate('change:marker').to(this);
                    }
                    get isCollapsed() {
                        return this._selection.isCollapsed;
                    }
                    get anchor() {
                        return this._selection.anchor;
                    }
                    get focus() {
                        return this._selection.focus;
                    }
                    get rangeCount() {
                        return this._selection.rangeCount;
                    }
                    get hasOwnRange() {
                        return this._selection.hasOwnRange;
                    }
                    get isBackward() {
                        return this._selection.isBackward;
                    }
                    get isGravityOverridden() {
                        return this._selection.isGravityOverridden;
                    }
                    get markers() {
                        return this._selection.markers;
                    }
                    get _ranges() {
                        return this._selection._ranges;
                    }
                    getRanges() {
                        return this._selection.getRanges();
                    }
                    getFirstPosition() {
                        return this._selection.getFirstPosition();
                    }
                    getLastPosition() {
                        return this._selection.getLastPosition();
                    }
                    getFirstRange() {
                        return this._selection.getFirstRange();
                    }
                    getLastRange() {
                        return this._selection.getLastRange();
                    }
                    getSelectedBlocks() {
                        return this._selection.getSelectedBlocks();
                    }
                    getSelectedElement() {
                        return this._selection.getSelectedElement();
                    }
                    containsEntireContent(t) {
                        return this._selection.containsEntireContent(t);
                    }
                    destroy() {
                        this._selection.destroy();
                    }
                    getAttributeKeys() {
                        return this._selection.getAttributeKeys();
                    }
                    getAttributes() {
                        return this._selection.getAttributes();
                    }
                    getAttribute(t) {
                        return this._selection.getAttribute(t);
                    }
                    hasAttribute(t) {
                        return this._selection.hasAttribute(t);
                    }
                    refresh() {
                        this._selection._updateMarkers(), this._selection._updateAttributes(!1);
                    }
                    observeMarkers(t) {
                        this._selection.observeMarkers(t);
                    }
                    is(t) {
                        return (
                            'selection' === t ||
                            'model:selection' == t ||
                            'documentSelection' == t ||
                            'model:documentSelection' == t
                        );
                    }
                    _setFocus(t, e) {
                        this._selection.setFocus(t, e);
                    }
                    _setTo(t, e, o) {
                        this._selection.setTo(t, e, o);
                    }
                    _setAttribute(t, e) {
                        this._selection.setAttribute(t, e);
                    }
                    _removeAttribute(t) {
                        this._selection.removeAttribute(t);
                    }
                    _getStoredAttributes() {
                        return this._selection._getStoredAttributes();
                    }
                    _overrideGravity() {
                        return this._selection.overrideGravity();
                    }
                    _restoreGravity(t) {
                        this._selection.restoreGravity(t);
                    }
                    static _getStoreAttributeKey(t) {
                        return 'selection:' + t;
                    }
                    static _isStoreAttributeKey(t) {
                        return t.startsWith('selection:');
                    }
                }
                Kt(Qs, h);
                class ta extends Us {
                    constructor(t) {
                        super(),
                            (this.markers = new Yo({ idProperty: 'name' })),
                            (this._model = t.model),
                            (this._document = t),
                            (this._attributePriority = new Map()),
                            (this._selectionRestorePosition = null),
                            (this._hasChangedRange = !1),
                            (this._overriddenGravityRegister = new Set()),
                            (this._observedMarkers = new Set()),
                            this.listenTo(
                                this._model,
                                'applyOperation',
                                (t, e) => {
                                    const o = e[0];
                                    o.isDocumentOperation &&
                                        'marker' != o.type &&
                                        'rename' != o.type &&
                                        'noop' != o.type &&
                                        (0 == this._ranges.length &&
                                            this._selectionRestorePosition &&
                                            this._fixGraveyardSelection(this._selectionRestorePosition),
                                        (this._selectionRestorePosition = null),
                                        this._hasChangedRange &&
                                            ((this._hasChangedRange = !1),
                                            this.fire('change:range', { directChange: !1 })));
                                },
                                { priority: 'lowest' },
                            ),
                            this.on('change:range', () => {
                                for (const t of this.getRanges())
                                    if (!this._document._validateSelectionRange(t))
                                        throw new l.a('document-selection-wrong-position', this, { range: t });
                            }),
                            this.listenTo(this._model.markers, 'update', (t, e, o, i) => {
                                this._updateMarker(e, i);
                            }),
                            this.listenTo(this._document, 'change', (t, e) => {
                                !(function (t, e) {
                                    const o = t.document.differ;
                                    for (const i of o.getChanges()) {
                                        if ('insert' != i.type) continue;
                                        const o = i.position.parent;
                                        i.length === o.maxOffset &&
                                            t.enqueueChange(e, (t) => {
                                                const e = Array.from(o.getAttributeKeys()).filter((t) =>
                                                    t.startsWith('selection:'),
                                                );
                                                for (const i of e) t.removeAttribute(i, o);
                                            });
                                    }
                                })(this._model, e);
                            });
                    }
                    get isCollapsed() {
                        return 0 === this._ranges.length
                            ? this._document._getDefaultRange().isCollapsed
                            : super.isCollapsed;
                    }
                    get anchor() {
                        return super.anchor || this._document._getDefaultRange().start;
                    }
                    get focus() {
                        return super.focus || this._document._getDefaultRange().end;
                    }
                    get rangeCount() {
                        return this._ranges.length ? this._ranges.length : 1;
                    }
                    get hasOwnRange() {
                        return this._ranges.length > 0;
                    }
                    get isGravityOverridden() {
                        return !!this._overriddenGravityRegister.size;
                    }
                    destroy() {
                        for (let t = 0; t < this._ranges.length; t++) this._ranges[t].detach();
                        this.stopListening();
                    }
                    *getRanges() {
                        this._ranges.length ? yield* super.getRanges() : yield this._document._getDefaultRange();
                    }
                    getFirstRange() {
                        return super.getFirstRange() || this._document._getDefaultRange();
                    }
                    getLastRange() {
                        return super.getLastRange() || this._document._getDefaultRange();
                    }
                    setTo(t, e, o) {
                        super.setTo(t, e, o), this._updateAttributes(!0), this._updateMarkers();
                    }
                    setFocus(t, e) {
                        super.setFocus(t, e), this._updateAttributes(!0), this._updateMarkers();
                    }
                    setAttribute(t, e) {
                        if (this._setAttribute(t, e)) {
                            const e = [t];
                            this.fire('change:attribute', { attributeKeys: e, directChange: !0 });
                        }
                    }
                    removeAttribute(t) {
                        if (this._removeAttribute(t)) {
                            const e = [t];
                            this.fire('change:attribute', { attributeKeys: e, directChange: !0 });
                        }
                    }
                    overrideGravity() {
                        const t = s();
                        return (
                            this._overriddenGravityRegister.add(t),
                            1 === this._overriddenGravityRegister.size && this._updateAttributes(!0),
                            t
                        );
                    }
                    restoreGravity(t) {
                        if (!this._overriddenGravityRegister.has(t))
                            throw new l.a('document-selection-gravity-wrong-restore', this, { uid: t });
                        this._overriddenGravityRegister.delete(t),
                            this.isGravityOverridden || this._updateAttributes(!0);
                    }
                    observeMarkers(t) {
                        this._observedMarkers.add(t), this._updateMarkers();
                    }
                    _popRange() {
                        this._ranges.pop().detach();
                    }
                    _pushRange(t) {
                        const e = this._prepareRange(t);
                        e && this._ranges.push(e);
                    }
                    _prepareRange(t) {
                        if ((this._checkRange(t), t.root == this._document.graveyard)) return;
                        const e = Ys.fromRange(t);
                        return (
                            e.on('change:range', (t, o, i) => {
                                if (((this._hasChangedRange = !0), e.root == this._document.graveyard)) {
                                    this._selectionRestorePosition = i.deletionPosition;
                                    const t = this._ranges.indexOf(e);
                                    this._ranges.splice(t, 1), e.detach();
                                }
                            }),
                            e
                        );
                    }
                    _updateMarkers() {
                        if (!this._observedMarkers.size) return;
                        const t = [];
                        let e = !1;
                        for (const e of this._model.markers) {
                            const o = e.name.split(':', 1)[0];
                            if (!this._observedMarkers.has(o)) continue;
                            const i = e.getRange();
                            for (const o of this.getRanges()) i.containsRange(o, !o.isCollapsed) && t.push(e);
                        }
                        const o = Array.from(this.markers);
                        for (const o of t) this.markers.has(o) || (this.markers.add(o), (e = !0));
                        for (const o of Array.from(this.markers)) t.includes(o) || (this.markers.remove(o), (e = !0));
                        e && this.fire('change:marker', { oldMarkers: o, directChange: !1 });
                    }
                    _updateMarker(t, e) {
                        const o = t.name.split(':', 1)[0];
                        if (!this._observedMarkers.has(o)) return;
                        let i = !1;
                        const n = Array.from(this.markers),
                            r = this.markers.has(t);
                        if (e) {
                            let o = !1;
                            for (const t of this.getRanges())
                                if (e.containsRange(t, !t.isCollapsed)) {
                                    o = !0;
                                    break;
                                }
                            o && !r ? (this.markers.add(t), (i = !0)) : !o && r && (this.markers.remove(t), (i = !0));
                        } else r && (this.markers.remove(t), (i = !0));
                        i && this.fire('change:marker', { oldMarkers: n, directChange: !1 });
                    }
                    _updateAttributes(t) {
                        const e = di(this._getSurroundingAttributes()),
                            o = di(this.getAttributes());
                        if (t) (this._attributePriority = new Map()), (this._attrs = new Map());
                        else
                            for (const [t, e] of this._attributePriority)
                                'low' == e && (this._attrs.delete(t), this._attributePriority.delete(t));
                        this._setAttributesTo(e);
                        const i = [];
                        for (const [t, e] of this.getAttributes()) (o.has(t) && o.get(t) === e) || i.push(t);
                        for (const [t] of o) this.hasAttribute(t) || i.push(t);
                        i.length > 0 && this.fire('change:attribute', { attributeKeys: i, directChange: !1 });
                    }
                    _setAttribute(t, e, o = !0) {
                        const i = o ? 'normal' : 'low';
                        if ('low' == i && 'normal' == this._attributePriority.get(t)) return !1;
                        return (
                            super.getAttribute(t) !== e &&
                            (this._attrs.set(t, e), this._attributePriority.set(t, i), !0)
                        );
                    }
                    _removeAttribute(t, e = !0) {
                        const o = e ? 'normal' : 'low';
                        return (
                            ('low' != o || 'normal' != this._attributePriority.get(t)) &&
                            (this._attributePriority.set(t, o), !!super.hasAttribute(t) && (this._attrs.delete(t), !0))
                        );
                    }
                    _setAttributesTo(t) {
                        const e = new Set();
                        for (const [e, o] of this.getAttributes()) t.get(e) !== o && this._removeAttribute(e, !1);
                        for (const [o, i] of t) {
                            this._setAttribute(o, i, !1) && e.add(o);
                        }
                        return e;
                    }
                    *_getStoredAttributes() {
                        const t = this.getFirstPosition().parent;
                        if (this.isCollapsed && t.isEmpty)
                            for (const e of t.getAttributeKeys())
                                if (e.startsWith('selection:')) {
                                    const o = e.substr('selection:'.length);
                                    yield [o, t.getAttribute(e)];
                                }
                    }
                    _getSurroundingAttributes() {
                        const t = this.getFirstPosition(),
                            e = this._model.schema;
                        let o = null;
                        if (this.isCollapsed) {
                            const i = t.textNode ? t.textNode : t.nodeBefore,
                                n = t.textNode ? t.textNode : t.nodeAfter;
                            if (
                                (this.isGravityOverridden || (o = ea(i)),
                                o || (o = ea(n)),
                                !this.isGravityOverridden && !o)
                            ) {
                                let t = i;
                                for (; t && !e.isInline(t) && !o; ) (t = t.previousSibling), (o = ea(t));
                            }
                            if (!o) {
                                let t = n;
                                for (; t && !e.isInline(t) && !o; ) (t = t.nextSibling), (o = ea(t));
                            }
                            o || (o = this._getStoredAttributes());
                        } else {
                            const t = this.getFirstRange();
                            for (const i of t) {
                                if (i.item.is('element') && e.isObject(i.item)) break;
                                if ('text' == i.type) {
                                    o = i.item.getAttributes();
                                    break;
                                }
                            }
                        }
                        return o;
                    }
                    _fixGraveyardSelection(t) {
                        const e = this._model.schema.getNearestSelectionRange(t);
                        e && this._pushRange(e);
                    }
                }
                function ea(t) {
                    return t instanceof Ss || t instanceof Ps ? t.getAttributes() : null;
                }
                class oa {
                    constructor(t) {
                        this._dispatchers = t;
                    }
                    add(t) {
                        for (const e of this._dispatchers) t(e);
                        return this;
                    }
                }
                var ia = function (t) {
                    return Wo(t, 5);
                };
                class na extends oa {
                    elementToElement(t) {
                        return this.add(
                            (function (t) {
                                return (
                                    ((t = ia(t)).view = aa(t.view, 'container')),
                                    (e) => {
                                        var o;
                                        if (
                                            (e.on(
                                                'insert:' + t.model,
                                                ((o = t.view),
                                                (t, e, i) => {
                                                    const n = o(e.item, i);
                                                    if (!n) return;
                                                    if (!i.consumable.consume(e.item, 'insert')) return;
                                                    const r = i.mapper.toViewPosition(e.range.start);
                                                    i.mapper.bindElements(e.item, n), i.writer.insert(r, n);
                                                }),
                                                { priority: t.converterPriority || 'normal' },
                                            ),
                                            t.triggerBy)
                                        ) {
                                            if (t.triggerBy.attributes)
                                                for (const o of t.triggerBy.attributes)
                                                    e._mapReconversionTriggerEvent(
                                                        t.model,
                                                        `attribute:${o}:${t.model}`,
                                                    );
                                            if (t.triggerBy.children)
                                                for (const o of t.triggerBy.children)
                                                    e._mapReconversionTriggerEvent(t.model, 'insert:' + o),
                                                        e._mapReconversionTriggerEvent(t.model, 'remove:' + o);
                                        }
                                    }
                                );
                            })(t),
                        );
                    }
                    attributeToElement(t) {
                        return this.add(
                            (function (t) {
                                t = ia(t);
                                let e = 'attribute:' + (t.model.key ? t.model.key : t.model);
                                t.model.name && (e += ':' + t.model.name);
                                if (t.model.values)
                                    for (const e of t.model.values) t.view[e] = aa(t.view[e], 'attribute');
                                else t.view = aa(t.view, 'attribute');
                                const o = la(t);
                                return (i) => {
                                    i.on(
                                        e,
                                        (function (t) {
                                            return (e, o, i) => {
                                                const n = t(o.attributeOldValue, i),
                                                    r = t(o.attributeNewValue, i);
                                                if (!n && !r) return;
                                                if (!i.consumable.consume(o.item, e.name)) return;
                                                const s = i.writer,
                                                    a = s.document.selection;
                                                if (o.item instanceof Us || o.item instanceof Qs)
                                                    s.wrap(a.getFirstRange(), r);
                                                else {
                                                    let t = i.mapper.toViewRange(o.range);
                                                    null !== o.attributeOldValue && n && (t = s.unwrap(t, n)),
                                                        null !== o.attributeNewValue && r && s.wrap(t, r);
                                                }
                                            };
                                        })(o),
                                        { priority: t.converterPriority || 'normal' },
                                    );
                                };
                            })(t),
                        );
                    }
                    attributeToAttribute(t) {
                        return this.add(
                            (function (t) {
                                t = ia(t);
                                let e = 'attribute:' + (t.model.key ? t.model.key : t.model);
                                t.model.name && (e += ':' + t.model.name);
                                if (t.model.values) for (const e of t.model.values) t.view[e] = ca(t.view[e]);
                                else t.view = ca(t.view);
                                const o = la(t);
                                return (i) => {
                                    var n;
                                    i.on(
                                        e,
                                        ((n = o),
                                        (t, e, o) => {
                                            const i = n(e.attributeOldValue, o),
                                                r = n(e.attributeNewValue, o);
                                            if (!i && !r) return;
                                            if (!o.consumable.consume(e.item, t.name)) return;
                                            const s = o.mapper.toViewElement(e.item),
                                                a = o.writer;
                                            if (!s) throw new l.a('conversion-attribute-to-attribute-on-text', [e, o]);
                                            if (null !== e.attributeOldValue && i)
                                                if ('class' == i.key) {
                                                    const t = Zo(i.value);
                                                    for (const e of t) a.removeClass(e, s);
                                                } else if ('style' == i.key) {
                                                    const t = Object.keys(i.value);
                                                    for (const e of t) a.removeStyle(e, s);
                                                } else a.removeAttribute(i.key, s);
                                            if (null !== e.attributeNewValue && r)
                                                if ('class' == r.key) {
                                                    const t = Zo(r.value);
                                                    for (const e of t) a.addClass(e, s);
                                                } else if ('style' == r.key) {
                                                    const t = Object.keys(r.value);
                                                    for (const e of t) a.setStyle(e, r.value[e], s);
                                                } else a.setAttribute(r.key, r.value, s);
                                        }),
                                        { priority: t.converterPriority || 'normal' },
                                    );
                                };
                            })(t),
                        );
                    }
                    markerToElement(t) {
                        return this.add(
                            (function (t) {
                                return (
                                    ((t = ia(t)).view = aa(t.view, 'ui')),
                                    (e) => {
                                        var o;
                                        e.on(
                                            'addMarker:' + t.model,
                                            ((o = t.view),
                                            (t, e, i) => {
                                                e.isOpening = !0;
                                                const n = o(e, i);
                                                e.isOpening = !1;
                                                const r = o(e, i);
                                                if (!n || !r) return;
                                                const s = e.markerRange;
                                                if (s.isCollapsed && !i.consumable.consume(s, t.name)) return;
                                                for (const e of s) if (!i.consumable.consume(e.item, t.name)) return;
                                                const a = i.mapper,
                                                    l = i.writer;
                                                l.insert(a.toViewPosition(s.start), n),
                                                    i.mapper.bindElementToMarker(n, e.markerName),
                                                    s.isCollapsed ||
                                                        (l.insert(a.toViewPosition(s.end), r),
                                                        i.mapper.bindElementToMarker(r, e.markerName)),
                                                    t.stop();
                                            }),
                                            { priority: t.converterPriority || 'normal' },
                                        ),
                                            e.on(
                                                'removeMarker:' + t.model,
                                                (t.view,
                                                (t, e, o) => {
                                                    const i = o.mapper.markerNameToElements(e.markerName);
                                                    if (i) {
                                                        for (const t of i)
                                                            o.mapper.unbindElementFromMarkerName(t, e.markerName),
                                                                o.writer.clear(o.writer.createRangeOn(t), t);
                                                        o.writer.clearClonedElementsGroup(e.markerName), t.stop();
                                                    }
                                                }),
                                                { priority: t.converterPriority || 'normal' },
                                            );
                                    }
                                );
                            })(t),
                        );
                    }
                    markerToHighlight(t) {
                        return this.add(
                            (function (t) {
                                return (e) => {
                                    var o;
                                    e.on(
                                        'addMarker:' + t.model,
                                        ((o = t.view),
                                        (t, e, i) => {
                                            if (!e.item) return;
                                            if (
                                                !(
                                                    e.item instanceof Us ||
                                                    e.item instanceof Qs ||
                                                    e.item.is('$textProxy')
                                                )
                                            )
                                                return;
                                            const n = da(o, e, i);
                                            if (!n) return;
                                            if (!i.consumable.consume(e.item, t.name)) return;
                                            const r = i.writer,
                                                s = ra(r, n),
                                                a = r.document.selection;
                                            if (e.item instanceof Us || e.item instanceof Qs)
                                                r.wrap(a.getFirstRange(), s, a);
                                            else {
                                                const t = i.mapper.toViewRange(e.range),
                                                    o = r.wrap(t, s);
                                                for (const t of o.getItems())
                                                    if (t.is('attributeElement') && t.isSimilar(s)) {
                                                        i.mapper.bindElementToMarker(t, e.markerName);
                                                        break;
                                                    }
                                            }
                                        }),
                                        { priority: t.converterPriority || 'normal' },
                                    ),
                                        e.on(
                                            'addMarker:' + t.model,
                                            (function (t) {
                                                return (e, o, i) => {
                                                    if (!o.item) return;
                                                    if (!(o.item instanceof Rs)) return;
                                                    const n = da(t, o, i);
                                                    if (!n) return;
                                                    if (!i.consumable.test(o.item, e.name)) return;
                                                    const r = i.mapper.toViewElement(o.item);
                                                    if (r && r.getCustomProperty('addHighlight')) {
                                                        i.consumable.consume(o.item, e.name);
                                                        for (const t of Bs._createIn(o.item))
                                                            i.consumable.consume(t.item, e.name);
                                                        r.getCustomProperty('addHighlight')(r, n, i.writer),
                                                            i.mapper.bindElementToMarker(r, o.markerName);
                                                    }
                                                };
                                            })(t.view),
                                            { priority: t.converterPriority || 'normal' },
                                        ),
                                        e.on(
                                            'removeMarker:' + t.model,
                                            (function (t) {
                                                return (e, o, i) => {
                                                    if (o.markerRange.isCollapsed) return;
                                                    const n = da(t, o, i);
                                                    if (!n) return;
                                                    const r = ra(i.writer, n),
                                                        s = i.mapper.markerNameToElements(o.markerName);
                                                    if (s) {
                                                        for (const t of s)
                                                            i.mapper.unbindElementFromMarkerName(t, o.markerName),
                                                                t.is('attributeElement')
                                                                    ? i.writer.unwrap(i.writer.createRangeOn(t), r)
                                                                    : t.getCustomProperty('removeHighlight')(
                                                                          t,
                                                                          n.id,
                                                                          i.writer,
                                                                      );
                                                        i.writer.clearClonedElementsGroup(o.markerName), e.stop();
                                                    }
                                                };
                                            })(t.view),
                                            { priority: t.converterPriority || 'normal' },
                                        );
                                };
                            })(t),
                        );
                    }
                    markerToData(t) {
                        return this.add(
                            (function (t) {
                                const e = (t = ia(t)).model;
                                t.view || (t.view = (o) => ({ group: e, name: o.substr(t.model.length + 1) }));
                                return (o) => {
                                    var i;
                                    o.on(
                                        'addMarker:' + e,
                                        ((i = t.view),
                                        (t, e, o) => {
                                            const n = i(e.markerName, o);
                                            if (!n) return;
                                            const r = e.markerRange;
                                            o.consumable.consume(r, t.name) &&
                                                (sa(r, !1, o, e, n), sa(r, !0, o, e, n), t.stop());
                                        }),
                                        { priority: t.converterPriority || 'normal' },
                                    ),
                                        o.on(
                                            'removeMarker:' + e,
                                            (function (t) {
                                                return (e, o, i) => {
                                                    const n = t(o.markerName, i);
                                                    if (!n) return;
                                                    const r = i.mapper.markerNameToElements(o.markerName);
                                                    if (r) {
                                                        for (const t of r)
                                                            i.mapper.unbindElementFromMarkerName(t, o.markerName),
                                                                t.is('containerElement')
                                                                    ? (s(`data-${n.group}-start-before`, t),
                                                                      s(`data-${n.group}-start-after`, t),
                                                                      s(`data-${n.group}-end-before`, t),
                                                                      s(`data-${n.group}-end-after`, t))
                                                                    : i.writer.clear(i.writer.createRangeOn(t), t);
                                                        i.writer.clearClonedElementsGroup(o.markerName), e.stop();
                                                    }
                                                    function s(t, e) {
                                                        if (e.hasAttribute(t)) {
                                                            const o = new Set(e.getAttribute(t).split(','));
                                                            o.delete(n.name),
                                                                0 == o.size
                                                                    ? i.writer.removeAttribute(t, e)
                                                                    : i.writer.setAttribute(
                                                                          t,
                                                                          Array.from(o).join(','),
                                                                          e,
                                                                      );
                                                        }
                                                    }
                                                };
                                            })(t.view),
                                            { priority: t.converterPriority || 'normal' },
                                        );
                                };
                            })(t),
                        );
                    }
                }
                function ra(t, e) {
                    const o = t.createAttributeElement('span', e.attributes);
                    return (
                        e.classes && o._addClass(e.classes), e.priority && (o._priority = e.priority), (o._id = e.id), o
                    );
                }
                function sa(t, e, o, i, n) {
                    const r = e ? t.start : t.end;
                    if (o.schema.checkChild(r, '$text')) {
                        !(function (t, e, o, i, n) {
                            const r = `${n.group}-${e ? 'start' : 'end'}`,
                                s = n.name ? { name: n.name } : null,
                                a = o.writer.createUIElement(r, s);
                            o.writer.insert(t, a), o.mapper.bindElementToMarker(a, i.markerName);
                        })(o.mapper.toViewPosition(r), e, o, i, n);
                    } else {
                        let t, s;
                        (e && r.nodeAfter) || (!e && !r.nodeBefore)
                            ? ((t = r.nodeAfter), (s = !0))
                            : ((t = r.nodeBefore), (s = !1));
                        !(function (t, e, o, i, n, r) {
                            const s = `data-${r.group}-${e ? 'start' : 'end'}-${o ? 'before' : 'after'}`,
                                a = t.hasAttribute(s) ? t.getAttribute(s).split(',') : [];
                            a.unshift(r.name),
                                i.writer.setAttribute(s, a.join(','), t),
                                i.mapper.bindElementToMarker(t, n.markerName);
                        })(o.mapper.toViewElement(t), e, s, o, i, n);
                    }
                }
                function aa(t, e) {
                    return 'function' == typeof t
                        ? t
                        : (o, i) =>
                              (function (t, e, o) {
                                  'string' == typeof t && (t = { name: t });
                                  let i;
                                  const n = e.writer,
                                      r = Object.assign({}, t.attributes);
                                  if ('container' == o) i = n.createContainerElement(t.name, r);
                                  else if ('attribute' == o) {
                                      const e = { priority: t.priority || un.DEFAULT_PRIORITY };
                                      i = n.createAttributeElement(t.name, r, e);
                                  } else i = n.createUIElement(t.name, r);
                                  if (t.styles) {
                                      const e = Object.keys(t.styles);
                                      for (const o of e) n.setStyle(o, t.styles[o], i);
                                  }
                                  if (t.classes) {
                                      const e = t.classes;
                                      if ('string' == typeof e) n.addClass(e, i);
                                      else for (const t of e) n.addClass(t, i);
                                  }
                                  return i;
                              })(t, i, e);
                }
                function la(t) {
                    return t.model.values
                        ? (e, o) => {
                              const i = t.view[e];
                              return i ? i(e, o) : null;
                          }
                        : t.view;
                }
                function ca(t) {
                    return 'string' == typeof t
                        ? (e) => ({ key: t, value: e })
                        : 'object' == typeof t
                        ? t.value
                            ? () => t
                            : (e) => ({ key: t.key, value: e })
                        : t;
                }
                function da(t, e, o) {
                    const i = 'function' == typeof t ? t(e, o) : t;
                    return i ? (i.priority || (i.priority = 10), i.id || (i.id = e.markerName), i) : null;
                }
                function ha(t) {
                    const { schema: e, document: o } = t.model;
                    for (const i of o.getRootNames()) {
                        const n = o.getRoot(i);
                        if (n.isEmpty && !e.checkChild(n, '$text') && e.checkChild(n, 'paragraph'))
                            return t.insertElement('paragraph', n), !0;
                    }
                    return !1;
                }
                function ua(t, e, o) {
                    const i = o.createContext(t);
                    return !!o.checkChild(i, 'paragraph') && !!o.checkChild(i.push('paragraph'), e);
                }
                function fa(t, e) {
                    const o = e.createElement('paragraph');
                    return e.insert(o, t), e.createPositionAt(o, 0);
                }
                class ma extends oa {
                    elementToElement(t) {
                        return this.add(ga(t));
                    }
                    elementToAttribute(t) {
                        return this.add(
                            (function (t) {
                                wa((t = ia(t)));
                                const e = ka(t, !1),
                                    o = pa(t.view),
                                    i = o ? 'element:' + o : 'element';
                                return (o) => {
                                    o.on(i, e, { priority: t.converterPriority || 'low' });
                                };
                            })(t),
                        );
                    }
                    attributeToAttribute(t) {
                        return this.add(
                            (function (t) {
                                t = ia(t);
                                let e = null;
                                ('string' == typeof t.view || t.view.key) &&
                                    (e = (function (t) {
                                        'string' == typeof t.view && (t.view = { key: t.view });
                                        const e = t.view.key;
                                        let o;
                                        if ('class' == e || 'style' == e) {
                                            o = { ['class' == e ? 'classes' : 'styles']: t.view.value };
                                        } else {
                                            const i = void 0 === t.view.value ? /[\s\S]*/ : t.view.value;
                                            o = { attributes: { [e]: i } };
                                        }
                                        t.view.name && (o.name = t.view.name);
                                        return (t.view = o), e;
                                    })(t));
                                wa(t, e);
                                const o = ka(t, !0);
                                return (e) => {
                                    e.on('element', o, { priority: t.converterPriority || 'low' });
                                };
                            })(t),
                        );
                    }
                    elementToMarker(t) {
                        return (
                            Object(l.b)('upcast-helpers-element-to-marker-deprecated'),
                            this.add(
                                (function (t) {
                                    return (
                                        (function (t) {
                                            const e = t.model;
                                            t.model = (t, o) => {
                                                const i = 'string' == typeof e ? e : e(t, o);
                                                return o.writer.createElement('$marker', { 'data-name': i });
                                            };
                                        })((t = ia(t))),
                                        ga(t)
                                    );
                                })(t),
                            )
                        );
                    }
                    dataToMarker(t) {
                        return this.add(
                            (function (t) {
                                (t = ia(t)).model || (t.model = (e) => (e ? t.view + ':' + e : t.view));
                                const e = ba(_a(t, 'start')),
                                    o = ba(_a(t, 'end'));
                                return (i) => {
                                    i.on('element:' + t.view + '-start', e, {
                                        priority: t.converterPriority || 'normal',
                                    }),
                                        i.on('element:' + t.view + '-end', o, {
                                            priority: t.converterPriority || 'normal',
                                        });
                                    const n = a.get('low'),
                                        r = a.get('highest'),
                                        s = a.get(t.converterPriority) / r;
                                    i.on(
                                        'element',
                                        (function (t) {
                                            return (e, o, i) => {
                                                const n = 'data-' + t.view;
                                                function r(e, n) {
                                                    for (const r of n) {
                                                        const n = t.model(r, i),
                                                            s = i.writer.createElement('$marker', { 'data-name': n });
                                                        i.writer.insert(s, e),
                                                            o.modelCursor.isEqual(e)
                                                                ? (o.modelCursor = o.modelCursor.getShiftedBy(1))
                                                                : (o.modelCursor =
                                                                      o.modelCursor._getTransformedByInsertion(e, 1)),
                                                            (o.modelRange = o.modelRange._getTransformedByInsertion(
                                                                e,
                                                                1,
                                                            )[0]);
                                                    }
                                                }
                                                o.modelRange ||
                                                    (o = Object.assign(
                                                        o,
                                                        i.convertChildren(o.viewItem, o.modelCursor),
                                                    )),
                                                    i.consumable.consume(o.viewItem, {
                                                        attributes: n + '-end-after',
                                                    }) &&
                                                        r(
                                                            o.modelRange.end,
                                                            o.viewItem.getAttribute(n + '-end-after').split(','),
                                                        ),
                                                    i.consumable.consume(o.viewItem, {
                                                        attributes: n + '-start-after',
                                                    }) &&
                                                        r(
                                                            o.modelRange.end,
                                                            o.viewItem.getAttribute(n + '-start-after').split(','),
                                                        ),
                                                    i.consumable.consume(o.viewItem, {
                                                        attributes: n + '-end-before',
                                                    }) &&
                                                        r(
                                                            o.modelRange.start,
                                                            o.viewItem.getAttribute(n + '-end-before').split(','),
                                                        ),
                                                    i.consumable.consume(o.viewItem, {
                                                        attributes: n + '-start-before',
                                                    }) &&
                                                        r(
                                                            o.modelRange.start,
                                                            o.viewItem.getAttribute(n + '-start-before').split(','),
                                                        );
                                            };
                                        })(t),
                                        { priority: n + s },
                                    );
                                };
                            })(t),
                        );
                    }
                }
                function ga(t) {
                    const e = ba((t = ia(t))),
                        o = pa(t.view),
                        i = o ? 'element:' + o : 'element';
                    return (o) => {
                        o.on(i, e, { priority: t.converterPriority || 'normal' });
                    };
                }
                function pa(t) {
                    return 'string' == typeof t ? t : 'object' == typeof t && 'string' == typeof t.name ? t.name : null;
                }
                function ba(t) {
                    const e = new hi(t.view);
                    return (o, i, n) => {
                        const r = e.match(i.viewItem);
                        if (!r) return;
                        const s = r.match;
                        if (((s.name = !0), !n.consumable.test(i.viewItem, s))) return;
                        const a = (function (t, e, o) {
                            return t instanceof Function ? t(e, o) : o.writer.createElement(t);
                        })(t.model, i.viewItem, n);
                        a &&
                            n.safeInsert(a, i.modelCursor) &&
                            (n.consumable.consume(i.viewItem, s),
                            n.convertChildren(i.viewItem, a),
                            n.updateConversionResult(a, i));
                    };
                }
                function wa(t, e = null) {
                    const o = null === e || ((t) => t.getAttribute(e)),
                        i = 'object' != typeof t.model ? t.model : t.model.key,
                        n = 'object' != typeof t.model || void 0 === t.model.value ? o : t.model.value;
                    t.model = { key: i, value: n };
                }
                function ka(t, e) {
                    const o = new hi(t.view);
                    return (i, n, r) => {
                        const s = o.match(n.viewItem);
                        if (!s) return;
                        const a = t.model.key,
                            l = 'function' == typeof t.model.value ? t.model.value(n.viewItem, r) : t.model.value;
                        if (null === l) return;
                        if (
                            (!(function (t, e) {
                                const o = 'function' == typeof t ? t(e) : t;
                                if ('object' == typeof o && !pa(o)) return !1;
                                return !o.classes && !o.attributes && !o.styles;
                            })(t.view, n.viewItem)
                                ? delete s.match.name
                                : (s.match.name = !0),
                            !r.consumable.test(n.viewItem, s.match))
                        )
                            return;
                        n.modelRange || (n = Object.assign(n, r.convertChildren(n.viewItem, n.modelCursor)));
                        (function (t, e, o, i) {
                            let n = !1;
                            for (const r of Array.from(t.getItems({ shallow: o })))
                                i.schema.checkAttribute(r, e.key) &&
                                    (i.writer.setAttribute(e.key, e.value, r), (n = !0));
                            return n;
                        })(n.modelRange, { key: a, value: l }, e, r) && r.consumable.consume(n.viewItem, s.match);
                    };
                }
                function _a(t, e) {
                    const o = {};
                    return (
                        (o.view = t.view + '-' + e),
                        (o.model = (e, o) => {
                            const i = e.getAttribute('name'),
                                n = t.model(i, o);
                            return o.writer.createElement('$marker', { 'data-name': n });
                        }),
                        o
                    );
                }
                class va {
                    constructor(t, e) {
                        (this.model = t),
                            (this.view = new As(e)),
                            (this.mapper = new Fs()),
                            (this.downcastDispatcher = new Hs({ mapper: this.mapper, schema: t.schema }));
                        const o = this.model.document,
                            i = o.selection,
                            n = this.model.markers;
                        this.listenTo(
                            this.model,
                            '_beforeChanges',
                            () => {
                                this.view._disableRendering(!0);
                            },
                            { priority: 'highest' },
                        ),
                            this.listenTo(
                                this.model,
                                '_afterChanges',
                                () => {
                                    this.view._disableRendering(!1);
                                },
                                { priority: 'lowest' },
                            ),
                            this.listenTo(
                                o,
                                'change',
                                () => {
                                    this.view.change((t) => {
                                        this.downcastDispatcher.convertChanges(o.differ, n, t),
                                            this.downcastDispatcher.convertSelection(i, n, t);
                                    });
                                },
                                { priority: 'low' },
                            ),
                            this.listenTo(
                                this.view.document,
                                'selectionChange',
                                (function (t, e) {
                                    return (o, i) => {
                                        const n = i.newSelection,
                                            r = [];
                                        for (const t of n.getRanges()) r.push(e.toModelRange(t));
                                        const s = t.createSelection(r, { backward: n.isBackward });
                                        s.isEqual(t.document.selection) ||
                                            t.change((t) => {
                                                t.setSelection(s);
                                            });
                                    };
                                })(this.model, this.mapper),
                            ),
                            this.downcastDispatcher.on(
                                'insert:$text',
                                (t, e, o) => {
                                    if (!o.consumable.consume(e.item, 'insert')) return;
                                    const i = o.writer,
                                        n = o.mapper.toViewPosition(e.range.start),
                                        r = i.createText(e.item.data);
                                    i.insert(n, r);
                                },
                                { priority: 'lowest' },
                            ),
                            this.downcastDispatcher.on(
                                'remove',
                                (t, e, o) => {
                                    const i = o.mapper.toViewPosition(e.position),
                                        n = e.position.getShiftedBy(e.length),
                                        r = o.mapper.toViewPosition(n, { isPhantom: !0 }),
                                        s = o.writer.createRange(i, r),
                                        a = o.writer.remove(s.getTrimmed());
                                    for (const t of o.writer.createRangeIn(a).getItems()) o.mapper.unbindViewElement(t);
                                },
                                { priority: 'low' },
                            ),
                            this.downcastDispatcher.on(
                                'selection',
                                (t, e, o) => {
                                    const i = o.writer,
                                        n = i.document.selection;
                                    for (const t of n.getRanges())
                                        t.isCollapsed && t.end.parent.isAttached() && o.writer.mergeAttributes(t.start);
                                    i.setSelection(null);
                                },
                                { priority: 'low' },
                            ),
                            this.downcastDispatcher.on(
                                'selection',
                                (t, e, o) => {
                                    const i = e.selection;
                                    if (i.isCollapsed) return;
                                    if (!o.consumable.consume(i, 'selection')) return;
                                    const n = [];
                                    for (const t of i.getRanges()) {
                                        const e = o.mapper.toViewRange(t);
                                        n.push(e);
                                    }
                                    o.writer.setSelection(n, { backward: i.isBackward });
                                },
                                { priority: 'low' },
                            ),
                            this.downcastDispatcher.on(
                                'selection',
                                (t, e, o) => {
                                    const i = e.selection;
                                    if (!i.isCollapsed) return;
                                    if (!o.consumable.consume(i, 'selection')) return;
                                    const n = o.writer,
                                        r = i.getFirstPosition(),
                                        s = o.mapper.toViewPosition(r),
                                        a = n.breakAttributes(s);
                                    n.setSelection(a);
                                },
                                { priority: 'low' },
                            ),
                            this.view.document.roots.bindTo(this.model.document.roots).using((t) => {
                                if ('$graveyard' == t.rootName) return null;
                                const e = new on(this.view.document, t.name);
                                return (e.rootName = t.rootName), this.mapper.bindElements(t, e), e;
                            });
                    }
                    destroy() {
                        this.view.destroy(), this.stopListening();
                    }
                }
                Kt(va, Ht);
                class ya {
                    constructor() {
                        this._commands = new Map();
                    }
                    add(t, e) {
                        this._commands.set(t, e);
                    }
                    get(t) {
                        return this._commands.get(t);
                    }
                    execute(t, ...e) {
                        const o = this.get(t);
                        if (!o) throw new l.a('commandcollection-command-not-found', this, { commandName: t });
                        return o.execute(...e);
                    }
                    *names() {
                        yield* this._commands.keys();
                    }
                    *commands() {
                        yield* this._commands.values();
                    }
                    [Symbol.iterator]() {
                        return this._commands[Symbol.iterator]();
                    }
                    destroy() {
                        for (const t of this.commands()) t.destroy();
                    }
                }
                class xa {
                    constructor() {
                        this._consumables = new Map();
                    }
                    add(t, e) {
                        let o;
                        t.is('$text') || t.is('documentFragment')
                            ? this._consumables.set(t, !0)
                            : (this._consumables.has(t)
                                  ? (o = this._consumables.get(t))
                                  : ((o = new Ca(t)), this._consumables.set(t, o)),
                              o.add(e));
                    }
                    test(t, e) {
                        const o = this._consumables.get(t);
                        return void 0 === o ? null : t.is('$text') || t.is('documentFragment') ? o : o.test(e);
                    }
                    consume(t, e) {
                        return (
                            !!this.test(t, e) &&
                            (t.is('$text') || t.is('documentFragment')
                                ? this._consumables.set(t, !1)
                                : this._consumables.get(t).consume(e),
                            !0)
                        );
                    }
                    revert(t, e) {
                        const o = this._consumables.get(t);
                        void 0 !== o &&
                            (t.is('$text') || t.is('documentFragment') ? this._consumables.set(t, !0) : o.revert(e));
                    }
                    static consumablesFromElement(t) {
                        const e = { element: t, name: !0, attributes: [], classes: [], styles: [] },
                            o = t.getAttributeKeys();
                        for (const t of o) 'style' != t && 'class' != t && e.attributes.push(t);
                        const i = t.getClassNames();
                        for (const t of i) e.classes.push(t);
                        const n = t.getStyleNames();
                        for (const t of n) e.styles.push(t);
                        return e;
                    }
                    static createFrom(t, e) {
                        if ((e || (e = new xa(t)), t.is('$text'))) return e.add(t), e;
                        t.is('element') && e.add(t, xa.consumablesFromElement(t)), t.is('documentFragment') && e.add(t);
                        for (const o of t.getChildren()) e = xa.createFrom(o, e);
                        return e;
                    }
                }
                class Ca {
                    constructor(t) {
                        (this.element = t),
                            (this._canConsumeName = null),
                            (this._consumables = { attributes: new Map(), styles: new Map(), classes: new Map() });
                    }
                    add(t) {
                        t.name && (this._canConsumeName = !0);
                        for (const e in this._consumables) e in t && this._add(e, t[e]);
                    }
                    test(t) {
                        if (t.name && !this._canConsumeName) return this._canConsumeName;
                        for (const e in this._consumables)
                            if (e in t) {
                                const o = this._test(e, t[e]);
                                if (!0 !== o) return o;
                            }
                        return !0;
                    }
                    consume(t) {
                        t.name && (this._canConsumeName = !1);
                        for (const e in this._consumables) e in t && this._consume(e, t[e]);
                    }
                    revert(t) {
                        t.name && (this._canConsumeName = !0);
                        for (const e in this._consumables) e in t && this._revert(e, t[e]);
                    }
                    _add(t, e) {
                        const o = _t(e) ? e : [e],
                            i = this._consumables[t];
                        for (const e of o) {
                            if ('attributes' === t && ('class' === e || 'style' === e))
                                throw new l.a('viewconsumable-invalid-attribute', this);
                            if ((i.set(e, !0), 'styles' === t))
                                for (const t of this.element.document.stylesProcessor.getRelatedStyles(e)) i.set(t, !0);
                        }
                    }
                    _test(t, e) {
                        const o = _t(e) ? e : [e],
                            i = this._consumables[t];
                        for (const e of o)
                            if ('attributes' !== t || ('class' !== e && 'style' !== e)) {
                                const t = i.get(e);
                                if (void 0 === t) return null;
                                if (!t) return !1;
                            } else {
                                const t = 'class' == e ? 'classes' : 'styles',
                                    o = this._test(t, [...this._consumables[t].keys()]);
                                if (!0 !== o) return o;
                            }
                        return !0;
                    }
                    _consume(t, e) {
                        const o = _t(e) ? e : [e],
                            i = this._consumables[t];
                        for (const e of o)
                            if ('attributes' !== t || ('class' !== e && 'style' !== e)) {
                                if ((i.set(e, !1), 'styles' == t))
                                    for (const t of this.element.document.stylesProcessor.getRelatedStyles(e))
                                        i.set(t, !1);
                            } else {
                                const t = 'class' == e ? 'classes' : 'styles';
                                this._consume(t, [...this._consumables[t].keys()]);
                            }
                    }
                    _revert(t, e) {
                        const o = _t(e) ? e : [e],
                            i = this._consumables[t];
                        for (const e of o)
                            if ('attributes' !== t || ('class' !== e && 'style' !== e)) {
                                !1 === i.get(e) && i.set(e, !0);
                            } else {
                                const t = 'class' == e ? 'classes' : 'styles';
                                this._revert(t, [...this._consumables[t].keys()]);
                            }
                    }
                }
                class Aa {
                    constructor() {
                        (this._sourceDefinitions = {}),
                            (this._attributeProperties = {}),
                            this.decorate('checkChild'),
                            this.decorate('checkAttribute'),
                            this.on(
                                'checkAttribute',
                                (t, e) => {
                                    e[0] = new Ta(e[0]);
                                },
                                { priority: 'highest' },
                            ),
                            this.on(
                                'checkChild',
                                (t, e) => {
                                    (e[0] = new Ta(e[0])), (e[1] = this.getDefinition(e[1]));
                                },
                                { priority: 'highest' },
                            );
                    }
                    register(t, e) {
                        if (this._sourceDefinitions[t])
                            throw new l.a('schema-cannot-register-item-twice', this, { itemName: t });
                        (this._sourceDefinitions[t] = [Object.assign({}, e)]), this._clearCache();
                    }
                    extend(t, e) {
                        if (!this._sourceDefinitions[t])
                            throw new l.a('schema-cannot-extend-missing-item', this, { itemName: t });
                        this._sourceDefinitions[t].push(Object.assign({}, e)), this._clearCache();
                    }
                    getDefinitions() {
                        return this._compiledDefinitions || this._compile(), this._compiledDefinitions;
                    }
                    getDefinition(t) {
                        let e;
                        return (
                            (e =
                                'string' == typeof t
                                    ? t
                                    : t.is && (t.is('$text') || t.is('$textProxy'))
                                    ? '$text'
                                    : t.name),
                            this.getDefinitions()[e]
                        );
                    }
                    isRegistered(t) {
                        return !!this.getDefinition(t);
                    }
                    isBlock(t) {
                        const e = this.getDefinition(t);
                        return !(!e || !e.isBlock);
                    }
                    isLimit(t) {
                        const e = this.getDefinition(t);
                        return !!e && !(!e.isLimit && !e.isObject);
                    }
                    isObject(t) {
                        const e = this.getDefinition(t);
                        return !!e && !!(e.isObject || (e.isLimit && e.isSelectable && e.isContent));
                    }
                    isInline(t) {
                        const e = this.getDefinition(t);
                        return !(!e || !e.isInline);
                    }
                    isSelectable(t) {
                        const e = this.getDefinition(t);
                        return !!e && !(!e.isSelectable && !e.isObject);
                    }
                    isContent(t) {
                        const e = this.getDefinition(t);
                        return !!e && !(!e.isContent && !e.isObject);
                    }
                    checkChild(t, e) {
                        return !!e && this._checkContextMatch(e, t);
                    }
                    checkAttribute(t, e) {
                        const o = this.getDefinition(t.last);
                        return !!o && o.allowAttributes.includes(e);
                    }
                    checkMerge(t, e = null) {
                        if (t instanceof Os) {
                            const e = t.nodeBefore,
                                o = t.nodeAfter;
                            if (!(e instanceof Rs)) throw new l.a('schema-check-merge-no-element-before', this);
                            if (!(o instanceof Rs)) throw new l.a('schema-check-merge-no-element-after', this);
                            return this.checkMerge(e, o);
                        }
                        for (const o of e.getChildren()) if (!this.checkChild(t, o)) return !1;
                        return !0;
                    }
                    addChildCheck(t) {
                        this.on(
                            'checkChild',
                            (e, [o, i]) => {
                                if (!i) return;
                                const n = t(o, i);
                                'boolean' == typeof n && (e.stop(), (e.return = n));
                            },
                            { priority: 'high' },
                        );
                    }
                    addAttributeCheck(t) {
                        this.on(
                            'checkAttribute',
                            (e, [o, i]) => {
                                const n = t(o, i);
                                'boolean' == typeof n && (e.stop(), (e.return = n));
                            },
                            { priority: 'high' },
                        );
                    }
                    setAttributeProperties(t, e) {
                        this._attributeProperties[t] = Object.assign(this.getAttributeProperties(t), e);
                    }
                    getAttributeProperties(t) {
                        return this._attributeProperties[t] || {};
                    }
                    getLimitElement(t) {
                        let e;
                        if (t instanceof Os) e = t.parent;
                        else {
                            e = (t instanceof Bs ? [t] : Array.from(t.getRanges())).reduce((t, e) => {
                                const o = e.getCommonAncestor();
                                return t ? t.getCommonAncestor(o, { includeSelf: !0 }) : o;
                            }, null);
                        }
                        for (; !this.isLimit(e) && e.parent; ) e = e.parent;
                        return e;
                    }
                    checkAttributeInSelection(t, e) {
                        if (t.isCollapsed) {
                            const o = [...t.getFirstPosition().getAncestors(), new Ps('', t.getAttributes())];
                            return this.checkAttribute(o, e);
                        }
                        {
                            const o = t.getRanges();
                            for (const t of o) for (const o of t) if (this.checkAttribute(o.item, e)) return !0;
                        }
                        return !1;
                    }
                    *getValidRanges(t, e) {
                        t = (function* (t) {
                            for (const e of t) yield* e.getMinimalFlatRanges();
                        })(t);
                        for (const o of t) yield* this._getValidRangesForRange(o, e);
                    }
                    getNearestSelectionRange(t, e = 'both') {
                        if (this.checkChild(t, '$text')) return new Bs(t);
                        let o, i;
                        const n =
                            t
                                .getAncestors()
                                .reverse()
                                .find((t) => this.isLimit(t)) || t.root;
                        ('both' != e && 'backward' != e) ||
                            (o = new Is({ boundaries: Bs._createIn(n), startPosition: t, direction: 'backward' })),
                            ('both' != e && 'forward' != e) ||
                                (i = new Is({ boundaries: Bs._createIn(n), startPosition: t }));
                        for (const t of (function* (t, e) {
                            let o = !1;
                            for (; !o; ) {
                                if (((o = !0), t)) {
                                    const e = t.next();
                                    e.done || ((o = !1), yield { walker: t, value: e.value });
                                }
                                if (e) {
                                    const t = e.next();
                                    t.done || ((o = !1), yield { walker: e, value: t.value });
                                }
                            }
                        })(o, i)) {
                            const e = t.walker == o ? 'elementEnd' : 'elementStart',
                                i = t.value;
                            if (i.type == e && this.isObject(i.item)) return Bs._createOn(i.item);
                            if (this.checkChild(i.nextPosition, '$text')) return new Bs(i.nextPosition);
                        }
                        return null;
                    }
                    findAllowedParent(t, e) {
                        let o = t.parent;
                        for (; o; ) {
                            if (this.checkChild(o, e)) return o;
                            if (this.isLimit(o)) return null;
                            o = o.parent;
                        }
                        return null;
                    }
                    removeDisallowedAttributes(t, e) {
                        for (const o of t)
                            if (o.is('$text')) Ba(this, o, e);
                            else {
                                const t = Bs._createIn(o).getPositions();
                                for (const o of t) {
                                    Ba(this, o.nodeBefore || o.parent, e);
                                }
                            }
                    }
                    createContext(t) {
                        return new Ta(t);
                    }
                    _clearCache() {
                        this._compiledDefinitions = null;
                    }
                    _compile() {
                        const t = {},
                            e = this._sourceDefinitions,
                            o = Object.keys(e);
                        for (const i of o) t[i] = Pa(e[i], i);
                        for (const e of o) Sa(t, e);
                        for (const e of o) Ea(t, e);
                        for (const e of o) Ra(t, e), Ia(t, e);
                        for (const e of o) Va(t, e), Oa(t, e);
                        this._compiledDefinitions = t;
                    }
                    _checkContextMatch(t, e, o = e.length - 1) {
                        const i = e.getItem(o);
                        if (t.allowIn.includes(i.name)) {
                            if (0 == o) return !0;
                            {
                                const t = this.getDefinition(i);
                                return this._checkContextMatch(t, e, o - 1);
                            }
                        }
                        return !1;
                    }
                    *_getValidRangesForRange(t, e) {
                        let o = t.start,
                            i = t.start;
                        for (const n of t.getItems({ shallow: !0 }))
                            n.is('element') && (yield* this._getValidRangesForRange(Bs._createIn(n), e)),
                                this.checkAttribute(n, e) ||
                                    (o.isEqual(i) || (yield new Bs(o, i)), (o = Os._createAfter(n))),
                                (i = Os._createAfter(n));
                        o.isEqual(i) || (yield new Bs(o, i));
                    }
                }
                Kt(Aa, Ht);
                class Ta {
                    constructor(t) {
                        if (t instanceof Ta) return t;
                        'string' == typeof t
                            ? (t = [t])
                            : Array.isArray(t) || (t = t.getAncestors({ includeSelf: !0 })),
                            t[0] && 'string' != typeof t[0] && t[0].is('documentFragment') && t.shift(),
                            (this._items = t.map(Na));
                    }
                    get length() {
                        return this._items.length;
                    }
                    get last() {
                        return this._items[this._items.length - 1];
                    }
                    [Symbol.iterator]() {
                        return this._items[Symbol.iterator]();
                    }
                    push(t) {
                        const e = new Ta([t]);
                        return (e._items = [...this._items, ...e._items]), e;
                    }
                    getItem(t) {
                        return this._items[t];
                    }
                    *getNames() {
                        yield* this._items.map((t) => t.name);
                    }
                    endsWith(t) {
                        return Array.from(this.getNames()).join(' ').endsWith(t);
                    }
                    startsWith(t) {
                        return Array.from(this.getNames()).join(' ').startsWith(t);
                    }
                }
                function Pa(t, e) {
                    const o = {
                        name: e,
                        allowIn: [],
                        allowContentOf: [],
                        allowWhere: [],
                        allowAttributes: [],
                        allowAttributesOf: [],
                        inheritTypesFrom: [],
                    };
                    return (
                        (function (t, e) {
                            for (const o of t) {
                                const t = Object.keys(o).filter((t) => t.startsWith('is'));
                                for (const i of t) e[i] = o[i];
                            }
                        })(t, o),
                        za(t, o, 'allowIn'),
                        za(t, o, 'allowContentOf'),
                        za(t, o, 'allowWhere'),
                        za(t, o, 'allowAttributes'),
                        za(t, o, 'allowAttributesOf'),
                        za(t, o, 'inheritTypesFrom'),
                        (function (t, e) {
                            for (const o of t) {
                                const t = o.inheritAllFrom;
                                t &&
                                    (e.allowContentOf.push(t),
                                    e.allowWhere.push(t),
                                    e.allowAttributesOf.push(t),
                                    e.inheritTypesFrom.push(t));
                            }
                        })(t, o),
                        o
                    );
                }
                function Sa(t, e) {
                    for (const o of t[e].allowContentOf)
                        if (t[o]) {
                            Ma(t, o).forEach((t) => {
                                t.allowIn.push(e);
                            });
                        }
                    delete t[e].allowContentOf;
                }
                function Ea(t, e) {
                    for (const o of t[e].allowWhere) {
                        const i = t[o];
                        if (i) {
                            const o = i.allowIn;
                            t[e].allowIn.push(...o);
                        }
                    }
                    delete t[e].allowWhere;
                }
                function Ra(t, e) {
                    for (const o of t[e].allowAttributesOf) {
                        const i = t[o];
                        if (i) {
                            const o = i.allowAttributes;
                            t[e].allowAttributes.push(...o);
                        }
                    }
                    delete t[e].allowAttributesOf;
                }
                function Ia(t, e) {
                    const o = t[e];
                    for (const e of o.inheritTypesFrom) {
                        const i = t[e];
                        if (i) {
                            const t = Object.keys(i).filter((t) => t.startsWith('is'));
                            for (const e of t) e in o || (o[e] = i[e]);
                        }
                    }
                    delete o.inheritTypesFrom;
                }
                function Va(t, e) {
                    const o = t[e],
                        i = o.allowIn.filter((e) => t[e]);
                    o.allowIn = Array.from(new Set(i));
                }
                function Oa(t, e) {
                    const o = t[e];
                    o.allowAttributes = Array.from(new Set(o.allowAttributes));
                }
                function za(t, e, o) {
                    for (const i of t)
                        'string' == typeof i[o] ? e[o].push(i[o]) : Array.isArray(i[o]) && e[o].push(...i[o]);
                }
                function Ma(t, e) {
                    const o = t[e];
                    return ((i = t), Object.keys(i).map((t) => i[t])).filter((t) => t.allowIn.includes(o.name));
                    var i;
                }
                function Na(t) {
                    return 'string' == typeof t
                        ? { name: t, *getAttributeKeys() {}, getAttribute() {} }
                        : {
                              name: t.is('element') ? t.name : '$text',
                              *getAttributeKeys() {
                                  yield* t.getAttributeKeys();
                              },
                              getAttribute: (e) => t.getAttribute(e),
                          };
                }
                function Ba(t, e, o) {
                    for (const i of e.getAttributeKeys()) t.checkAttribute(e, i) || o.removeAttribute(i, e);
                }
                class Fa {
                    constructor(t = {}) {
                        (this._splitParts = new Map()),
                            (this._cursorParents = new Map()),
                            (this._modelCursor = null),
                            (this.conversionApi = Object.assign({}, t)),
                            (this.conversionApi.convertItem = this._convertItem.bind(this)),
                            (this.conversionApi.convertChildren = this._convertChildren.bind(this)),
                            (this.conversionApi.safeInsert = this._safeInsert.bind(this)),
                            (this.conversionApi.updateConversionResult = this._updateConversionResult.bind(this)),
                            (this.conversionApi.splitToAllowedParent = this._splitToAllowedParent.bind(this)),
                            (this.conversionApi.getSplitParts = this._getSplitParts.bind(this));
                    }
                    convert(t, e, o = ['$root']) {
                        this.fire('viewCleanup', t),
                            (this._modelCursor = (function (t, e) {
                                let o;
                                for (const i of new Ta(t)) {
                                    const t = {};
                                    for (const e of i.getAttributeKeys()) t[e] = i.getAttribute(e);
                                    const n = e.createElement(i.name, t);
                                    o && e.append(n, o), (o = Os._createAt(n, 0));
                                }
                                return o;
                            })(o, e)),
                            (this.conversionApi.writer = e),
                            (this.conversionApi.consumable = xa.createFrom(t)),
                            (this.conversionApi.store = {});
                        const { modelRange: i } = this._convertItem(t, this._modelCursor),
                            n = e.createDocumentFragment();
                        if (i) {
                            this._removeEmptyElements();
                            for (const t of Array.from(this._modelCursor.parent.getChildren())) e.append(t, n);
                            n.markers = (function (t, e) {
                                const o = new Set(),
                                    i = new Map(),
                                    n = Bs._createIn(t).getItems();
                                for (const t of n) '$marker' == t.name && o.add(t);
                                for (const t of o) {
                                    const o = t.getAttribute('data-name'),
                                        n = e.createPositionBefore(t);
                                    i.has(o) ? (i.get(o).end = n.clone()) : i.set(o, new Bs(n.clone())), e.remove(t);
                                }
                                return i;
                            })(n, e);
                        }
                        return (
                            (this._modelCursor = null),
                            this._splitParts.clear(),
                            this._cursorParents.clear(),
                            (this.conversionApi.writer = null),
                            (this.conversionApi.store = null),
                            n
                        );
                    }
                    _convertItem(t, e) {
                        const o = Object.assign({ viewItem: t, modelCursor: e, modelRange: null });
                        if (
                            (t.is('element')
                                ? this.fire('element:' + t.name, o, this.conversionApi)
                                : t.is('$text')
                                ? this.fire('text', o, this.conversionApi)
                                : this.fire('documentFragment', o, this.conversionApi),
                            o.modelRange && !(o.modelRange instanceof Bs))
                        )
                            throw new l.a('view-conversion-dispatcher-incorrect-result', this);
                        return { modelRange: o.modelRange, modelCursor: o.modelCursor };
                    }
                    _convertChildren(t, e) {
                        let o = e.is('position') ? e : Os._createAt(e, 0);
                        const i = new Bs(o);
                        for (const e of Array.from(t.getChildren())) {
                            const t = this._convertItem(e, o);
                            t.modelRange instanceof Bs && ((i.end = t.modelRange.end), (o = t.modelCursor));
                        }
                        return { modelRange: i, modelCursor: o };
                    }
                    _safeInsert(t, e) {
                        const o = this._splitToAllowedParent(t, e);
                        return !!o && (this.conversionApi.writer.insert(t, o.position), !0);
                    }
                    _updateConversionResult(t, e) {
                        const o = this._getSplitParts(t),
                            i = this.conversionApi.writer;
                        e.modelRange ||
                            (e.modelRange = i.createRange(
                                i.createPositionBefore(t),
                                i.createPositionAfter(o[o.length - 1]),
                            ));
                        const n = this._cursorParents.get(t);
                        e.modelCursor = n ? i.createPositionAt(n, 0) : e.modelRange.end;
                    }
                    _splitToAllowedParent(t, e) {
                        const { schema: o, writer: i } = this.conversionApi;
                        let n = o.findAllowedParent(e, t);
                        if (n) {
                            if (n === e.parent) return { position: e };
                            this._modelCursor.parent.getAncestors().includes(n) && (n = null);
                        }
                        if (!n) return ua(e, t, o) ? { position: fa(e, i) } : null;
                        const r = this.conversionApi.writer.split(e, n),
                            s = [];
                        for (const t of r.range.getWalker())
                            if ('elementEnd' == t.type) s.push(t.item);
                            else {
                                const e = s.pop(),
                                    o = t.item;
                                this._registerSplitPair(e, o);
                            }
                        const a = r.range.end.parent;
                        return this._cursorParents.set(t, a), { position: r.position, cursorParent: a };
                    }
                    _registerSplitPair(t, e) {
                        this._splitParts.has(t) || this._splitParts.set(t, [t]);
                        const o = this._splitParts.get(t);
                        this._splitParts.set(e, o), o.push(e);
                    }
                    _getSplitParts(t) {
                        let e;
                        return (e = this._splitParts.has(t) ? this._splitParts.get(t) : [t]), e;
                    }
                    _removeEmptyElements() {
                        let t = !1;
                        for (const e of this._splitParts.keys())
                            e.isEmpty && (this.conversionApi.writer.remove(e), this._splitParts.delete(e), (t = !0));
                        t && this._removeEmptyElements();
                    }
                }
                Kt(Fa, h);
                class Da {
                    getHtml(t) {
                        const e = document.implementation.createHTMLDocument('').createElement('div');
                        return e.appendChild(t), e.innerHTML;
                    }
                }
                class La {
                    constructor(t) {
                        (this._domParser = new DOMParser()),
                            (this._domConverter = new mr(t, { blockFillerMode: 'nbsp' })),
                            (this._htmlWriter = new Da());
                    }
                    toData(t) {
                        const e = this._domConverter.viewToDom(t, document);
                        return this._htmlWriter.getHtml(e);
                    }
                    toView(t) {
                        const e = this._toDom(t);
                        return this._domConverter.domToView(e);
                    }
                    registerRawContentMatcher(t) {
                        this._domConverter.registerRawContentMatcher(t);
                    }
                    _toDom(t) {
                        const e = this._domParser.parseFromString(t, 'text/html'),
                            o = e.createDocumentFragment(),
                            i = e.body.childNodes;
                        for (; i.length > 0; ) o.appendChild(i[0]);
                        return o;
                    }
                }
                class Ha {
                    constructor(t, e) {
                        (this.model = t),
                            (this.mapper = new Fs()),
                            (this.downcastDispatcher = new Hs({ mapper: this.mapper, schema: t.schema })),
                            this.downcastDispatcher.on(
                                'insert:$text',
                                (t, e, o) => {
                                    if (!o.consumable.consume(e.item, 'insert')) return;
                                    const i = o.writer,
                                        n = o.mapper.toViewPosition(e.range.start),
                                        r = i.createText(e.item.data);
                                    i.insert(n, r);
                                },
                                { priority: 'lowest' },
                            ),
                            (this.upcastDispatcher = new Fa({ schema: t.schema })),
                            (this.viewDocument = new hn(e)),
                            (this.stylesProcessor = e),
                            (this.htmlProcessor = new La(this.viewDocument)),
                            (this.processor = this.htmlProcessor),
                            (this._viewWriter = new Mn(this.viewDocument)),
                            this.upcastDispatcher.on(
                                'text',
                                (t, e, { schema: o, consumable: i, writer: n }) => {
                                    let r = e.modelCursor;
                                    if (!i.test(e.viewItem)) return;
                                    if (!o.checkChild(r, '$text')) {
                                        if (!ua(r, '$text', o)) return;
                                        r = fa(r, n);
                                    }
                                    i.consume(e.viewItem);
                                    const s = n.createText(e.viewItem.data);
                                    n.insert(s, r),
                                        (e.modelRange = n.createRange(r, r.getShiftedBy(s.offsetSize))),
                                        (e.modelCursor = e.modelRange.end);
                                },
                                { priority: 'lowest' },
                            ),
                            this.upcastDispatcher.on(
                                'element',
                                (t, e, o) => {
                                    if (!e.modelRange && o.consumable.consume(e.viewItem, { name: !0 })) {
                                        const { modelRange: t, modelCursor: i } = o.convertChildren(
                                            e.viewItem,
                                            e.modelCursor,
                                        );
                                        (e.modelRange = t), (e.modelCursor = i);
                                    }
                                },
                                { priority: 'lowest' },
                            ),
                            this.upcastDispatcher.on(
                                'documentFragment',
                                (t, e, o) => {
                                    if (!e.modelRange && o.consumable.consume(e.viewItem, { name: !0 })) {
                                        const { modelRange: t, modelCursor: i } = o.convertChildren(
                                            e.viewItem,
                                            e.modelCursor,
                                        );
                                        (e.modelRange = t), (e.modelCursor = i);
                                    }
                                },
                                { priority: 'lowest' },
                            ),
                            this.decorate('init'),
                            this.decorate('set'),
                            this.on(
                                'init',
                                () => {
                                    this.fire('ready');
                                },
                                { priority: 'lowest' },
                            ),
                            this.on(
                                'ready',
                                () => {
                                    this.model.enqueueChange('transparent', ha);
                                },
                                { priority: 'lowest' },
                            );
                    }
                    get(t = {}) {
                        const { rootName: e = 'main', trim: o = 'empty' } = t;
                        if (!this._checkIfRootsExists([e])) throw new l.a('datacontroller-get-non-existent-root', this);
                        const i = this.model.document.getRoot(e);
                        return 'empty' !== o || this.model.hasContent(i, { ignoreWhitespaces: !0 })
                            ? this.stringify(i, t)
                            : '';
                    }
                    stringify(t, e) {
                        const o = this.toView(t, e);
                        return this.processor.toData(o);
                    }
                    toView(t, e) {
                        const o = this.viewDocument,
                            i = this._viewWriter;
                        this.mapper.clearBindings();
                        const n = Bs._createIn(t),
                            r = new zn(o);
                        if (
                            (this.mapper.bindElements(t, r),
                            (this.downcastDispatcher.conversionApi.options = e),
                            this.downcastDispatcher.convertInsert(n, i),
                            !t.is('documentFragment'))
                        ) {
                            const e = (function (t) {
                                const e = [],
                                    o = t.root.document;
                                if (!o) return [];
                                const i = Bs._createIn(t);
                                for (const t of o.model.markers) {
                                    const o = i.getIntersection(t.getRange());
                                    o && e.push([t.name, o]);
                                }
                                return e;
                            })(t);
                            for (const [t, o] of e) this.downcastDispatcher.convertMarkerAdd(t, o, i);
                        }
                        return delete this.downcastDispatcher.conversionApi.options, r;
                    }
                    init(t) {
                        if (this.model.document.version) throw new l.a('datacontroller-init-document-not-empty', this);
                        let e = {};
                        if (('string' == typeof t ? (e.main = t) : (e = t), !this._checkIfRootsExists(Object.keys(e))))
                            throw new l.a('datacontroller-init-non-existent-root', this);
                        return (
                            this.model.enqueueChange('transparent', (t) => {
                                for (const o of Object.keys(e)) {
                                    const i = this.model.document.getRoot(o);
                                    t.insert(this.parse(e[o], i), i, 0);
                                }
                            }),
                            Promise.resolve()
                        );
                    }
                    set(t) {
                        let e = {};
                        if (('string' == typeof t ? (e.main = t) : (e = t), !this._checkIfRootsExists(Object.keys(e))))
                            throw new l.a('datacontroller-set-non-existent-root', this);
                        this.model.enqueueChange('transparent', (t) => {
                            t.setSelection(null),
                                t.removeSelectionAttribute(this.model.document.selection.getAttributeKeys());
                            for (const o of Object.keys(e)) {
                                const i = this.model.document.getRoot(o);
                                t.remove(t.createRangeIn(i)), t.insert(this.parse(e[o], i), i, 0);
                            }
                        });
                    }
                    parse(t, e = '$root') {
                        const o = this.processor.toView(t);
                        return this.toModel(o, e);
                    }
                    toModel(t, e = '$root') {
                        return this.model.change((o) => this.upcastDispatcher.convert(t, o, e));
                    }
                    addStyleProcessorRules(t) {
                        t(this.stylesProcessor);
                    }
                    registerRawContentMatcher(t) {
                        this.processor &&
                            this.processor !== this.htmlProcessor &&
                            this.processor.registerRawContentMatcher(t),
                            this.htmlProcessor.registerRawContentMatcher(t);
                    }
                    destroy() {
                        this.stopListening();
                    }
                    _checkIfRootsExists(t) {
                        for (const e of t) if (!this.model.document.getRootNames().includes(e)) return !1;
                        return !0;
                    }
                }
                Kt(Ha, Ht);
                class ja {
                    constructor(t, e) {
                        (this._helpers = new Map()),
                            (this._downcast = Zo(t)),
                            this._createConversionHelpers({
                                name: 'downcast',
                                dispatchers: this._downcast,
                                isDowncast: !0,
                            }),
                            (this._upcast = Zo(e)),
                            this._createConversionHelpers({
                                name: 'upcast',
                                dispatchers: this._upcast,
                                isDowncast: !1,
                            });
                    }
                    addAlias(t, e) {
                        const o = this._downcast.includes(e);
                        if (!this._upcast.includes(e) && !o)
                            throw new l.a('conversion-add-alias-dispatcher-not-registered', this);
                        this._createConversionHelpers({ name: t, dispatchers: [e], isDowncast: o });
                    }
                    for(t) {
                        if (!this._helpers.has(t)) throw new l.a('conversion-for-unknown-group', this);
                        return this._helpers.get(t);
                    }
                    elementToElement(t) {
                        this.for('downcast').elementToElement(t);
                        for (const { model: e, view: o } of Wa(t))
                            this.for('upcast').elementToElement({
                                model: e,
                                view: o,
                                converterPriority: t.converterPriority,
                            });
                    }
                    attributeToElement(t) {
                        this.for('downcast').attributeToElement(t);
                        for (const { model: e, view: o } of Wa(t))
                            this.for('upcast').elementToAttribute({
                                view: o,
                                model: e,
                                converterPriority: t.converterPriority,
                            });
                    }
                    attributeToAttribute(t) {
                        this.for('downcast').attributeToAttribute(t);
                        for (const { model: e, view: o } of Wa(t))
                            this.for('upcast').attributeToAttribute({ view: o, model: e });
                    }
                    _createConversionHelpers({ name: t, dispatchers: e, isDowncast: o }) {
                        if (this._helpers.has(t)) throw new l.a('conversion-group-exists', this);
                        const i = o ? new na(e) : new ma(e);
                        this._helpers.set(t, i);
                    }
                }
                function* Wa(t) {
                    if (t.model.values)
                        for (const e of t.model.values) {
                            const o = { key: t.model.key, value: e },
                                i = t.view[e],
                                n = t.upcastAlso ? t.upcastAlso[e] : void 0;
                            yield* qa(o, i, n);
                        }
                    else yield* qa(t.model, t.view, t.upcastAlso);
                }
                function* qa(t, e, o) {
                    if ((yield { model: t, view: e }, o)) for (const e of Zo(o)) yield { model: t, view: e };
                }
                class Ua {
                    constructor(t = 'default') {
                        (this.operations = []), (this.type = t);
                    }
                    get baseVersion() {
                        for (const t of this.operations) if (null !== t.baseVersion) return t.baseVersion;
                        return null;
                    }
                    addOperation(t) {
                        return (t.batch = this), this.operations.push(t), t;
                    }
                }
                class $a {
                    constructor(t) {
                        (this.baseVersion = t),
                            (this.isDocumentOperation = null !== this.baseVersion),
                            (this.batch = null);
                    }
                    _validate() {}
                    toJSON() {
                        const t = Object.assign({}, this);
                        return (
                            (t.__className = this.constructor.className),
                            delete t.batch,
                            delete t.isDocumentOperation,
                            t
                        );
                    }
                    static get className() {
                        return 'Operation';
                    }
                    static fromJSON(t) {
                        return new this(t.baseVersion);
                    }
                }
                class Ka {
                    constructor(t) {
                        (this.markers = new Map()), (this._children = new Es()), t && this._insertChild(0, t);
                    }
                    [Symbol.iterator]() {
                        return this.getChildren();
                    }
                    get childCount() {
                        return this._children.length;
                    }
                    get maxOffset() {
                        return this._children.maxOffset;
                    }
                    get isEmpty() {
                        return 0 === this.childCount;
                    }
                    get root() {
                        return this;
                    }
                    get parent() {
                        return null;
                    }
                    is(t) {
                        return 'documentFragment' === t || 'model:documentFragment' === t;
                    }
                    getChild(t) {
                        return this._children.getNode(t);
                    }
                    getChildren() {
                        return this._children[Symbol.iterator]();
                    }
                    getChildIndex(t) {
                        return this._children.getNodeIndex(t);
                    }
                    getChildStartOffset(t) {
                        return this._children.getNodeStartOffset(t);
                    }
                    getPath() {
                        return [];
                    }
                    getNodeByPath(t) {
                        let e = this;
                        for (const o of t) e = e.getChild(e.offsetToIndex(o));
                        return e;
                    }
                    offsetToIndex(t) {
                        return this._children.offsetToIndex(t);
                    }
                    toJSON() {
                        const t = [];
                        for (const e of this._children) t.push(e.toJSON());
                        return t;
                    }
                    static fromJSON(t) {
                        const e = [];
                        for (const o of t) o.name ? e.push(Rs.fromJSON(o)) : e.push(Ps.fromJSON(o));
                        return new Ka(e);
                    }
                    _appendChild(t) {
                        this._insertChild(this.childCount, t);
                    }
                    _insertChild(t, e) {
                        const o = (function (t) {
                            if ('string' == typeof t) return [new Ps(t)];
                            Jo(t) || (t = [t]);
                            return Array.from(t).map((t) =>
                                'string' == typeof t
                                    ? new Ps(t)
                                    : t instanceof Ss
                                    ? new Ps(t.data, t.getAttributes())
                                    : t,
                            );
                        })(e);
                        for (const t of o) null !== t.parent && t._remove(), (t.parent = this);
                        this._children._insertNodes(t, o);
                    }
                    _removeChildren(t, e = 1) {
                        const o = this._children._removeNodes(t, e);
                        for (const t of o) t.parent = null;
                        return o;
                    }
                }
                function Ga(t, e) {
                    const o = (e = Xa(e)).reduce((t, e) => t + e.offsetSize, 0),
                        i = t.parent;
                    Qa(t);
                    const n = t.index;
                    return i._insertChild(n, e), Za(i, n + e.length), Za(i, n), new Bs(t, t.getShiftedBy(o));
                }
                function Ja(t) {
                    if (!t.isFlat) throw new l.a('operation-utils-remove-range-not-flat', this);
                    const e = t.start.parent;
                    Qa(t.start), Qa(t.end);
                    const o = e._removeChildren(t.start.index, t.end.index - t.start.index);
                    return Za(e, t.start.index), o;
                }
                function Ya(t, e) {
                    if (!t.isFlat) throw new l.a('operation-utils-move-range-not-flat', this);
                    const o = Ja(t);
                    return Ga((e = e._getTransformedByDeletion(t.start, t.end.offset - t.start.offset)), o);
                }
                function Xa(t) {
                    const e = [];
                    t instanceof Array || (t = [t]);
                    for (let o = 0; o < t.length; o++)
                        if ('string' == typeof t[o]) e.push(new Ps(t[o]));
                        else if (t[o] instanceof Ss) e.push(new Ps(t[o].data, t[o].getAttributes()));
                        else if (t[o] instanceof Ka || t[o] instanceof Es) for (const i of t[o]) e.push(i);
                        else t[o] instanceof Ts && e.push(t[o]);
                    for (let t = 1; t < e.length; t++) {
                        const o = e[t],
                            i = e[t - 1];
                        o instanceof Ps &&
                            i instanceof Ps &&
                            tl(o, i) &&
                            (e.splice(t - 1, 2, new Ps(i.data + o.data, i.getAttributes())), t--);
                    }
                    return e;
                }
                function Za(t, e) {
                    const o = t.getChild(e - 1),
                        i = t.getChild(e);
                    if (o && i && o.is('$text') && i.is('$text') && tl(o, i)) {
                        const n = new Ps(o.data + i.data, o.getAttributes());
                        t._removeChildren(e - 1, 2), t._insertChild(e - 1, n);
                    }
                }
                function Qa(t) {
                    const e = t.textNode,
                        o = t.parent;
                    if (e) {
                        const i = t.offset - e.startOffset,
                            n = e.index;
                        o._removeChildren(n, 1);
                        const r = new Ps(e.data.substr(0, i), e.getAttributes()),
                            s = new Ps(e.data.substr(i), e.getAttributes());
                        o._insertChild(n, [r, s]);
                    }
                }
                function tl(t, e) {
                    const o = t.getAttributes(),
                        i = e.getAttributes();
                    for (const t of o) {
                        if (t[1] !== e.getAttribute(t[0])) return !1;
                        i.next();
                    }
                    return i.next().done;
                }
                var el = function (t, e) {
                    return Dr(t, e);
                };
                class ol extends $a {
                    constructor(t, e, o, i, n) {
                        super(n),
                            (this.range = t.clone()),
                            (this.key = e),
                            (this.oldValue = void 0 === o ? null : o),
                            (this.newValue = void 0 === i ? null : i);
                    }
                    get type() {
                        return null === this.oldValue
                            ? 'addAttribute'
                            : null === this.newValue
                            ? 'removeAttribute'
                            : 'changeAttribute';
                    }
                    clone() {
                        return new ol(this.range, this.key, this.oldValue, this.newValue, this.baseVersion);
                    }
                    getReversed() {
                        return new ol(this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1);
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.range = this.range.toJSON()), t;
                    }
                    _validate() {
                        if (!this.range.isFlat) throw new l.a('attribute-operation-range-not-flat', this);
                        for (const t of this.range.getItems({ shallow: !0 })) {
                            if (null !== this.oldValue && !el(t.getAttribute(this.key), this.oldValue))
                                throw new l.a('attribute-operation-wrong-old-value', this, {
                                    item: t,
                                    key: this.key,
                                    value: this.oldValue,
                                });
                            if (null === this.oldValue && null !== this.newValue && t.hasAttribute(this.key))
                                throw new l.a('attribute-operation-attribute-exists', this, { node: t, key: this.key });
                        }
                    }
                    _execute() {
                        el(this.oldValue, this.newValue) ||
                            (function (t, e, o) {
                                Qa(t.start), Qa(t.end);
                                for (const i of t.getItems({ shallow: !0 })) {
                                    const t = i.is('$textProxy') ? i.textNode : i;
                                    null !== o ? t._setAttribute(e, o) : t._removeAttribute(e), Za(t.parent, t.index);
                                }
                                Za(t.end.parent, t.end.index);
                            })(this.range, this.key, this.newValue);
                    }
                    static get className() {
                        return 'AttributeOperation';
                    }
                    static fromJSON(t, e) {
                        return new ol(Bs.fromJSON(t.range, e), t.key, t.oldValue, t.newValue, t.baseVersion);
                    }
                }
                class il extends $a {
                    constructor(t, e) {
                        super(null), (this.sourcePosition = t.clone()), (this.howMany = e);
                    }
                    get type() {
                        return 'detach';
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.sourcePosition = this.sourcePosition.toJSON()), t;
                    }
                    _validate() {
                        if (this.sourcePosition.root.document) throw new l.a('detach-operation-on-document-node', this);
                    }
                    _execute() {
                        Ja(Bs._createFromPositionAndShift(this.sourcePosition, this.howMany));
                    }
                    static get className() {
                        return 'DetachOperation';
                    }
                }
                class nl extends $a {
                    constructor(t, e, o, i) {
                        super(i),
                            (this.sourcePosition = t.clone()),
                            (this.sourcePosition.stickiness = 'toNext'),
                            (this.howMany = e),
                            (this.targetPosition = o.clone()),
                            (this.targetPosition.stickiness = 'toNone');
                    }
                    get type() {
                        return '$graveyard' == this.targetPosition.root.rootName
                            ? 'remove'
                            : '$graveyard' == this.sourcePosition.root.rootName
                            ? 'reinsert'
                            : 'move';
                    }
                    clone() {
                        return new this.constructor(
                            this.sourcePosition,
                            this.howMany,
                            this.targetPosition,
                            this.baseVersion,
                        );
                    }
                    getMovedRangeStart() {
                        return this.targetPosition._getTransformedByDeletion(this.sourcePosition, this.howMany);
                    }
                    getReversed() {
                        const t = this.sourcePosition._getTransformedByInsertion(this.targetPosition, this.howMany);
                        return new this.constructor(this.getMovedRangeStart(), this.howMany, t, this.baseVersion + 1);
                    }
                    _validate() {
                        const t = this.sourcePosition.parent,
                            e = this.targetPosition.parent,
                            o = this.sourcePosition.offset,
                            i = this.targetPosition.offset;
                        if (o + this.howMany > t.maxOffset) throw new l.a('move-operation-nodes-do-not-exist', this);
                        if (t === e && o < i && i < o + this.howMany)
                            throw new l.a('move-operation-range-into-itself', this);
                        if (
                            this.sourcePosition.root == this.targetPosition.root &&
                            'prefix' == ri(this.sourcePosition.getParentPath(), this.targetPosition.getParentPath())
                        ) {
                            const t = this.sourcePosition.path.length - 1;
                            if (this.targetPosition.path[t] >= o && this.targetPosition.path[t] < o + this.howMany)
                                throw new l.a('move-operation-node-into-itself', this);
                        }
                    }
                    _execute() {
                        Ya(Bs._createFromPositionAndShift(this.sourcePosition, this.howMany), this.targetPosition);
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (
                            (t.sourcePosition = this.sourcePosition.toJSON()),
                            (t.targetPosition = this.targetPosition.toJSON()),
                            t
                        );
                    }
                    static get className() {
                        return 'MoveOperation';
                    }
                    static fromJSON(t, e) {
                        const o = Os.fromJSON(t.sourcePosition, e),
                            i = Os.fromJSON(t.targetPosition, e);
                        return new this(o, t.howMany, i, t.baseVersion);
                    }
                }
                class rl extends $a {
                    constructor(t, e, o) {
                        super(o),
                            (this.position = t.clone()),
                            (this.position.stickiness = 'toNone'),
                            (this.nodes = new Es(Xa(e))),
                            (this.shouldReceiveAttributes = !1);
                    }
                    get type() {
                        return 'insert';
                    }
                    get howMany() {
                        return this.nodes.maxOffset;
                    }
                    clone() {
                        const t = new Es([...this.nodes].map((t) => t._clone(!0))),
                            e = new rl(this.position, t, this.baseVersion);
                        return (e.shouldReceiveAttributes = this.shouldReceiveAttributes), e;
                    }
                    getReversed() {
                        const t = this.position.root.document.graveyard,
                            e = new Os(t, [0]);
                        return new nl(this.position, this.nodes.maxOffset, e, this.baseVersion + 1);
                    }
                    _validate() {
                        const t = this.position.parent;
                        if (!t || t.maxOffset < this.position.offset)
                            throw new l.a('insert-operation-position-invalid', this);
                    }
                    _execute() {
                        const t = this.nodes;
                        (this.nodes = new Es([...t].map((t) => t._clone(!0)))), Ga(this.position, t);
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.position = this.position.toJSON()), (t.nodes = this.nodes.toJSON()), t;
                    }
                    static get className() {
                        return 'InsertOperation';
                    }
                    static fromJSON(t, e) {
                        const o = [];
                        for (const e of t.nodes) e.name ? o.push(Rs.fromJSON(e)) : o.push(Ps.fromJSON(e));
                        const i = new rl(Os.fromJSON(t.position, e), o, t.baseVersion);
                        return (i.shouldReceiveAttributes = t.shouldReceiveAttributes), i;
                    }
                }
                class sl extends $a {
                    constructor(t, e, o, i, n, r) {
                        super(r),
                            (this.name = t),
                            (this.oldRange = e ? e.clone() : null),
                            (this.newRange = o ? o.clone() : null),
                            (this.affectsData = n),
                            (this._markers = i);
                    }
                    get type() {
                        return 'marker';
                    }
                    clone() {
                        return new sl(
                            this.name,
                            this.oldRange,
                            this.newRange,
                            this._markers,
                            this.affectsData,
                            this.baseVersion,
                        );
                    }
                    getReversed() {
                        return new sl(
                            this.name,
                            this.newRange,
                            this.oldRange,
                            this._markers,
                            this.affectsData,
                            this.baseVersion + 1,
                        );
                    }
                    _execute() {
                        const t = this.newRange ? '_set' : '_remove';
                        this._markers[t](this.name, this.newRange, !0, this.affectsData);
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (
                            this.oldRange && (t.oldRange = this.oldRange.toJSON()),
                            this.newRange && (t.newRange = this.newRange.toJSON()),
                            delete t._markers,
                            t
                        );
                    }
                    static get className() {
                        return 'MarkerOperation';
                    }
                    static fromJSON(t, e) {
                        return new sl(
                            t.name,
                            t.oldRange ? Bs.fromJSON(t.oldRange, e) : null,
                            t.newRange ? Bs.fromJSON(t.newRange, e) : null,
                            e.model.markers,
                            t.affectsData,
                            t.baseVersion,
                        );
                    }
                }
                class al extends $a {
                    constructor(t, e, o, i) {
                        super(i),
                            (this.position = t),
                            (this.position.stickiness = 'toNext'),
                            (this.oldName = e),
                            (this.newName = o);
                    }
                    get type() {
                        return 'rename';
                    }
                    clone() {
                        return new al(this.position.clone(), this.oldName, this.newName, this.baseVersion);
                    }
                    getReversed() {
                        return new al(this.position.clone(), this.newName, this.oldName, this.baseVersion + 1);
                    }
                    _validate() {
                        const t = this.position.nodeAfter;
                        if (!(t instanceof Rs)) throw new l.a('rename-operation-wrong-position', this);
                        if (t.name !== this.oldName) throw new l.a('rename-operation-wrong-name', this);
                    }
                    _execute() {
                        this.position.nodeAfter.name = this.newName;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.position = this.position.toJSON()), t;
                    }
                    static get className() {
                        return 'RenameOperation';
                    }
                    static fromJSON(t, e) {
                        return new al(Os.fromJSON(t.position, e), t.oldName, t.newName, t.baseVersion);
                    }
                }
                class ll extends $a {
                    constructor(t, e, o, i, n) {
                        super(n), (this.root = t), (this.key = e), (this.oldValue = o), (this.newValue = i);
                    }
                    get type() {
                        return null === this.oldValue
                            ? 'addRootAttribute'
                            : null === this.newValue
                            ? 'removeRootAttribute'
                            : 'changeRootAttribute';
                    }
                    clone() {
                        return new ll(this.root, this.key, this.oldValue, this.newValue, this.baseVersion);
                    }
                    getReversed() {
                        return new ll(this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1);
                    }
                    _validate() {
                        if (this.root != this.root.root || this.root.is('documentFragment'))
                            throw new l.a('rootattribute-operation-not-a-root', this, {
                                root: this.root,
                                key: this.key,
                            });
                        if (null !== this.oldValue && this.root.getAttribute(this.key) !== this.oldValue)
                            throw new l.a('rootattribute-operation-wrong-old-value', this, {
                                root: this.root,
                                key: this.key,
                            });
                        if (null === this.oldValue && null !== this.newValue && this.root.hasAttribute(this.key))
                            throw new l.a('rootattribute-operation-attribute-exists', this, {
                                root: this.root,
                                key: this.key,
                            });
                    }
                    _execute() {
                        null !== this.newValue
                            ? this.root._setAttribute(this.key, this.newValue)
                            : this.root._removeAttribute(this.key);
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.root = this.root.toJSON()), t;
                    }
                    static get className() {
                        return 'RootAttributeOperation';
                    }
                    static fromJSON(t, e) {
                        if (!e.getRoot(t.root))
                            throw new l.a('rootattribute-operation-fromjson-no-root', this, { rootName: t.root });
                        return new ll(e.getRoot(t.root), t.key, t.oldValue, t.newValue, t.baseVersion);
                    }
                }
                class cl extends $a {
                    constructor(t, e, o, i, n) {
                        super(n),
                            (this.sourcePosition = t.clone()),
                            (this.sourcePosition.stickiness = 'toPrevious'),
                            (this.howMany = e),
                            (this.targetPosition = o.clone()),
                            (this.targetPosition.stickiness = 'toNext'),
                            (this.graveyardPosition = i.clone());
                    }
                    get type() {
                        return 'merge';
                    }
                    get deletionPosition() {
                        return new Os(this.sourcePosition.root, this.sourcePosition.path.slice(0, -1));
                    }
                    get movedRange() {
                        const t = this.sourcePosition.getShiftedBy(Number.POSITIVE_INFINITY);
                        return new Bs(this.sourcePosition, t);
                    }
                    clone() {
                        return new this.constructor(
                            this.sourcePosition,
                            this.howMany,
                            this.targetPosition,
                            this.graveyardPosition,
                            this.baseVersion,
                        );
                    }
                    getReversed() {
                        const t = this.targetPosition._getTransformedByMergeOperation(this),
                            e = this.sourcePosition.path.slice(0, -1),
                            o = new Os(this.sourcePosition.root, e)._getTransformedByMergeOperation(this);
                        return new dl(t, this.howMany, o, this.graveyardPosition, this.baseVersion + 1);
                    }
                    _validate() {
                        const t = this.sourcePosition.parent,
                            e = this.targetPosition.parent;
                        if (!t.parent) throw new l.a('merge-operation-source-position-invalid', this);
                        if (!e.parent) throw new l.a('merge-operation-target-position-invalid', this);
                        if (this.howMany != t.maxOffset) throw new l.a('merge-operation-how-many-invalid', this);
                    }
                    _execute() {
                        const t = this.sourcePosition.parent;
                        Ya(Bs._createIn(t), this.targetPosition), Ya(Bs._createOn(t), this.graveyardPosition);
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (
                            (t.sourcePosition = t.sourcePosition.toJSON()),
                            (t.targetPosition = t.targetPosition.toJSON()),
                            (t.graveyardPosition = t.graveyardPosition.toJSON()),
                            t
                        );
                    }
                    static get className() {
                        return 'MergeOperation';
                    }
                    static fromJSON(t, e) {
                        const o = Os.fromJSON(t.sourcePosition, e),
                            i = Os.fromJSON(t.targetPosition, e),
                            n = Os.fromJSON(t.graveyardPosition, e);
                        return new this(o, t.howMany, i, n, t.baseVersion);
                    }
                }
                class dl extends $a {
                    constructor(t, e, o, i, n) {
                        super(n),
                            (this.splitPosition = t.clone()),
                            (this.splitPosition.stickiness = 'toNext'),
                            (this.howMany = e),
                            (this.insertionPosition = o),
                            (this.graveyardPosition = i ? i.clone() : null),
                            this.graveyardPosition && (this.graveyardPosition.stickiness = 'toNext');
                    }
                    get type() {
                        return 'split';
                    }
                    get moveTargetPosition() {
                        const t = this.insertionPosition.path.slice();
                        return t.push(0), new Os(this.insertionPosition.root, t);
                    }
                    get movedRange() {
                        const t = this.splitPosition.getShiftedBy(Number.POSITIVE_INFINITY);
                        return new Bs(this.splitPosition, t);
                    }
                    clone() {
                        return new this.constructor(
                            this.splitPosition,
                            this.howMany,
                            this.insertionPosition,
                            this.graveyardPosition,
                            this.baseVersion,
                        );
                    }
                    getReversed() {
                        const t = this.splitPosition.root.document.graveyard,
                            e = new Os(t, [0]);
                        return new cl(
                            this.moveTargetPosition,
                            this.howMany,
                            this.splitPosition,
                            e,
                            this.baseVersion + 1,
                        );
                    }
                    _validate() {
                        const t = this.splitPosition.parent,
                            e = this.splitPosition.offset;
                        if (!t || t.maxOffset < e) throw new l.a('split-operation-position-invalid', this);
                        if (!t.parent) throw new l.a('split-operation-split-in-root', this);
                        if (this.howMany != t.maxOffset - this.splitPosition.offset)
                            throw new l.a('split-operation-how-many-invalid', this);
                        if (this.graveyardPosition && !this.graveyardPosition.nodeAfter)
                            throw new l.a('split-operation-graveyard-position-invalid', this);
                    }
                    _execute() {
                        const t = this.splitPosition.parent;
                        if (this.graveyardPosition)
                            Ya(Bs._createFromPositionAndShift(this.graveyardPosition, 1), this.insertionPosition);
                        else {
                            const e = t._clone();
                            Ga(this.insertionPosition, e);
                        }
                        Ya(
                            new Bs(Os._createAt(t, this.splitPosition.offset), Os._createAt(t, t.maxOffset)),
                            this.moveTargetPosition,
                        );
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (
                            (t.splitPosition = this.splitPosition.toJSON()),
                            (t.insertionPosition = this.insertionPosition.toJSON()),
                            this.graveyardPosition && (t.graveyardPosition = this.graveyardPosition.toJSON()),
                            t
                        );
                    }
                    static get className() {
                        return 'SplitOperation';
                    }
                    static getInsertionPosition(t) {
                        const e = t.path.slice(0, -1);
                        return e[e.length - 1]++, new Os(t.root, e, 'toPrevious');
                    }
                    static fromJSON(t, e) {
                        const o = Os.fromJSON(t.splitPosition, e),
                            i = Os.fromJSON(t.insertionPosition, e),
                            n = t.graveyardPosition ? Os.fromJSON(t.graveyardPosition, e) : null;
                        return new this(o, t.howMany, i, n, t.baseVersion);
                    }
                }
                class hl extends Rs {
                    constructor(t, e, o = 'main') {
                        super(e), (this._document = t), (this.rootName = o);
                    }
                    get document() {
                        return this._document;
                    }
                    is(t, e) {
                        return e
                            ? e === this.name &&
                                  ('rootElement' === t ||
                                      'model:rootElement' === t ||
                                      'element' === t ||
                                      'model:element' === t)
                            : 'rootElement' === t ||
                                  'model:rootElement' === t ||
                                  'element' === t ||
                                  'model:element' === t ||
                                  'node' === t ||
                                  'model:node' === t;
                    }
                    toJSON() {
                        return this.rootName;
                    }
                }
                class ul {
                    constructor(t, e) {
                        (this.model = t), (this.batch = e);
                    }
                    createText(t, e) {
                        return new Ps(t, e);
                    }
                    createElement(t, e) {
                        return new Rs(t, e);
                    }
                    createDocumentFragment() {
                        return new Ka();
                    }
                    cloneElement(t, e = !0) {
                        return t._clone(e);
                    }
                    insert(t, e, o = 0) {
                        if ((this._assertWriterUsedCorrectly(), t instanceof Ps && '' == t.data)) return;
                        const i = Os._createAt(e, o);
                        if (t.parent) {
                            if (bl(t.root, i.root)) return void this.move(Bs._createOn(t), i);
                            if (t.root.document) throw new l.a('model-writer-insert-forbidden-move', this);
                            this.remove(t);
                        }
                        const n = i.root.document ? i.root.document.version : null,
                            r = new rl(i, t, n);
                        if (
                            (t instanceof Ps && (r.shouldReceiveAttributes = !0),
                            this.batch.addOperation(r),
                            this.model.applyOperation(r),
                            t instanceof Ka)
                        )
                            for (const [e, o] of t.markers) {
                                const t = Os._createAt(o.root, 0),
                                    n = {
                                        range: new Bs(o.start._getCombined(t, i), o.end._getCombined(t, i)),
                                        usingOperation: !0,
                                        affectsData: !0,
                                    };
                                this.model.markers.has(e) ? this.updateMarker(e, n) : this.addMarker(e, n);
                            }
                    }
                    insertText(t, e, o, i) {
                        e instanceof Ka || e instanceof Rs || e instanceof Os
                            ? this.insert(this.createText(t), e, o)
                            : this.insert(this.createText(t, e), o, i);
                    }
                    insertElement(t, e, o, i) {
                        e instanceof Ka || e instanceof Rs || e instanceof Os
                            ? this.insert(this.createElement(t), e, o)
                            : this.insert(this.createElement(t, e), o, i);
                    }
                    append(t, e) {
                        this.insert(t, e, 'end');
                    }
                    appendText(t, e, o) {
                        e instanceof Ka || e instanceof Rs
                            ? this.insert(this.createText(t), e, 'end')
                            : this.insert(this.createText(t, e), o, 'end');
                    }
                    appendElement(t, e, o) {
                        e instanceof Ka || e instanceof Rs
                            ? this.insert(this.createElement(t), e, 'end')
                            : this.insert(this.createElement(t, e), o, 'end');
                    }
                    setAttribute(t, e, o) {
                        if ((this._assertWriterUsedCorrectly(), o instanceof Bs)) {
                            const i = o.getMinimalFlatRanges();
                            for (const o of i) fl(this, t, e, o);
                        } else ml(this, t, e, o);
                    }
                    setAttributes(t, e) {
                        for (const [o, i] of di(t)) this.setAttribute(o, i, e);
                    }
                    removeAttribute(t, e) {
                        if ((this._assertWriterUsedCorrectly(), e instanceof Bs)) {
                            const o = e.getMinimalFlatRanges();
                            for (const e of o) fl(this, t, null, e);
                        } else ml(this, t, null, e);
                    }
                    clearAttributes(t) {
                        this._assertWriterUsedCorrectly();
                        const e = (t) => {
                            for (const e of t.getAttributeKeys()) this.removeAttribute(e, t);
                        };
                        if (t instanceof Bs) for (const o of t.getItems()) e(o);
                        else e(t);
                    }
                    move(t, e, o) {
                        if ((this._assertWriterUsedCorrectly(), !(t instanceof Bs)))
                            throw new l.a('writer-move-invalid-range', this);
                        if (!t.isFlat) throw new l.a('writer-move-range-not-flat', this);
                        const i = Os._createAt(e, o);
                        if (i.isEqual(t.start)) return;
                        if ((this._addOperationForAffectedMarkers('move', t), !bl(t.root, i.root)))
                            throw new l.a('writer-move-different-document', this);
                        const n = t.root.document ? t.root.document.version : null,
                            r = new nl(t.start, t.end.offset - t.start.offset, i, n);
                        this.batch.addOperation(r), this.model.applyOperation(r);
                    }
                    remove(t) {
                        this._assertWriterUsedCorrectly();
                        const e = (t instanceof Bs ? t : Bs._createOn(t)).getMinimalFlatRanges().reverse();
                        for (const t of e)
                            this._addOperationForAffectedMarkers('move', t),
                                pl(t.start, t.end.offset - t.start.offset, this.batch, this.model);
                    }
                    merge(t) {
                        this._assertWriterUsedCorrectly();
                        const e = t.nodeBefore,
                            o = t.nodeAfter;
                        if ((this._addOperationForAffectedMarkers('merge', t), !(e instanceof Rs)))
                            throw new l.a('writer-merge-no-element-before', this);
                        if (!(o instanceof Rs)) throw new l.a('writer-merge-no-element-after', this);
                        t.root.document ? this._merge(t) : this._mergeDetached(t);
                    }
                    createPositionFromPath(t, e, o) {
                        return this.model.createPositionFromPath(t, e, o);
                    }
                    createPositionAt(t, e) {
                        return this.model.createPositionAt(t, e);
                    }
                    createPositionAfter(t) {
                        return this.model.createPositionAfter(t);
                    }
                    createPositionBefore(t) {
                        return this.model.createPositionBefore(t);
                    }
                    createRange(t, e) {
                        return this.model.createRange(t, e);
                    }
                    createRangeIn(t) {
                        return this.model.createRangeIn(t);
                    }
                    createRangeOn(t) {
                        return this.model.createRangeOn(t);
                    }
                    createSelection(t, e, o) {
                        return this.model.createSelection(t, e, o);
                    }
                    _mergeDetached(t) {
                        const e = t.nodeBefore,
                            o = t.nodeAfter;
                        this.move(Bs._createIn(o), Os._createAt(e, 'end')), this.remove(o);
                    }
                    _merge(t) {
                        const e = Os._createAt(t.nodeBefore, 'end'),
                            o = Os._createAt(t.nodeAfter, 0),
                            i = t.root.document.graveyard,
                            n = new Os(i, [0]),
                            r = t.root.document.version,
                            s = new cl(o, t.nodeAfter.maxOffset, e, n, r);
                        this.batch.addOperation(s), this.model.applyOperation(s);
                    }
                    rename(t, e) {
                        if ((this._assertWriterUsedCorrectly(), !(t instanceof Rs)))
                            throw new l.a('writer-rename-not-element-instance', this);
                        const o = t.root.document ? t.root.document.version : null,
                            i = new al(Os._createBefore(t), t.name, e, o);
                        this.batch.addOperation(i), this.model.applyOperation(i);
                    }
                    split(t, e) {
                        this._assertWriterUsedCorrectly();
                        let o,
                            i,
                            n = t.parent;
                        if (!n.parent) throw new l.a('writer-split-element-no-parent', this);
                        if ((e || (e = n.parent), !t.parent.getAncestors({ includeSelf: !0 }).includes(e)))
                            throw new l.a('writer-split-invalid-limit-element', this);
                        do {
                            const e = n.root.document ? n.root.document.version : null,
                                r = n.maxOffset - t.offset,
                                s = dl.getInsertionPosition(t),
                                a = new dl(t, r, s, null, e);
                            this.batch.addOperation(a),
                                this.model.applyOperation(a),
                                o || i || ((o = n), (i = t.parent.nextSibling)),
                                (n = (t = this.createPositionAfter(t.parent)).parent);
                        } while (n !== e);
                        return { position: t, range: new Bs(Os._createAt(o, 'end'), Os._createAt(i, 0)) };
                    }
                    wrap(t, e) {
                        if ((this._assertWriterUsedCorrectly(), !t.isFlat))
                            throw new l.a('writer-wrap-range-not-flat', this);
                        const o = e instanceof Rs ? e : new Rs(e);
                        if (o.childCount > 0) throw new l.a('writer-wrap-element-not-empty', this);
                        if (null !== o.parent) throw new l.a('writer-wrap-element-attached', this);
                        this.insert(o, t.start);
                        const i = new Bs(t.start.getShiftedBy(1), t.end.getShiftedBy(1));
                        this.move(i, Os._createAt(o, 0));
                    }
                    unwrap(t) {
                        if ((this._assertWriterUsedCorrectly(), null === t.parent))
                            throw new l.a('writer-unwrap-element-no-parent', this);
                        this.move(Bs._createIn(t), this.createPositionAfter(t)), this.remove(t);
                    }
                    addMarker(t, e) {
                        if ((this._assertWriterUsedCorrectly(), !e || 'boolean' != typeof e.usingOperation))
                            throw new l.a('writer-addmarker-no-usingoperation', this);
                        const o = e.usingOperation,
                            i = e.range,
                            n = void 0 !== e.affectsData && e.affectsData;
                        if (this.model.markers.has(t)) throw new l.a('writer-addmarker-marker-exists', this);
                        if (!i) throw new l.a('writer-addmarker-no-range', this);
                        return o
                            ? (gl(this, t, null, i, n), this.model.markers.get(t))
                            : this.model.markers._set(t, i, o, n);
                    }
                    updateMarker(t, e) {
                        this._assertWriterUsedCorrectly();
                        const o = 'string' == typeof t ? t : t.name,
                            i = this.model.markers.get(o);
                        if (!i) throw new l.a('writer-updatemarker-marker-not-exists', this);
                        if (!e) return void this.model.markers._refresh(i);
                        const n = 'boolean' == typeof e.usingOperation,
                            r = 'boolean' == typeof e.affectsData,
                            s = r ? e.affectsData : i.affectsData;
                        if (!n && !e.range && !r) throw new l.a('writer-updatemarker-wrong-options', this);
                        const a = i.getRange(),
                            c = e.range ? e.range : a;
                        n && e.usingOperation !== i.managedUsingOperations
                            ? e.usingOperation
                                ? gl(this, o, null, c, s)
                                : (gl(this, o, a, null, s), this.model.markers._set(o, c, void 0, s))
                            : i.managedUsingOperations
                            ? gl(this, o, a, c, s)
                            : this.model.markers._set(o, c, void 0, s);
                    }
                    removeMarker(t) {
                        this._assertWriterUsedCorrectly();
                        const e = 'string' == typeof t ? t : t.name;
                        if (!this.model.markers.has(e)) throw new l.a('writer-removemarker-no-marker', this);
                        const o = this.model.markers.get(e);
                        if (!o.managedUsingOperations) return void this.model.markers._remove(e);
                        gl(this, e, o.getRange(), null, o.affectsData);
                    }
                    setSelection(t, e, o) {
                        this._assertWriterUsedCorrectly(), this.model.document.selection._setTo(t, e, o);
                    }
                    setSelectionFocus(t, e) {
                        this._assertWriterUsedCorrectly(), this.model.document.selection._setFocus(t, e);
                    }
                    setSelectionAttribute(t, e) {
                        if ((this._assertWriterUsedCorrectly(), 'string' == typeof t))
                            this._setSelectionAttribute(t, e);
                        else for (const [e, o] of di(t)) this._setSelectionAttribute(e, o);
                    }
                    removeSelectionAttribute(t) {
                        if ((this._assertWriterUsedCorrectly(), 'string' == typeof t))
                            this._removeSelectionAttribute(t);
                        else for (const e of t) this._removeSelectionAttribute(e);
                    }
                    overrideSelectionGravity() {
                        return this.model.document.selection._overrideGravity();
                    }
                    restoreSelectionGravity(t) {
                        this.model.document.selection._restoreGravity(t);
                    }
                    _setSelectionAttribute(t, e) {
                        const o = this.model.document.selection;
                        if (o.isCollapsed && o.anchor.parent.isEmpty) {
                            const i = Qs._getStoreAttributeKey(t);
                            this.setAttribute(i, e, o.anchor.parent);
                        }
                        o._setAttribute(t, e);
                    }
                    _removeSelectionAttribute(t) {
                        const e = this.model.document.selection;
                        if (e.isCollapsed && e.anchor.parent.isEmpty) {
                            const o = Qs._getStoreAttributeKey(t);
                            this.removeAttribute(o, e.anchor.parent);
                        }
                        e._removeAttribute(t);
                    }
                    _assertWriterUsedCorrectly() {
                        if (this.model._currentWriter !== this) throw new l.a('writer-incorrect-use', this);
                    }
                    _addOperationForAffectedMarkers(t, e) {
                        for (const o of this.model.markers) {
                            if (!o.managedUsingOperations) continue;
                            const i = o.getRange();
                            let n = !1;
                            if ('move' === t)
                                n =
                                    e.containsPosition(i.start) ||
                                    e.start.isEqual(i.start) ||
                                    e.containsPosition(i.end) ||
                                    e.end.isEqual(i.end);
                            else {
                                const t = e.nodeBefore,
                                    o = e.nodeAfter,
                                    r = i.start.parent == t && i.start.isAtEnd,
                                    s = i.end.parent == o && 0 == i.end.offset,
                                    a = i.end.nodeAfter == o,
                                    l = i.start.nodeAfter == o;
                                n = r || s || a || l;
                            }
                            n && this.updateMarker(o.name, { range: i });
                        }
                    }
                }
                function fl(t, e, o, i) {
                    const n = t.model,
                        r = n.document;
                    let s,
                        a,
                        l,
                        c = i.start;
                    for (const t of i.getWalker({ shallow: !0 }))
                        (l = t.item.getAttribute(e)),
                            s && a != l && (a != o && d(), (c = s)),
                            (s = t.nextPosition),
                            (a = l);
                    function d() {
                        const i = new Bs(c, s),
                            l = i.root.document ? r.version : null,
                            d = new ol(i, e, a, o, l);
                        t.batch.addOperation(d), n.applyOperation(d);
                    }
                    s instanceof Os && s != c && a != o && d();
                }
                function ml(t, e, o, i) {
                    const n = t.model,
                        r = n.document,
                        s = i.getAttribute(e);
                    let a, l;
                    if (s != o) {
                        if (i.root === i) {
                            const t = i.document ? r.version : null;
                            l = new ll(i, e, s, o, t);
                        } else {
                            a = new Bs(Os._createBefore(i), t.createPositionAfter(i));
                            const n = a.root.document ? r.version : null;
                            l = new ol(a, e, s, o, n);
                        }
                        t.batch.addOperation(l), n.applyOperation(l);
                    }
                }
                function gl(t, e, o, i, n) {
                    const r = t.model,
                        s = r.document,
                        a = new sl(e, o, i, r.markers, n, s.version);
                    t.batch.addOperation(a), r.applyOperation(a);
                }
                function pl(t, e, o, i) {
                    let n;
                    if (t.root.document) {
                        const o = i.document,
                            r = new Os(o.graveyard, [0]);
                        n = new nl(t, e, r, o.version);
                    } else n = new il(t, e);
                    o.addOperation(n), i.applyOperation(n);
                }
                function bl(t, e) {
                    return t === e || (t instanceof hl && e instanceof hl);
                }
                class wl {
                    constructor(t) {
                        (this._markerCollection = t),
                            (this._changesInElement = new Map()),
                            (this._elementSnapshots = new Map()),
                            (this._changedMarkers = new Map()),
                            (this._changeCount = 0),
                            (this._cachedChanges = null),
                            (this._cachedChangesWithGraveyard = null);
                    }
                    get isEmpty() {
                        return 0 == this._changesInElement.size && 0 == this._changedMarkers.size;
                    }
                    refreshItem(t) {
                        if (this._isInInsertedElement(t.parent)) return;
                        this._markRemove(t.parent, t.startOffset, t.offsetSize),
                            this._markInsert(t.parent, t.startOffset, t.offsetSize);
                        const e = Bs._createOn(t);
                        for (const t of this._markerCollection.getMarkersIntersectingRange(e)) {
                            const e = t.getRange();
                            this.bufferMarkerChange(t.name, e, e, t.affectsData);
                        }
                        this._cachedChanges = null;
                    }
                    bufferOperation(t) {
                        switch (t.type) {
                            case 'insert':
                                if (this._isInInsertedElement(t.position.parent)) return;
                                this._markInsert(t.position.parent, t.position.offset, t.nodes.maxOffset);
                                break;
                            case 'addAttribute':
                            case 'removeAttribute':
                            case 'changeAttribute':
                                for (const e of t.range.getItems({ shallow: !0 }))
                                    this._isInInsertedElement(e.parent) || this._markAttribute(e);
                                break;
                            case 'remove':
                            case 'move':
                            case 'reinsert': {
                                if (
                                    t.sourcePosition.isEqual(t.targetPosition) ||
                                    t.sourcePosition.getShiftedBy(t.howMany).isEqual(t.targetPosition)
                                )
                                    return;
                                const e = this._isInInsertedElement(t.sourcePosition.parent),
                                    o = this._isInInsertedElement(t.targetPosition.parent);
                                e || this._markRemove(t.sourcePosition.parent, t.sourcePosition.offset, t.howMany),
                                    o ||
                                        this._markInsert(
                                            t.targetPosition.parent,
                                            t.getMovedRangeStart().offset,
                                            t.howMany,
                                        );
                                break;
                            }
                            case 'rename': {
                                if (this._isInInsertedElement(t.position.parent)) return;
                                this._markRemove(t.position.parent, t.position.offset, 1),
                                    this._markInsert(t.position.parent, t.position.offset, 1);
                                const e = Bs._createFromPositionAndShift(t.position, 1);
                                for (const t of this._markerCollection.getMarkersIntersectingRange(e)) {
                                    const e = t.getRange();
                                    this.bufferMarkerChange(t.name, e, e, t.affectsData);
                                }
                                break;
                            }
                            case 'split': {
                                const e = t.splitPosition.parent;
                                this._isInInsertedElement(e) || this._markRemove(e, t.splitPosition.offset, t.howMany),
                                    this._isInInsertedElement(t.insertionPosition.parent) ||
                                        this._markInsert(t.insertionPosition.parent, t.insertionPosition.offset, 1),
                                    t.graveyardPosition &&
                                        this._markRemove(t.graveyardPosition.parent, t.graveyardPosition.offset, 1);
                                break;
                            }
                            case 'merge': {
                                const e = t.sourcePosition.parent;
                                this._isInInsertedElement(e.parent) || this._markRemove(e.parent, e.startOffset, 1);
                                const o = t.graveyardPosition.parent;
                                this._markInsert(o, t.graveyardPosition.offset, 1);
                                const i = t.targetPosition.parent;
                                this._isInInsertedElement(i) ||
                                    this._markInsert(i, t.targetPosition.offset, e.maxOffset);
                                break;
                            }
                        }
                        this._cachedChanges = null;
                    }
                    bufferMarkerChange(t, e, o, i) {
                        const n = this._changedMarkers.get(t);
                        n
                            ? ((n.newRange = o),
                              (n.affectsData = i),
                              null == n.oldRange && null == n.newRange && this._changedMarkers.delete(t))
                            : this._changedMarkers.set(t, { oldRange: e, newRange: o, affectsData: i });
                    }
                    getMarkersToRemove() {
                        const t = [];
                        for (const [e, o] of this._changedMarkers)
                            null != o.oldRange && t.push({ name: e, range: o.oldRange });
                        return t;
                    }
                    getMarkersToAdd() {
                        const t = [];
                        for (const [e, o] of this._changedMarkers)
                            null != o.newRange && t.push({ name: e, range: o.newRange });
                        return t;
                    }
                    getChangedMarkers() {
                        return Array.from(this._changedMarkers).map((t) => ({
                            name: t[0],
                            data: { oldRange: t[1].oldRange, newRange: t[1].newRange },
                        }));
                    }
                    hasDataChanges() {
                        for (const [, t] of this._changedMarkers) if (t.affectsData) return !0;
                        return this._changesInElement.size > 0;
                    }
                    getChanges(t = { includeChangesInGraveyard: !1 }) {
                        if (this._cachedChanges)
                            return t.includeChangesInGraveyard
                                ? this._cachedChangesWithGraveyard.slice()
                                : this._cachedChanges.slice();
                        let e = [];
                        for (const t of this._changesInElement.keys()) {
                            const o = this._changesInElement
                                    .get(t)
                                    .sort((t, e) =>
                                        t.offset === e.offset
                                            ? t.type != e.type
                                                ? 'remove' == t.type
                                                    ? -1
                                                    : 1
                                                : 0
                                            : t.offset < e.offset
                                            ? -1
                                            : 1,
                                    ),
                                i = this._elementSnapshots.get(t),
                                n = kl(t.getChildren()),
                                r = _l(i.length, o);
                            let s = 0,
                                a = 0;
                            for (const o of r)
                                if ('i' === o) e.push(this._getInsertDiff(t, s, n[s].name)), s++;
                                else if ('r' === o) e.push(this._getRemoveDiff(t, s, i[a].name)), a++;
                                else if ('a' === o) {
                                    const o = n[s].attributes,
                                        r = i[a].attributes;
                                    let l;
                                    if ('$text' == n[s].name) l = new Bs(Os._createAt(t, s), Os._createAt(t, s + 1));
                                    else {
                                        const e = t.offsetToIndex(s);
                                        l = new Bs(Os._createAt(t, s), Os._createAt(t.getChild(e), 0));
                                    }
                                    e.push(...this._getAttributesDiff(l, r, o)), s++, a++;
                                } else s++, a++;
                        }
                        e.sort((t, e) =>
                            t.position.root != e.position.root
                                ? t.position.root.rootName < e.position.root.rootName
                                    ? -1
                                    : 1
                                : t.position.isEqual(e.position)
                                ? t.changeCount - e.changeCount
                                : t.position.isBefore(e.position)
                                ? -1
                                : 1,
                        );
                        for (let t = 1, o = 0; t < e.length; t++) {
                            const i = e[o],
                                n = e[t],
                                r =
                                    'remove' == i.type &&
                                    'remove' == n.type &&
                                    '$text' == i.name &&
                                    '$text' == n.name &&
                                    i.position.isEqual(n.position),
                                s =
                                    'insert' == i.type &&
                                    'insert' == n.type &&
                                    '$text' == i.name &&
                                    '$text' == n.name &&
                                    i.position.parent == n.position.parent &&
                                    i.position.offset + i.length == n.position.offset,
                                a =
                                    'attribute' == i.type &&
                                    'attribute' == n.type &&
                                    i.position.parent == n.position.parent &&
                                    i.range.isFlat &&
                                    n.range.isFlat &&
                                    i.position.offset + i.length == n.position.offset &&
                                    i.attributeKey == n.attributeKey &&
                                    i.attributeOldValue == n.attributeOldValue &&
                                    i.attributeNewValue == n.attributeNewValue;
                            r || s || a
                                ? (i.length++, a && (i.range.end = i.range.end.getShiftedBy(1)), (e[t] = null))
                                : (o = t);
                        }
                        e = e.filter((t) => t);
                        for (const t of e)
                            delete t.changeCount, 'attribute' == t.type && (delete t.position, delete t.length);
                        return (
                            (this._changeCount = 0),
                            (this._cachedChangesWithGraveyard = e.slice()),
                            (this._cachedChanges = e.filter(vl)),
                            t.includeChangesInGraveyard ? this._cachedChangesWithGraveyard : this._cachedChanges
                        );
                    }
                    reset() {
                        this._changesInElement.clear(),
                            this._elementSnapshots.clear(),
                            this._changedMarkers.clear(),
                            (this._cachedChanges = null);
                    }
                    _markInsert(t, e, o) {
                        const i = { type: 'insert', offset: e, howMany: o, count: this._changeCount++ };
                        this._markChange(t, i);
                    }
                    _markRemove(t, e, o) {
                        const i = { type: 'remove', offset: e, howMany: o, count: this._changeCount++ };
                        this._markChange(t, i), this._removeAllNestedChanges(t, e, o);
                    }
                    _markAttribute(t) {
                        const e = {
                            type: 'attribute',
                            offset: t.startOffset,
                            howMany: t.offsetSize,
                            count: this._changeCount++,
                        };
                        this._markChange(t.parent, e);
                    }
                    _markChange(t, e) {
                        this._makeSnapshot(t);
                        const o = this._getChangesForElement(t);
                        this._handleChange(e, o), o.push(e);
                        for (let t = 0; t < o.length; t++) o[t].howMany < 1 && (o.splice(t, 1), t--);
                    }
                    _getChangesForElement(t) {
                        let e;
                        return (
                            this._changesInElement.has(t)
                                ? (e = this._changesInElement.get(t))
                                : ((e = []), this._changesInElement.set(t, e)),
                            e
                        );
                    }
                    _makeSnapshot(t) {
                        this._elementSnapshots.has(t) || this._elementSnapshots.set(t, kl(t.getChildren()));
                    }
                    _handleChange(t, e) {
                        t.nodesToHandle = t.howMany;
                        for (const o of e) {
                            const i = t.offset + t.howMany,
                                n = o.offset + o.howMany;
                            if (
                                'insert' == t.type &&
                                ('insert' == o.type &&
                                    (t.offset <= o.offset
                                        ? (o.offset += t.howMany)
                                        : t.offset < n && ((o.howMany += t.nodesToHandle), (t.nodesToHandle = 0))),
                                'remove' == o.type && t.offset < o.offset && (o.offset += t.howMany),
                                'attribute' == o.type)
                            )
                                if (t.offset <= o.offset) o.offset += t.howMany;
                                else if (t.offset < n) {
                                    const n = o.howMany;
                                    (o.howMany = t.offset - o.offset),
                                        e.unshift({
                                            type: 'attribute',
                                            offset: i,
                                            howMany: n - o.howMany,
                                            count: this._changeCount++,
                                        });
                                }
                            if ('remove' == t.type) {
                                if ('insert' == o.type)
                                    if (i <= o.offset) o.offset -= t.howMany;
                                    else if (i <= n)
                                        if (t.offset < o.offset) {
                                            const e = i - o.offset;
                                            (o.offset = t.offset), (o.howMany -= e), (t.nodesToHandle -= e);
                                        } else (o.howMany -= t.nodesToHandle), (t.nodesToHandle = 0);
                                    else if (t.offset <= o.offset) (t.nodesToHandle -= o.howMany), (o.howMany = 0);
                                    else if (t.offset < n) {
                                        const e = n - t.offset;
                                        (o.howMany -= e), (t.nodesToHandle -= e);
                                    }
                                if (
                                    ('remove' == o.type &&
                                        (i <= o.offset
                                            ? (o.offset -= t.howMany)
                                            : t.offset < o.offset && ((t.nodesToHandle += o.howMany), (o.howMany = 0))),
                                    'attribute' == o.type)
                                )
                                    if (i <= o.offset) o.offset -= t.howMany;
                                    else if (t.offset < o.offset) {
                                        const e = i - o.offset;
                                        (o.offset = t.offset), (o.howMany -= e);
                                    } else if (t.offset < n)
                                        if (i <= n) {
                                            const i = o.howMany;
                                            o.howMany = t.offset - o.offset;
                                            const n = i - o.howMany - t.nodesToHandle;
                                            e.unshift({
                                                type: 'attribute',
                                                offset: t.offset,
                                                howMany: n,
                                                count: this._changeCount++,
                                            });
                                        } else o.howMany -= n - t.offset;
                            }
                            if ('attribute' == t.type) {
                                if ('insert' == o.type)
                                    if (t.offset < o.offset && i > o.offset) {
                                        if (i > n) {
                                            const t = {
                                                type: 'attribute',
                                                offset: n,
                                                howMany: i - n,
                                                count: this._changeCount++,
                                            };
                                            this._handleChange(t, e), e.push(t);
                                        }
                                        (t.nodesToHandle = o.offset - t.offset), (t.howMany = t.nodesToHandle);
                                    } else
                                        t.offset >= o.offset &&
                                            t.offset < n &&
                                            (i > n
                                                ? ((t.nodesToHandle = i - n), (t.offset = n))
                                                : (t.nodesToHandle = 0));
                                if ('remove' == o.type && t.offset < o.offset && i > o.offset) {
                                    const n = {
                                        type: 'attribute',
                                        offset: o.offset,
                                        howMany: i - o.offset,
                                        count: this._changeCount++,
                                    };
                                    this._handleChange(n, e),
                                        e.push(n),
                                        (t.nodesToHandle = o.offset - t.offset),
                                        (t.howMany = t.nodesToHandle);
                                }
                                'attribute' == o.type &&
                                    (t.offset >= o.offset && i <= n
                                        ? ((t.nodesToHandle = 0), (t.howMany = 0), (t.offset = 0))
                                        : t.offset <= o.offset && i >= n && (o.howMany = 0));
                            }
                        }
                        (t.howMany = t.nodesToHandle), delete t.nodesToHandle;
                    }
                    _getInsertDiff(t, e, o) {
                        return {
                            type: 'insert',
                            position: Os._createAt(t, e),
                            name: o,
                            length: 1,
                            changeCount: this._changeCount++,
                        };
                    }
                    _getRemoveDiff(t, e, o) {
                        return {
                            type: 'remove',
                            position: Os._createAt(t, e),
                            name: o,
                            length: 1,
                            changeCount: this._changeCount++,
                        };
                    }
                    _getAttributesDiff(t, e, o) {
                        const i = [];
                        o = new Map(o);
                        for (const [n, r] of e) {
                            const e = o.has(n) ? o.get(n) : null;
                            e !== r &&
                                i.push({
                                    type: 'attribute',
                                    position: t.start,
                                    range: t.clone(),
                                    length: 1,
                                    attributeKey: n,
                                    attributeOldValue: r,
                                    attributeNewValue: e,
                                    changeCount: this._changeCount++,
                                }),
                                o.delete(n);
                        }
                        for (const [e, n] of o)
                            i.push({
                                type: 'attribute',
                                position: t.start,
                                range: t.clone(),
                                length: 1,
                                attributeKey: e,
                                attributeOldValue: null,
                                attributeNewValue: n,
                                changeCount: this._changeCount++,
                            });
                        return i;
                    }
                    _isInInsertedElement(t) {
                        const e = t.parent;
                        if (!e) return !1;
                        const o = this._changesInElement.get(e),
                            i = t.startOffset;
                        if (o)
                            for (const t of o)
                                if ('insert' == t.type && i >= t.offset && i < t.offset + t.howMany) return !0;
                        return this._isInInsertedElement(e);
                    }
                    _removeAllNestedChanges(t, e, o) {
                        const i = new Bs(Os._createAt(t, e), Os._createAt(t, e + o));
                        for (const t of i.getItems({ shallow: !0 }))
                            t.is('element') &&
                                (this._elementSnapshots.delete(t),
                                this._changesInElement.delete(t),
                                this._removeAllNestedChanges(t, 0, t.maxOffset));
                    }
                }
                function kl(t) {
                    const e = [];
                    for (const o of t)
                        if (o.is('$text'))
                            for (let t = 0; t < o.data.length; t++)
                                e.push({ name: '$text', attributes: new Map(o.getAttributes()) });
                        else e.push({ name: o.name, attributes: new Map(o.getAttributes()) });
                    return e;
                }
                function _l(t, e) {
                    const o = [];
                    let i = 0,
                        n = 0;
                    for (const t of e) {
                        if (t.offset > i) {
                            for (let e = 0; e < t.offset - i; e++) o.push('e');
                            n += t.offset - i;
                        }
                        if ('insert' == t.type) {
                            for (let e = 0; e < t.howMany; e++) o.push('i');
                            i = t.offset + t.howMany;
                        } else if ('remove' == t.type) {
                            for (let e = 0; e < t.howMany; e++) o.push('r');
                            (i = t.offset), (n += t.howMany);
                        } else o.push(...'a'.repeat(t.howMany).split('')), (i = t.offset + t.howMany), (n += t.howMany);
                    }
                    if (n < t) for (let e = 0; e < t - n - i; e++) o.push('e');
                    return o;
                }
                function vl(t) {
                    const e = t.position && '$graveyard' == t.position.root.rootName,
                        o = t.range && '$graveyard' == t.range.root.rootName;
                    return !e && !o;
                }
                class yl {
                    constructor() {
                        (this._operations = []), (this._undoPairs = new Map()), (this._undoneOperations = new Set());
                    }
                    addOperation(t) {
                        this._operations.includes(t) || this._operations.push(t);
                    }
                    getOperations(t = Number.NEGATIVE_INFINITY, e = Number.POSITIVE_INFINITY) {
                        const o = [];
                        for (const i of this._operations) i.baseVersion >= t && i.baseVersion < e && o.push(i);
                        return o;
                    }
                    getOperation(t) {
                        for (const e of this._operations) if (e.baseVersion == t) return e;
                    }
                    setOperationAsUndone(t, e) {
                        this._undoPairs.set(e, t), this._undoneOperations.add(t);
                    }
                    isUndoingOperation(t) {
                        return this._undoPairs.has(t);
                    }
                    isUndoneOperation(t) {
                        return this._undoneOperations.has(t);
                    }
                    getUndoneOperation(t) {
                        return this._undoPairs.get(t);
                    }
                }
                function xl(t, e) {
                    return (
                        !!(o = t.charAt(e - 1)) &&
                        1 == o.length &&
                        /[\ud800-\udbff]/.test(o) &&
                        (function (t) {
                            return !!t && 1 == t.length && /[\udc00-\udfff]/.test(t);
                        })(t.charAt(e))
                    );
                    var o;
                }
                function Cl(t, e) {
                    return (
                        !!(o = t.charAt(e)) &&
                        1 == o.length &&
                        /[\u0300-\u036f\u1ab0-\u1aff\u1dc0-\u1dff\u20d0-\u20ff\ufe20-\ufe2f]/.test(o)
                    );
                    var o;
                }
                class Al {
                    constructor(t) {
                        (this.model = t),
                            (this.version = 0),
                            (this.history = new yl(this)),
                            (this.selection = new Qs(this)),
                            (this.roots = new Yo({ idProperty: 'rootName' })),
                            (this.differ = new wl(t.markers)),
                            (this._postFixers = new Set()),
                            (this._hasSelectionChangedFromTheLastChangeBlock = !1),
                            this.createRoot('$root', '$graveyard'),
                            this.listenTo(
                                t,
                                'applyOperation',
                                (t, e) => {
                                    const o = e[0];
                                    if (o.isDocumentOperation && o.baseVersion !== this.version)
                                        throw new l.a('model-document-applyoperation-wrong-version', this, {
                                            operation: o,
                                        });
                                },
                                { priority: 'highest' },
                            ),
                            this.listenTo(
                                t,
                                'applyOperation',
                                (t, e) => {
                                    const o = e[0];
                                    o.isDocumentOperation && this.differ.bufferOperation(o);
                                },
                                { priority: 'high' },
                            ),
                            this.listenTo(
                                t,
                                'applyOperation',
                                (t, e) => {
                                    const o = e[0];
                                    o.isDocumentOperation && (this.version++, this.history.addOperation(o));
                                },
                                { priority: 'low' },
                            ),
                            this.listenTo(this.selection, 'change', () => {
                                this._hasSelectionChangedFromTheLastChangeBlock = !0;
                            }),
                            this.listenTo(t.markers, 'update', (t, e, o, i) => {
                                this.differ.bufferMarkerChange(e.name, o, i, e.affectsData),
                                    null === o &&
                                        e.on('change', (t, o) => {
                                            this.differ.bufferMarkerChange(e.name, o, e.getRange(), e.affectsData);
                                        });
                            });
                    }
                    get graveyard() {
                        return this.getRoot('$graveyard');
                    }
                    createRoot(t = '$root', e = 'main') {
                        if (this.roots.get(e))
                            throw new l.a('model-document-createroot-name-exists', this, { name: e });
                        const o = new hl(this, t, e);
                        return this.roots.add(o), o;
                    }
                    destroy() {
                        this.selection.destroy(), this.stopListening();
                    }
                    getRoot(t = 'main') {
                        return this.roots.get(t);
                    }
                    getRootNames() {
                        return Array.from(this.roots, (t) => t.rootName).filter((t) => '$graveyard' != t);
                    }
                    registerPostFixer(t) {
                        this._postFixers.add(t);
                    }
                    toJSON() {
                        const t = si(this);
                        return (
                            (t.selection = '[engine.model.DocumentSelection]'), (t.model = '[engine.model.Model]'), t
                        );
                    }
                    _handleChangeBlock(t) {
                        this._hasDocumentChangedFromTheLastChangeBlock() &&
                            (this._callPostFixers(t),
                            this.selection.refresh(),
                            this.differ.hasDataChanges()
                                ? this.fire('change:data', t.batch)
                                : this.fire('change', t.batch),
                            this.selection.refresh(),
                            this.differ.reset()),
                            (this._hasSelectionChangedFromTheLastChangeBlock = !1);
                    }
                    _hasDocumentChangedFromTheLastChangeBlock() {
                        return !this.differ.isEmpty || this._hasSelectionChangedFromTheLastChangeBlock;
                    }
                    _getDefaultRoot() {
                        for (const t of this.roots) if (t !== this.graveyard) return t;
                        return this.graveyard;
                    }
                    _getDefaultRange() {
                        const t = this._getDefaultRoot(),
                            e = this.model,
                            o = e.schema,
                            i = e.createPositionFromPath(t, [0]);
                        return o.getNearestSelectionRange(i) || e.createRange(i);
                    }
                    _validateSelectionRange(t) {
                        return Tl(t.start) && Tl(t.end);
                    }
                    _callPostFixers(t) {
                        let e = !1;
                        do {
                            for (const o of this._postFixers) if ((this.selection.refresh(), (e = o(t)), e)) break;
                        } while (e);
                    }
                }
                function Tl(t) {
                    const e = t.textNode;
                    if (e) {
                        const o = e.data,
                            i = t.offset - e.startOffset;
                        return !xl(o, i) && !Cl(o, i);
                    }
                    return !0;
                }
                Kt(Al, h);
                class Pl {
                    constructor() {
                        this._markers = new Map();
                    }
                    [Symbol.iterator]() {
                        return this._markers.values();
                    }
                    has(t) {
                        return this._markers.has(t);
                    }
                    get(t) {
                        return this._markers.get(t) || null;
                    }
                    _set(t, e, o = !1, i = !1) {
                        const n = t instanceof Sl ? t.name : t;
                        if (n.includes(',')) throw new l.a('markercollection-incorrect-marker-name', this);
                        const r = this._markers.get(n);
                        if (r) {
                            const t = r.getRange();
                            let s = !1;
                            return (
                                t.isEqual(e) || (r._attachLiveRange(Ys.fromRange(e)), (s = !0)),
                                o != r.managedUsingOperations && ((r._managedUsingOperations = o), (s = !0)),
                                'boolean' == typeof i && i != r.affectsData && ((r._affectsData = i), (s = !0)),
                                s && this.fire('update:' + n, r, t, e),
                                r
                            );
                        }
                        const s = Ys.fromRange(e),
                            a = new Sl(n, s, o, i);
                        return this._markers.set(n, a), this.fire('update:' + n, a, null, e), a;
                    }
                    _remove(t) {
                        const e = t instanceof Sl ? t.name : t,
                            o = this._markers.get(e);
                        return (
                            !!o &&
                            (this._markers.delete(e),
                            this.fire('update:' + e, o, o.getRange(), null),
                            this._destroyMarker(o),
                            !0)
                        );
                    }
                    _refresh(t) {
                        const e = t instanceof Sl ? t.name : t,
                            o = this._markers.get(e);
                        if (!o) throw new l.a('markercollection-refresh-marker-not-exists', this);
                        const i = o.getRange();
                        this.fire('update:' + e, o, i, i, o.managedUsingOperations, o.affectsData);
                    }
                    *getMarkersAtPosition(t) {
                        for (const e of this) e.getRange().containsPosition(t) && (yield e);
                    }
                    *getMarkersIntersectingRange(t) {
                        for (const e of this) null !== e.getRange().getIntersection(t) && (yield e);
                    }
                    destroy() {
                        for (const t of this._markers.values()) this._destroyMarker(t);
                        (this._markers = null), this.stopListening();
                    }
                    *getMarkersGroup(t) {
                        for (const e of this._markers.values()) e.name.startsWith(t + ':') && (yield e);
                    }
                    _destroyMarker(t) {
                        t.stopListening(), t._detachLiveRange();
                    }
                }
                Kt(Pl, h);
                class Sl {
                    constructor(t, e, o, i) {
                        (this.name = t),
                            (this._liveRange = this._attachLiveRange(e)),
                            (this._managedUsingOperations = o),
                            (this._affectsData = i);
                    }
                    get managedUsingOperations() {
                        if (!this._liveRange) throw new l.a('marker-destroyed', this);
                        return this._managedUsingOperations;
                    }
                    get affectsData() {
                        if (!this._liveRange) throw new l.a('marker-destroyed', this);
                        return this._affectsData;
                    }
                    getStart() {
                        if (!this._liveRange) throw new l.a('marker-destroyed', this);
                        return this._liveRange.start.clone();
                    }
                    getEnd() {
                        if (!this._liveRange) throw new l.a('marker-destroyed', this);
                        return this._liveRange.end.clone();
                    }
                    getRange() {
                        if (!this._liveRange) throw new l.a('marker-destroyed', this);
                        return this._liveRange.toRange();
                    }
                    is(t) {
                        return 'marker' === t || 'model:marker' === t;
                    }
                    _attachLiveRange(t) {
                        return (
                            this._liveRange && this._detachLiveRange(),
                            t.delegate('change:range').to(this),
                            t.delegate('change:content').to(this),
                            (this._liveRange = t),
                            t
                        );
                    }
                    _detachLiveRange() {
                        this._liveRange.stopDelegating('change:range', this),
                            this._liveRange.stopDelegating('change:content', this),
                            this._liveRange.detach(),
                            (this._liveRange = null);
                    }
                }
                Kt(Sl, h);
                class El extends $a {
                    get type() {
                        return 'noop';
                    }
                    clone() {
                        return new El(this.baseVersion);
                    }
                    getReversed() {
                        return new El(this.baseVersion + 1);
                    }
                    _execute() {}
                    static get className() {
                        return 'NoOperation';
                    }
                }
                const Rl = {};
                (Rl[ol.className] = ol),
                    (Rl[rl.className] = rl),
                    (Rl[sl.className] = sl),
                    (Rl[nl.className] = nl),
                    (Rl[El.className] = El),
                    (Rl[$a.className] = $a),
                    (Rl[al.className] = al),
                    (Rl[ll.className] = ll),
                    (Rl[dl.className] = dl),
                    (Rl[cl.className] = cl);
                class Il extends Os {
                    constructor(t, e, o = 'toNone') {
                        if ((super(t, e, o), !this.root.is('rootElement')))
                            throw new l.a('model-liveposition-root-not-rootelement', t);
                        Vl.call(this);
                    }
                    detach() {
                        this.stopListening();
                    }
                    is(t) {
                        return (
                            'livePosition' === t ||
                            'model:livePosition' === t ||
                            'position' == t ||
                            'model:position' === t
                        );
                    }
                    toPosition() {
                        return new Os(this.root, this.path.slice(), this.stickiness);
                    }
                    static fromPosition(t, e) {
                        return new this(t.root, t.path.slice(), e || t.stickiness);
                    }
                }
                function Vl() {
                    this.listenTo(
                        this.root.document.model,
                        'applyOperation',
                        (t, e) => {
                            const o = e[0];
                            o.isDocumentOperation && Ol.call(this, o);
                        },
                        { priority: 'low' },
                    );
                }
                function Ol(t) {
                    const e = this.getTransformedByOperation(t);
                    if (!this.isEqual(e)) {
                        const t = this.toPosition();
                        (this.path = e.path), (this.root = e.root), this.fire('change', t);
                    }
                }
                Kt(Il, h);
                class zl {
                    constructor(t, e, o) {
                        (this.model = t),
                            (this.writer = e),
                            (this.position = o),
                            (this.canMergeWith = new Set([this.position.parent])),
                            (this.schema = t.schema),
                            (this._documentFragment = e.createDocumentFragment()),
                            (this._documentFragmentPosition = e.createPositionAt(this._documentFragment, 0)),
                            (this._firstNode = null),
                            (this._lastNode = null),
                            (this._lastAutoParagraph = null),
                            (this._filterAttributesOf = []),
                            (this._affectedStart = null),
                            (this._affectedEnd = null);
                    }
                    handleNodes(t) {
                        for (const e of Array.from(t)) this._handleNode(e);
                        this._insertPartialFragment(),
                            this._lastAutoParagraph && this._updateLastNodeFromAutoParagraph(this._lastAutoParagraph),
                            this._mergeOnRight(),
                            this.schema.removeDisallowedAttributes(this._filterAttributesOf, this.writer),
                            (this._filterAttributesOf = []);
                    }
                    _updateLastNodeFromAutoParagraph(t) {
                        const e = this.writer.createPositionAfter(this._lastNode),
                            o = this.writer.createPositionAfter(t);
                        if (o.isAfter(e)) {
                            if (((this._lastNode = t), this.position.parent != t || !this.position.isAtEnd))
                                throw new l.a('insertcontent-invalid-insertion-position', this);
                            (this.position = o), this._setAffectedBoundaries(this.position);
                        }
                    }
                    getSelectionRange() {
                        return this.nodeToSelect
                            ? Bs._createOn(this.nodeToSelect)
                            : this.model.schema.getNearestSelectionRange(this.position);
                    }
                    getAffectedRange() {
                        return this._affectedStart ? new Bs(this._affectedStart, this._affectedEnd) : null;
                    }
                    destroy() {
                        this._affectedStart && this._affectedStart.detach(),
                            this._affectedEnd && this._affectedEnd.detach();
                    }
                    _handleNode(t) {
                        if (this.schema.isObject(t)) return void this._handleObject(t);
                        let e = this._checkAndAutoParagraphToAllowedPosition(t);
                        e || ((e = this._checkAndSplitToAllowedPosition(t)), e)
                            ? (this._appendToFragment(t),
                              this._firstNode || (this._firstNode = t),
                              (this._lastNode = t))
                            : this._handleDisallowedNode(t);
                    }
                    _insertPartialFragment() {
                        if (this._documentFragment.isEmpty) return;
                        const t = Il.fromPosition(this.position, 'toNext');
                        this._setAffectedBoundaries(this.position),
                            this._documentFragment.getChild(0) == this._firstNode &&
                                (this.writer.insert(this._firstNode, this.position),
                                this._mergeOnLeft(),
                                (this.position = t.toPosition())),
                            this._documentFragment.isEmpty || this.writer.insert(this._documentFragment, this.position),
                            (this._documentFragmentPosition = this.writer.createPositionAt(this._documentFragment, 0)),
                            (this.position = t.toPosition()),
                            t.detach();
                    }
                    _handleObject(t) {
                        this._checkAndSplitToAllowedPosition(t)
                            ? this._appendToFragment(t)
                            : this._tryAutoparagraphing(t);
                    }
                    _handleDisallowedNode(t) {
                        t.is('element') ? this.handleNodes(t.getChildren()) : this._tryAutoparagraphing(t);
                    }
                    _appendToFragment(t) {
                        if (!this.schema.checkChild(this.position, t))
                            throw new l.a('insertcontent-wrong-position', this, { node: t, position: this.position });
                        this.writer.insert(t, this._documentFragmentPosition),
                            (this._documentFragmentPosition = this._documentFragmentPosition.getShiftedBy(
                                t.offsetSize,
                            )),
                            this.schema.isObject(t) && !this.schema.checkChild(this.position, '$text')
                                ? (this.nodeToSelect = t)
                                : (this.nodeToSelect = null),
                            this._filterAttributesOf.push(t);
                    }
                    _setAffectedBoundaries(t) {
                        this._affectedStart || (this._affectedStart = Il.fromPosition(t, 'toPrevious')),
                            (this._affectedEnd && !this._affectedEnd.isBefore(t)) ||
                                (this._affectedEnd && this._affectedEnd.detach(),
                                (this._affectedEnd = Il.fromPosition(t, 'toNext')));
                    }
                    _mergeOnLeft() {
                        const t = this._firstNode;
                        if (!(t instanceof Rs)) return;
                        if (!this._canMergeLeft(t)) return;
                        const e = Il._createBefore(t);
                        e.stickiness = 'toNext';
                        const o = Il.fromPosition(this.position, 'toNext');
                        this._affectedStart.isEqual(e) &&
                            (this._affectedStart.detach(),
                            (this._affectedStart = Il._createAt(e.nodeBefore, 'end', 'toPrevious'))),
                            this._firstNode === this._lastNode &&
                                ((this._firstNode = e.nodeBefore), (this._lastNode = e.nodeBefore)),
                            this.writer.merge(e),
                            e.isEqual(this._affectedEnd) &&
                                this._firstNode === this._lastNode &&
                                (this._affectedEnd.detach(),
                                (this._affectedEnd = Il._createAt(e.nodeBefore, 'end', 'toNext'))),
                            (this.position = o.toPosition()),
                            o.detach(),
                            this._filterAttributesOf.push(this.position.parent),
                            e.detach();
                    }
                    _mergeOnRight() {
                        const t = this._lastNode;
                        if (!(t instanceof Rs)) return;
                        if (!this._canMergeRight(t)) return;
                        const e = Il._createAfter(t);
                        if (((e.stickiness = 'toNext'), !this.position.isEqual(e)))
                            throw new l.a('insertcontent-invalid-insertion-position', this);
                        this.position = Os._createAt(e.nodeBefore, 'end');
                        const o = Il.fromPosition(this.position, 'toPrevious');
                        this._affectedEnd.isEqual(e) &&
                            (this._affectedEnd.detach(),
                            (this._affectedEnd = Il._createAt(e.nodeBefore, 'end', 'toNext'))),
                            this._firstNode === this._lastNode &&
                                ((this._firstNode = e.nodeBefore), (this._lastNode = e.nodeBefore)),
                            this.writer.merge(e),
                            e.getShiftedBy(-1).isEqual(this._affectedStart) &&
                                this._firstNode === this._lastNode &&
                                (this._affectedStart.detach(),
                                (this._affectedStart = Il._createAt(e.nodeBefore, 0, 'toPrevious'))),
                            (this.position = o.toPosition()),
                            o.detach(),
                            this._filterAttributesOf.push(this.position.parent),
                            e.detach();
                    }
                    _canMergeLeft(t) {
                        const e = t.previousSibling;
                        return e instanceof Rs && this.canMergeWith.has(e) && this.model.schema.checkMerge(e, t);
                    }
                    _canMergeRight(t) {
                        const e = t.nextSibling;
                        return e instanceof Rs && this.canMergeWith.has(e) && this.model.schema.checkMerge(t, e);
                    }
                    _tryAutoparagraphing(t) {
                        const e = this.writer.createElement('paragraph');
                        this._getAllowedIn(e, this.position.parent) &&
                            this.schema.checkChild(e, t) &&
                            (e._appendChild(t), this._handleNode(e));
                    }
                    _checkAndAutoParagraphToAllowedPosition(t) {
                        if (this.schema.checkChild(this.position.parent, t)) return !0;
                        if (
                            !this.schema.checkChild(this.position.parent, 'paragraph') ||
                            !this.schema.checkChild('paragraph', t)
                        )
                            return !1;
                        this._insertPartialFragment();
                        const e = this.writer.createElement('paragraph');
                        return (
                            this.writer.insert(e, this.position),
                            this._setAffectedBoundaries(this.position),
                            (this._lastAutoParagraph = e),
                            (this.position = this.writer.createPositionAt(e, 0)),
                            !0
                        );
                    }
                    _checkAndSplitToAllowedPosition(t) {
                        const e = this._getAllowedIn(t, this.position.parent);
                        if (!e) return !1;
                        for (e != this.position.parent && this._insertPartialFragment(); e != this.position.parent; ) {
                            if (this.schema.isLimit(this.position.parent)) return !1;
                            if (this.position.isAtStart) {
                                const t = this.position.parent;
                                (this.position = this.writer.createPositionBefore(t)),
                                    t.isEmpty && t.parent === e && this.writer.remove(t);
                            } else if (this.position.isAtEnd)
                                this.position = this.writer.createPositionAfter(this.position.parent);
                            else {
                                const t = this.writer.createPositionAfter(this.position.parent);
                                this._setAffectedBoundaries(this.position),
                                    this.writer.split(this.position),
                                    (this.position = t),
                                    this.canMergeWith.add(this.position.nodeAfter);
                            }
                        }
                        return !0;
                    }
                    _getAllowedIn(t, e) {
                        return this.schema.checkChild(e, t) ? e : e.parent ? this._getAllowedIn(t, e.parent) : null;
                    }
                }
                function Ml(t, e, o = {}) {
                    if (e.isCollapsed) return;
                    const i = e.getFirstRange();
                    if ('$graveyard' == i.root.rootName) return;
                    const n = t.schema;
                    t.change((t) => {
                        if (
                            !o.doNotResetEntireContent &&
                            (function (t, e) {
                                const o = t.getLimitElement(e);
                                if (!e.containsEntireContent(o)) return !1;
                                const i = e.getFirstRange();
                                if (i.start.parent == i.end.parent) return !1;
                                return t.checkChild(o, 'paragraph');
                            })(n, e)
                        )
                            return void (function (t, e) {
                                const o = t.model.schema.getLimitElement(e);
                                t.remove(t.createRangeIn(o)), Bl(t, t.createPositionAt(o, 0), e);
                            })(t, e);
                        const [r, s] = (function (t) {
                            const e = t.root.document.model,
                                o = t.start;
                            let i = t.end;
                            if (e.hasContent(t, { ignoreMarkers: !0 })) {
                                const o = (function (t) {
                                    const e = t.parent,
                                        o = e.root.document.model.schema,
                                        i = e.getAncestors({ parentFirst: !0, includeSelf: !0 });
                                    for (const t of i) {
                                        if (o.isLimit(t)) return null;
                                        if (o.isBlock(t)) return t;
                                    }
                                })(i);
                                if (o && i.isTouching(e.createPositionAt(o, 0))) {
                                    const o = e.createSelection(t);
                                    e.modifySelection(o, { direction: 'backward' }), (i = o.getLastPosition());
                                }
                            }
                            return [Il.fromPosition(o, 'toPrevious'), Il.fromPosition(i, 'toNext')];
                        })(i);
                        r.isTouching(s) || t.remove(t.createRange(r, s)),
                            o.leaveUnmerged ||
                                (!(function (t, e, o) {
                                    const i = t.model;
                                    if (!Nl(t.model.schema, e, o)) return;
                                    const [n, r] = (function (t, e) {
                                        const o = t.getAncestors(),
                                            i = e.getAncestors();
                                        let n = 0;
                                        for (; o[n] && o[n] == i[n]; ) n++;
                                        return [o[n], i[n]];
                                    })(e, o);
                                    if (!n || !r) return;
                                    !i.hasContent(n, { ignoreMarkers: !0 }) && i.hasContent(r, { ignoreMarkers: !0 })
                                        ? (function t(e, o, i, n) {
                                              const r = o.parent,
                                                  s = i.parent;
                                              if (r == n || s == n) return;
                                              (o = e.createPositionAfter(r)),
                                                  (i = e.createPositionBefore(s)).isEqual(o) || e.insert(r, i);
                                              for (; o.parent.isEmpty; ) {
                                                  const t = o.parent;
                                                  (o = e.createPositionBefore(t)), e.remove(t);
                                              }
                                              if (
                                                  ((i = e.createPositionBefore(s)),
                                                  (function (t, e) {
                                                      const o = e.nodeBefore,
                                                          i = e.nodeAfter;
                                                      o.name != i.name && t.rename(o, i.name);
                                                      t.clearAttributes(o),
                                                          t.setAttributes(Object.fromEntries(i.getAttributes()), o),
                                                          t.merge(e);
                                                  })(e, i),
                                                  !Nl(e.model.schema, o, i))
                                              )
                                                  return;
                                              t(e, o, i, n);
                                          })(t, e, o, n.parent)
                                        : (function t(e, o, i, n) {
                                              const r = o.parent,
                                                  s = i.parent;
                                              if (r == n || s == n) return;
                                              (o = e.createPositionAfter(r)),
                                                  (i = e.createPositionBefore(s)).isEqual(o) || e.insert(s, o);
                                              e.merge(o);
                                              for (; i.parent.isEmpty; ) {
                                                  const t = i.parent;
                                                  (i = e.createPositionBefore(t)), e.remove(t);
                                              }
                                              if (!Nl(e.model.schema, o, i)) return;
                                              t(e, o, i, n);
                                          })(t, e, o, n.parent);
                                })(t, r, s),
                                n.removeDisallowedAttributes(r.parent.getChildren(), t)),
                            Fl(t, e, r),
                            !o.doNotAutoparagraph &&
                                (function (t, e) {
                                    const o = t.checkChild(e, '$text'),
                                        i = t.checkChild(e, 'paragraph');
                                    return !o && i;
                                })(n, r) &&
                                Bl(t, r, e),
                            r.detach(),
                            s.detach();
                    });
                }
                function Nl(t, e, o) {
                    const i = e.parent,
                        n = o.parent;
                    return (
                        i != n &&
                        !t.isLimit(i) &&
                        !t.isLimit(n) &&
                        (function (t, e, o) {
                            const i = new Bs(t, e);
                            for (const t of i.getWalker()) if (o.isLimit(t.item)) return !1;
                            return !0;
                        })(e, o, t)
                    );
                }
                function Bl(t, e, o) {
                    const i = t.createElement('paragraph');
                    t.insert(i, e), Fl(t, o, t.createPositionAt(i, 0));
                }
                function Fl(t, e, o) {
                    e instanceof Qs ? t.setSelection(o) : e.setTo(o);
                }
                function Dl(t, e) {
                    const { isForward: o, walker: i, unit: n, schema: r } = t,
                        { type: s, item: a, nextPosition: l } = e;
                    if ('text' == s)
                        return 'word' === t.unit
                            ? (function (t, e) {
                                  let o = t.position.textNode;
                                  if (o) {
                                      let i = t.position.offset - o.startOffset;
                                      for (; !Hl(o.data, i, e) && !jl(o, i, e); ) {
                                          t.next();
                                          const n = e ? t.position.nodeAfter : t.position.nodeBefore;
                                          if (n && n.is('$text')) {
                                              const i = n.data.charAt(e ? 0 : n.data.length - 1);
                                              ' ,.?!:;"-()'.includes(i) || (t.next(), (o = t.position.textNode));
                                          }
                                          i = t.position.offset - o.startOffset;
                                      }
                                  }
                                  return t.position;
                              })(i, o)
                            : (function (t, e) {
                                  const o = t.position.textNode;
                                  if (o) {
                                      const i = o.data;
                                      let n = t.position.offset - o.startOffset;
                                      for (; xl(i, n) || ('character' == e && Cl(i, n)); )
                                          t.next(), (n = t.position.offset - o.startOffset);
                                  }
                                  return t.position;
                              })(i, n);
                    if (s == (o ? 'elementStart' : 'elementEnd')) {
                        if (r.isSelectable(a)) return Os._createAt(a, o ? 'after' : 'before');
                        if (r.checkChild(l, '$text')) return l;
                    } else {
                        if (r.isLimit(a)) return void i.skip(() => !0);
                        if (r.checkChild(l, '$text')) return l;
                    }
                }
                function Ll(t, e) {
                    const o = t.root,
                        i = Os._createAt(o, e ? 'end' : 0);
                    return e ? new Bs(t, i) : new Bs(i, t);
                }
                function Hl(t, e, o) {
                    const i = e + (o ? 0 : -1);
                    return ' ,.?!:;"-()'.includes(t.charAt(i));
                }
                function jl(t, e, o) {
                    return e === (o ? t.endOffset : 0);
                }
                function Wl(t, e) {
                    const o = [];
                    Array.from(t.getItems({ direction: 'backward' }))
                        .map((t) => e.createRangeOn(t))
                        .filter(
                            (e) =>
                                (e.start.isAfter(t.start) || e.start.isEqual(t.start)) &&
                                (e.end.isBefore(t.end) || e.end.isEqual(t.end)),
                        )
                        .forEach((t) => {
                            o.push(t.start.parent), e.remove(t);
                        }),
                        o.forEach((t) => {
                            let o = t;
                            for (; o.parent && o.isEmpty; ) {
                                const t = e.createRangeOn(o);
                                (o = o.parent), e.remove(t);
                            }
                        });
                }
                function ql(t) {
                    t.document.registerPostFixer((e) =>
                        (function (t, e) {
                            const o = e.document.selection,
                                i = e.schema,
                                n = [];
                            let r = !1;
                            for (const t of o.getRanges()) {
                                const e = Ul(t, i);
                                e && !e.isEqual(t) ? (n.push(e), (r = !0)) : n.push(t);
                            }
                            r &&
                                t.setSelection(
                                    (function (t) {
                                        const e = [];
                                        e.push(t.shift());
                                        for (const o of t) {
                                            const t = e.pop();
                                            if (o.isEqual(t)) e.push(t);
                                            else if (o.isIntersecting(t)) {
                                                const i = t.start.isAfter(o.start) ? o.start : t.start,
                                                    n = t.end.isAfter(o.end) ? t.end : o.end,
                                                    r = new Bs(i, n);
                                                e.push(r);
                                            } else e.push(t), e.push(o);
                                        }
                                        return e;
                                    })(n),
                                    { backward: o.isBackward },
                                );
                        })(e, t),
                    );
                }
                function Ul(t, e) {
                    return t.isCollapsed
                        ? (function (t, e) {
                              const o = t.start,
                                  i = e.getNearestSelectionRange(o);
                              if (!i) return null;
                              if (!i.isCollapsed) return i;
                              const n = i.start;
                              if (o.isEqual(n)) return null;
                              return new Bs(n);
                          })(t, e)
                        : (function (t, e) {
                              const { start: o, end: i } = t,
                                  n = e.checkChild(o, '$text'),
                                  r = e.checkChild(i, '$text'),
                                  s = e.getLimitElement(o),
                                  a = e.getLimitElement(i);
                              if (s === a) {
                                  if (n && r) return null;
                                  if (
                                      (function (t, e, o) {
                                          const i =
                                                  (t.nodeAfter && !o.isLimit(t.nodeAfter)) || o.checkChild(t, '$text'),
                                              n =
                                                  (e.nodeBefore && !o.isLimit(e.nodeBefore)) ||
                                                  o.checkChild(e, '$text');
                                          return i || n;
                                      })(o, i, e)
                                  ) {
                                      const t =
                                              o.nodeAfter && e.isSelectable(o.nodeAfter)
                                                  ? null
                                                  : e.getNearestSelectionRange(o, 'forward'),
                                          n =
                                              i.nodeBefore && e.isSelectable(i.nodeBefore)
                                                  ? null
                                                  : e.getNearestSelectionRange(i, 'backward'),
                                          r = t ? t.start : o,
                                          s = n ? n.end : i;
                                      return new Bs(r, s);
                                  }
                              }
                              const l = s && !s.is('rootElement'),
                                  c = a && !a.is('rootElement');
                              if (l || c) {
                                  const t = o.nodeAfter && i.nodeBefore && o.nodeAfter.parent === i.nodeBefore.parent,
                                      n = l && (!t || !Kl(o.nodeAfter, e)),
                                      r = c && (!t || !Kl(i.nodeBefore, e));
                                  let d = o,
                                      h = i;
                                  return (
                                      n && (d = Os._createBefore($l(s, e))),
                                      r && (h = Os._createAfter($l(a, e))),
                                      new Bs(d, h)
                                  );
                              }
                              return null;
                          })(t, e);
                }
                function $l(t, e) {
                    let o = t,
                        i = o;
                    for (; e.isLimit(i) && i.parent; ) (o = i), (i = i.parent);
                    return o;
                }
                function Kl(t, e) {
                    return t && e.isSelectable(t);
                }
                class Gl {
                    constructor() {
                        (this.markers = new Pl()),
                            (this.document = new Al(this)),
                            (this.schema = new Aa()),
                            (this._pendingChanges = []),
                            (this._currentWriter = null),
                            [
                                'insertContent',
                                'deleteContent',
                                'modifySelection',
                                'getSelectedContent',
                                'applyOperation',
                            ].forEach((t) => this.decorate(t)),
                            this.on(
                                'applyOperation',
                                (t, e) => {
                                    e[0]._validate();
                                },
                                { priority: 'highest' },
                            ),
                            this.schema.register('$root', { isLimit: !0 }),
                            this.schema.register('$block', { allowIn: '$root', isBlock: !0 }),
                            this.schema.register('$text', { allowIn: '$block', isInline: !0, isContent: !0 }),
                            this.schema.register('$clipboardHolder', { allowContentOf: '$root', isLimit: !0 }),
                            this.schema.extend('$text', { allowIn: '$clipboardHolder' }),
                            this.schema.register('$marker'),
                            this.schema.addChildCheck((t, e) => {
                                if ('$marker' === e.name) return !0;
                            }),
                            ql(this),
                            this.document.registerPostFixer(ha);
                    }
                    change(t) {
                        try {
                            return 0 === this._pendingChanges.length
                                ? (this._pendingChanges.push({ batch: new Ua(), callback: t }),
                                  this._runPendingChanges()[0])
                                : t(this._currentWriter);
                        } catch (t) {
                            l.a.rethrowUnexpectedError(t, this);
                        }
                    }
                    enqueueChange(t, e) {
                        try {
                            'string' == typeof t
                                ? (t = new Ua(t))
                                : 'function' == typeof t && ((e = t), (t = new Ua())),
                                this._pendingChanges.push({ batch: t, callback: e }),
                                1 == this._pendingChanges.length && this._runPendingChanges();
                        } catch (t) {
                            l.a.rethrowUnexpectedError(t, this);
                        }
                    }
                    applyOperation(t) {
                        t._execute();
                    }
                    insertContent(t, e, o) {
                        return (function (t, e, o, i) {
                            return t.change((n) => {
                                let r;
                                (r = o
                                    ? o instanceof Us || o instanceof Qs
                                        ? o
                                        : n.createSelection(o, i)
                                    : t.document.selection),
                                    r.isCollapsed || t.deleteContent(r, { doNotAutoparagraph: !0 });
                                const s = new zl(t, n, r.anchor);
                                let a;
                                (a = e.is('documentFragment') ? e.getChildren() : [e]), s.handleNodes(a);
                                const l = s.getSelectionRange();
                                l && (r instanceof Qs ? n.setSelection(l) : r.setTo(l));
                                const c = s.getAffectedRange() || t.createRange(r.anchor);
                                return s.destroy(), c;
                            });
                        })(this, t, e, o);
                    }
                    deleteContent(t, e) {
                        Ml(this, t, e);
                    }
                    modifySelection(t, e) {
                        !(function (t, e, o = {}) {
                            const i = t.schema,
                                n = 'backward' != o.direction,
                                r = o.unit ? o.unit : 'character',
                                s = e.focus,
                                a = new Is({
                                    boundaries: Ll(s, n),
                                    singleCharacters: !0,
                                    direction: n ? 'forward' : 'backward',
                                }),
                                l = { walker: a, schema: i, isForward: n, unit: r };
                            let c;
                            for (; (c = a.next()); ) {
                                if (c.done) return;
                                const o = Dl(l, c.value);
                                if (o)
                                    return void (e instanceof Qs
                                        ? t.change((t) => {
                                              t.setSelectionFocus(o);
                                          })
                                        : e.setFocus(o));
                            }
                        })(this, t, e);
                    }
                    getSelectedContent(t) {
                        return (function (t, e) {
                            return t.change((t) => {
                                const o = t.createDocumentFragment(),
                                    i = e.getFirstRange();
                                if (!i || i.isCollapsed) return o;
                                const n = i.start.root,
                                    r = i.start.getCommonPath(i.end),
                                    s = n.getNodeByPath(r);
                                let a;
                                a =
                                    i.start.parent == i.end.parent
                                        ? i
                                        : t.createRange(
                                              t.createPositionAt(s, i.start.path[r.length]),
                                              t.createPositionAt(s, i.end.path[r.length] + 1),
                                          );
                                const l = a.end.offset - a.start.offset;
                                for (const e of a.getItems({ shallow: !0 }))
                                    e.is('$textProxy')
                                        ? t.appendText(e.data, e.getAttributes(), o)
                                        : t.append(t.cloneElement(e, !0), o);
                                if (a != i) {
                                    const e = i._getTransformedByMove(a.start, t.createPositionAt(o, 0), l)[0],
                                        n = t.createRange(t.createPositionAt(o, 0), e.start);
                                    Wl(t.createRange(e.end, t.createPositionAt(o, 'end')), t), Wl(n, t);
                                }
                                return o;
                            });
                        })(this, t);
                    }
                    hasContent(t, e = {}) {
                        const o = t instanceof Rs ? Bs._createIn(t) : t;
                        if (o.isCollapsed) return !1;
                        const { ignoreWhitespaces: i = !1, ignoreMarkers: n = !1 } = e;
                        if (!n)
                            for (const t of this.markers.getMarkersIntersectingRange(o)) if (t.affectsData) return !0;
                        for (const t of o.getItems())
                            if (this.schema.isContent(t)) {
                                if (!t.is('$textProxy')) return !0;
                                if (!i) return !0;
                                if (-1 !== t.data.search(/\S/)) return !0;
                            }
                        return !1;
                    }
                    createPositionFromPath(t, e, o) {
                        return new Os(t, e, o);
                    }
                    createPositionAt(t, e) {
                        return Os._createAt(t, e);
                    }
                    createPositionAfter(t) {
                        return Os._createAfter(t);
                    }
                    createPositionBefore(t) {
                        return Os._createBefore(t);
                    }
                    createRange(t, e) {
                        return new Bs(t, e);
                    }
                    createRangeIn(t) {
                        return Bs._createIn(t);
                    }
                    createRangeOn(t) {
                        return Bs._createOn(t);
                    }
                    createSelection(t, e, o) {
                        return new Us(t, e, o);
                    }
                    createBatch(t) {
                        return new Ua(t);
                    }
                    createOperationFromJSON(t) {
                        return class {
                            static fromJSON(t, e) {
                                return Rl[t.__className].fromJSON(t, e);
                            }
                        }.fromJSON(t, this.document);
                    }
                    destroy() {
                        this.document.destroy(), this.stopListening();
                    }
                    _runPendingChanges() {
                        const t = [];
                        for (this.fire('_beforeChanges'); this._pendingChanges.length; ) {
                            const e = this._pendingChanges[0].batch;
                            this._currentWriter = new ul(this, e);
                            const o = this._pendingChanges[0].callback(this._currentWriter);
                            t.push(o),
                                this.document._handleChangeBlock(this._currentWriter),
                                this._pendingChanges.shift(),
                                (this._currentWriter = null);
                        }
                        return this.fire('_afterChanges'), t;
                    }
                }
                Kt(Gl, Ht);
                class Jl {
                    constructor() {
                        this._listener = Object.create(kr);
                    }
                    listenTo(t) {
                        this._listener.listenTo(t, 'keydown', (t, e) => {
                            this._listener.fire('_keydown:' + xn(e), e);
                        });
                    }
                    set(t, e, o = {}) {
                        const i = Cn(t),
                            n = o.priority;
                        this._listener.listenTo(
                            this._listener,
                            '_keydown:' + i,
                            (t, o) => {
                                e(o, () => {
                                    o.preventDefault(), o.stopPropagation(), t.stop();
                                }),
                                    (t.return = !0);
                            },
                            { priority: n },
                        );
                    }
                    press(t) {
                        return !!this._listener.fire('_keydown:' + xn(t), t);
                    }
                    destroy() {
                        this._listener.stopListening();
                    }
                }
                class Yl extends Jl {
                    constructor(t) {
                        super(), (this.editor = t);
                    }
                    set(t, e, o = {}) {
                        if ('string' == typeof e) {
                            const t = e;
                            e = (e, o) => {
                                this.editor.execute(t), o();
                            };
                        }
                        super.set(t, e, o);
                    }
                }
                class Xl {
                    constructor(t = {}) {
                        (this._context = t.context || new ii({ language: t.language })),
                            this._context._addEditor(this, !t.context);
                        const e = Array.from(this.constructor.builtinPlugins || []);
                        (this.config = new $o(t, this.constructor.defaultConfig)),
                            this.config.define('plugins', e),
                            this.config.define(this._context._getEditorConfig()),
                            (this.plugins = new Xo(this, e, this._context.plugins)),
                            (this.locale = this._context.locale),
                            (this.t = this.locale.t),
                            (this.commands = new ya()),
                            this.set('state', 'initializing'),
                            this.once('ready', () => (this.state = 'ready'), { priority: 'high' }),
                            this.once('destroy', () => (this.state = 'destroyed'), { priority: 'high' }),
                            this.set('isReadOnly', !1),
                            (this.model = new Gl());
                        const o = new Ki();
                        (this.data = new Ha(this.model, o)),
                            (this.editing = new va(this.model, o)),
                            this.editing.view.document.bind('isReadOnly').to(this),
                            (this.conversion = new ja(
                                [this.editing.downcastDispatcher, this.data.downcastDispatcher],
                                this.data.upcastDispatcher,
                            )),
                            this.conversion.addAlias('dataDowncast', this.data.downcastDispatcher),
                            this.conversion.addAlias('editingDowncast', this.editing.downcastDispatcher),
                            (this.keystrokes = new Yl(this)),
                            this.keystrokes.listenTo(this.editing.view.document);
                    }
                    initPlugins() {
                        const t = this.config,
                            e = t.get('plugins'),
                            o = t.get('removePlugins') || [],
                            i = t.get('extraPlugins') || [],
                            n = t.get('substitutePlugins') || [];
                        return this.plugins.init(e.concat(i), o, n);
                    }
                    destroy() {
                        let t = Promise.resolve();
                        return (
                            'initializing' == this.state && (t = new Promise((t) => this.once('ready', t))),
                            t
                                .then(() => {
                                    this.fire('destroy'), this.stopListening(), this.commands.destroy();
                                })
                                .then(() => this.plugins.destroy())
                                .then(() => {
                                    this.model.destroy(),
                                        this.data.destroy(),
                                        this.editing.destroy(),
                                        this.keystrokes.destroy();
                                })
                                .then(() => this._context._removeEditor(this))
                        );
                    }
                    execute(...t) {
                        try {
                            return this.commands.execute(...t);
                        } catch (t) {
                            l.a.rethrowUnexpectedError(t, this);
                        }
                    }
                    focus() {
                        this.editing.view.focus();
                    }
                }
                Kt(Xl, Ht);
                class Zl {
                    constructor(t) {
                        (this.editor = t), (this._components = new Map());
                    }
                    *names() {
                        for (const t of this._components.values()) yield t.originalName;
                    }
                    add(t, e) {
                        this._components.set(Ql(t), { callback: e, originalName: t });
                    }
                    create(t) {
                        if (!this.has(t)) throw new l.a('componentfactory-item-missing', this, { name: t });
                        return this._components.get(Ql(t)).callback(this.editor.locale);
                    }
                    has(t) {
                        return this._components.has(Ql(t));
                    }
                }
                function Ql(t) {
                    return String(t).toLowerCase();
                }
                class tc {
                    constructor() {
                        this.set('isFocused', !1),
                            this.set('focusedElement', null),
                            (this._elements = new Set()),
                            (this._nextEventLoopTimeout = null);
                    }
                    add(t) {
                        if (this._elements.has(t)) throw new l.a('focustracker-add-element-already-exist', this);
                        this.listenTo(t, 'focus', () => this._focus(t), { useCapture: !0 }),
                            this.listenTo(t, 'blur', () => this._blur(), { useCapture: !0 }),
                            this._elements.add(t);
                    }
                    remove(t) {
                        t === this.focusedElement && this._blur(t),
                            this._elements.has(t) && (this.stopListening(t), this._elements.delete(t));
                    }
                    destroy() {
                        this.stopListening();
                    }
                    _focus(t) {
                        clearTimeout(this._nextEventLoopTimeout), (this.focusedElement = t), (this.isFocused = !0);
                    }
                    _blur() {
                        clearTimeout(this._nextEventLoopTimeout),
                            (this._nextEventLoopTimeout = setTimeout(() => {
                                (this.focusedElement = null), (this.isFocused = !1);
                            }, 0));
                    }
                }
                Kt(tc, kr), Kt(tc, Ht);
                class ec {
                    constructor(t) {
                        (this.editor = t),
                            (this.componentFactory = new Zl(t)),
                            (this.focusTracker = new tc()),
                            (this._editableElementsMap = new Map()),
                            this.listenTo(t.editing.view.document, 'layoutChanged', () => this.update());
                    }
                    get element() {
                        return null;
                    }
                    update() {
                        this.fire('update');
                    }
                    destroy() {
                        this.stopListening(), this.focusTracker.destroy();
                        for (const t of this._editableElementsMap.values()) t.ckeditorInstance = null;
                        this._editableElementsMap = new Map();
                    }
                    setEditableElement(t, e) {
                        this._editableElementsMap.set(t, e), e.ckeditorInstance || (e.ckeditorInstance = this.editor);
                    }
                    getEditableElement(t = 'main') {
                        return this._editableElementsMap.get(t);
                    }
                    getEditableElementsNames() {
                        return this._editableElementsMap.keys();
                    }
                    get _editableElements() {
                        return (
                            console.warn(
                                'editor-ui-deprecated-editable-elements: The EditorUI#_editableElements property has been deprecated and will be removed in the near future.',
                                { editorUI: this },
                            ),
                            this._editableElementsMap
                        );
                    }
                }
                Kt(ec, h);
                var oc = {
                    setData(t) {
                        this.data.set(t);
                    },
                    getData(t) {
                        return this.data.get(t);
                    },
                };
                var ic = {
                    updateSourceElement() {
                        if (!this.sourceElement) throw new l.a('editor-missing-sourceelement', this);
                        var t, e;
                        (t = this.sourceElement),
                            (e = this.data.get()),
                            t instanceof HTMLTextAreaElement && (t.value = e),
                            (t.innerHTML = e);
                    },
                };
                class nc extends ni {
                    static get pluginName() {
                        return 'PendingActions';
                    }
                    init() {
                        this.set('hasAny', !1),
                            (this._actions = new Yo({ idProperty: '_id' })),
                            this._actions.delegate('add', 'remove').to(this);
                    }
                    add(t) {
                        if ('string' != typeof t) throw new l.a('pendingactions-add-invalid-message', this);
                        const e = Object.create(Ht);
                        return e.set('message', t), this._actions.add(e), (this.hasAny = !0), e;
                    }
                    remove(t) {
                        this._actions.remove(t), (this.hasAny = !!this._actions.length);
                    }
                    get first() {
                        return this._actions.get(0);
                    }
                    [Symbol.iterator]() {
                        return this._actions[Symbol.iterator]();
                    }
                }
                const rc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.591 10.177l4.243 4.242a1 1 0 0 1-1.415 1.415l-4.242-4.243-4.243 4.243a1 1 0 0 1-1.414-1.415l4.243-4.242L4.52 5.934A1 1 0 0 1 5.934 4.52l4.243 4.243 4.242-4.243a1 1 0 1 1 1.415 1.414l-4.243 4.243z"/></svg>',
                    sc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.972 16.615a.997.997 0 0 1-.744-.292l-4.596-4.596a1 1 0 1 1 1.414-1.414l3.926 3.926 9.937-9.937a1 1 0 0 1 1.414 1.415L7.717 16.323a.997.997 0 0 1-.745.292z"/></svg>',
                    ac =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8.636 9.531l-2.758 3.94a.5.5 0 0 0 .122.696l3.224 2.284h1.314l2.636-3.736L8.636 9.53zm.288 8.451L5.14 15.396a2 2 0 0 1-.491-2.786l6.673-9.53a2 2 0 0 1 2.785-.49l3.742 2.62a2 2 0 0 1 .491 2.785l-7.269 10.053-2.147-.066z"/><path d="M4 18h5.523v-1H4zm-2 0h1v-1H2z"/></svg>',
                    lc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M5.085 6.22L2.943 4.078a.75.75 0 1 1 1.06-1.06l2.592 2.59A11.094 11.094 0 0 1 10 5.068c4.738 0 8.578 3.101 8.578 5.083 0 1.197-1.401 2.803-3.555 3.887l1.714 1.713a.75.75 0 0 1-.09 1.138.488.488 0 0 1-.15.084.75.75 0 0 1-.821-.16L6.17 7.304c-.258.11-.51.233-.757.365l6.239 6.24-.006.005.78.78c-.388.094-.78.166-1.174.215l-1.11-1.11h.011L4.55 8.197a7.2 7.2 0 0 0-.665.514l-.112.098 4.897 4.897-.005.006 1.276 1.276a10.164 10.164 0 0 1-1.477-.117l-.479-.479-.009.009-4.863-4.863-.022.031a2.563 2.563 0 0 0-.124.2c-.043.077-.08.158-.108.241a.534.534 0 0 0-.028.133.29.29 0 0 0 .008.072.927.927 0 0 0 .082.226c.067.133.145.26.234.379l3.242 3.365.025.01.59.623c-3.265-.918-5.59-3.155-5.59-4.668 0-1.194 1.448-2.838 3.663-3.93zm7.07.531a4.632 4.632 0 0 1 1.108 5.992l.345.344.046-.018a9.313 9.313 0 0 0 2-1.112c.256-.187.5-.392.727-.613.137-.134.27-.277.392-.431.072-.091.141-.185.203-.286.057-.093.107-.19.148-.292a.72.72 0 0 0 .036-.12.29.29 0 0 0 .008-.072.492.492 0 0 0-.028-.133.999.999 0 0 0-.036-.096 2.165 2.165 0 0 0-.071-.145 2.917 2.917 0 0 0-.125-.2 3.592 3.592 0 0 0-.263-.335 5.444 5.444 0 0 0-.53-.523 7.955 7.955 0 0 0-1.054-.768 9.766 9.766 0 0 0-1.879-.891c-.337-.118-.68-.219-1.027-.301zm-2.85.21l-.069.002a.508.508 0 0 0-.254.097.496.496 0 0 0-.104.679.498.498 0 0 0 .326.199l.045.005c.091.003.181.003.272.012a2.45 2.45 0 0 1 2.017 1.513c.024.061.043.125.069.185a.494.494 0 0 0 .45.287h.008a.496.496 0 0 0 .35-.158.482.482 0 0 0 .13-.335.638.638 0 0 0-.048-.219 3.379 3.379 0 0 0-.36-.723 3.438 3.438 0 0 0-2.791-1.543l-.028-.001h-.013z"/></svg>',
                    cc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.91 10.54c.26-.23.64-.21.88.03l3.36 3.14 2.23-2.06a.64.64 0 0 1 .87 0l2.52 2.97V4.5H3.2v10.12l3.71-4.08zm10.27-7.51c.6 0 1.09.47 1.09 1.05v11.84c0 .59-.49 1.06-1.09 1.06H2.79c-.6 0-1.09-.47-1.09-1.06V4.08c0-.58.49-1.05 1.1-1.05h14.38zm-5.22 5.56a1.96 1.96 0 1 1 3.4-1.96 1.96 1.96 0 0 1-3.4 1.96z"/></svg>',
                    dc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.239 13.938l-2.88-1.663a.75.75 0 0 1 .75-1.3L9 12.067V4.75a.75.75 0 1 1 1.5 0v7.318l1.89-1.093a.75.75 0 0 1 .75 1.3l-2.879 1.663a.752.752 0 0 1-.511.187.752.752 0 0 1-.511-.187zM4.25 17a.75.75 0 1 1 0-1.5h10.5a.75.75 0 0 1 0 1.5H4.25z"/></svg>',
                    hc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.75 11.875a.752.752 0 0 1 .508.184l2.883 1.666a.75.75 0 0 1-.659 1.344l-.091-.044-1.892-1.093.001 4.318a.75.75 0 1 1-1.5 0v-4.317l-1.89 1.092a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .51-.187zM15.25 9a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM9.75.375a.75.75 0 0 1 .75.75v4.318l1.89-1.093.092-.045a.75.75 0 0 1 .659 1.344l-2.883 1.667a.752.752 0 0 1-.508.184.752.752 0 0 1-.511-.187L6.359 5.65a.75.75 0 0 1 .75-1.299L9 5.442V1.125a.75.75 0 0 1 .75-.75z"/></svg>',
                    uc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.261 7.062l2.88 1.663a.75.75 0 0 1-.75 1.3L10.5 8.933v7.317a.75.75 0 1 1-1.5 0V8.932l-1.89 1.093a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .511-.187.752.752 0 0 1 .511.187zM15.25 4a.75.75 0 1 1 0 1.5H4.75a.75.75 0 0 1 0-1.5h10.5z"/></svg>',
                    fc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z"/></svg>',
                    mc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm2.286 4c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75z"/></svg>',
                    gc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M18 3.75a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 8a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 4a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75zm0-8a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75z"/></svg>',
                    pc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z"/></svg>',
                    bc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" clip-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="1.414"><path d="M18 4.5V3H2v1.5h16zm0 3V6h-5.674v1.5H18zm0 3V9h-5.674v1.5H18zm0 3V12h-5.674v1.5H18zm-8.5-6V12h-6V7.5h6zm.818-1.5H2.682C2.305 6 2 6.407 2 6.91v5.68c0 .503.305.91.682.91h7.636c.377 0 .682-.407.682-.91V6.91c0-.503-.305-.91-.682-.91zM18 16.5V15H2v1.5h16z"/></svg>',
                    wc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 4.5V3h16v1.5zm4.5 3V12h7V7.5h-7zM5.758 6h8.484c.419 0 .758.407.758.91v5.681c0 .502-.34.909-.758.909H5.758c-.419 0-.758-.407-.758-.91V6.91c0-.503.34-.91.758-.91zM2 16.5V15h16v1.5z"/></svg>',
                    kc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 4.5V3h16v1.5zm0 3V6h5.674v1.5zm0 3V9h5.674v1.5zm0 3V12h5.674v1.5zm8.5-6V12h6V7.5h-6zM9.682 6h7.636c.377 0 .682.407.682.91v5.68c0 .503-.305.91-.682.91H9.682c-.377 0-.682-.407-.682-.91V6.91c0-.503.305-.91.682-.91zM2 16.5V15h16v1.5z"/></svg>',
                    _c =
                        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z"/><path d="M18.095 2H1.905C.853 2 0 2.895 0 4v12c0 1.105.853 2 1.905 2h16.19C19.147 18 20 17.105 20 16V4c0-1.105-.853-2-1.905-2zm0 1.5c.263 0 .476.224.476.5v12c0 .276-.213.5-.476.5H1.905a.489.489 0 0 1-.476-.5V4c0-.276.213-.5.476-.5h16.19z"/></svg>',
                    vc =
                        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z"/><path d="M13 6H2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2zm0 1.5a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5V8a.5.5 0 0 1 .5-.5h11z"/></svg>',
                    yc =
                        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z"/><path d="M7 10H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h5a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2zm0 1.5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5h5z"/></svg>',
                    xc =
                        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z"/><path d="M10 8H2a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2zm0 1.5a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-6a.5.5 0 0 1 .5-.5h8z"/></svg>',
                    Cc =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7.3 17.37l-.061.088a1.518 1.518 0 0 1-.934.535l-4.178.663-.806-4.153a1.495 1.495 0 0 1 .187-1.058l.056-.086L8.77 2.639c.958-1.351 2.803-1.076 4.296-.03 1.497 1.047 2.387 2.693 1.433 4.055L7.3 17.37zM9.14 4.728l-5.545 8.346 3.277 2.294 5.544-8.346L9.14 4.728zM6.07 16.512l-3.276-2.295.53 2.73 2.746-.435zM9.994 3.506L13.271 5.8c.316-.452-.16-1.333-1.065-1.966-.905-.634-1.895-.78-2.212-.328zM8 18.5L9.375 17H19v1.5H8z"/></svg>',
                    Ac =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="9.5" cy="4.5" r="1.5"/><circle cx="9.5" cy="10.5" r="1.5"/><circle cx="9.5" cy="16.5" r="1.5"/></svg>';
                class Tc {
                    constructor() {
                        this._replacedElements = [];
                    }
                    replace(t, e) {
                        this._replacedElements.push({ element: t, newElement: e }),
                            (t.style.display = 'none'),
                            e && t.parentNode.insertBefore(e, t.nextSibling);
                    }
                    restore() {
                        this._replacedElements.forEach(({ element: t, newElement: e }) => {
                            (t.style.display = ''), e && e.remove();
                        }),
                            (this._replacedElements = []);
                    }
                }
                var Pc = function (t) {
                    return 'string' == typeof t || (!_t(t) && mt(t) && '[object String]' == E(t));
                };
                class Sc {
                    constructor(t, e) {
                        Sc._observerInstance || Sc._createObserver(),
                            (this._element = t),
                            (this._callback = e),
                            Sc._addElementCallback(t, e),
                            Sc._observerInstance.observe(t);
                    }
                    destroy() {
                        Sc._deleteElementCallback(this._element, this._callback);
                    }
                    static _addElementCallback(t, e) {
                        Sc._elementCallbacks || (Sc._elementCallbacks = new Map());
                        let o = Sc._elementCallbacks.get(t);
                        o || ((o = new Set()), Sc._elementCallbacks.set(t, o)), o.add(e);
                    }
                    static _deleteElementCallback(t, e) {
                        const o = Sc._getElementCallbacks(t);
                        o &&
                            (o.delete(e),
                            o.size || (Sc._elementCallbacks.delete(t), Sc._observerInstance.unobserve(t))),
                            Sc._elementCallbacks &&
                                !Sc._elementCallbacks.size &&
                                ((Sc._observerInstance = null), (Sc._elementCallbacks = null));
                    }
                    static _getElementCallbacks(t) {
                        return Sc._elementCallbacks ? Sc._elementCallbacks.get(t) : null;
                    }
                    static _createObserver() {
                        let t;
                        (t = 'function' == typeof dr.window.ResizeObserver ? dr.window.ResizeObserver : Ec),
                            (Sc._observerInstance = new t((t) => {
                                for (const e of t) {
                                    const t = Sc._getElementCallbacks(e.target);
                                    if (t) for (const o of t) o(e);
                                }
                            }));
                    }
                }
                (Sc._observerInstance = null), (Sc._elementCallbacks = null);
                class Ec {
                    constructor(t) {
                        (this._callback = t),
                            (this._elements = new Set()),
                            (this._previousRects = new Map()),
                            (this._periodicCheckTimeout = null);
                    }
                    observe(t) {
                        this._elements.add(t),
                            this._checkElementRectsAndExecuteCallback(),
                            1 === this._elements.size && this._startPeriodicCheck();
                    }
                    unobserve(t) {
                        this._elements.delete(t),
                            this._previousRects.delete(t),
                            this._elements.size || this._stopPeriodicCheck();
                    }
                    _startPeriodicCheck() {
                        const t = () => {
                            this._checkElementRectsAndExecuteCallback(),
                                (this._periodicCheckTimeout = setTimeout(t, 100));
                        };
                        this.listenTo(dr.window, 'resize', () => {
                            this._checkElementRectsAndExecuteCallback();
                        }),
                            (this._periodicCheckTimeout = setTimeout(t, 100));
                    }
                    _stopPeriodicCheck() {
                        clearTimeout(this._periodicCheckTimeout), this.stopListening(), this._previousRects.clear();
                    }
                    _checkElementRectsAndExecuteCallback() {
                        const t = [];
                        for (const e of this._elements)
                            this._hasRectChanged(e) && t.push({ target: e, contentRect: this._previousRects.get(e) });
                        t.length && this._callback(t);
                    }
                    _hasRectChanged(t) {
                        if (!t.ownerDocument.body.contains(t)) return !1;
                        const e = new us(t),
                            o = this._previousRects.get(t),
                            i = !o || !o.isEqual(e);
                        return this._previousRects.set(t, e), i;
                    }
                }
                function Rc(t) {
                    return (e) => e + t;
                }
                function Ic(t) {
                    const e = t.next();
                    return e.done ? null : e.value;
                }
                function Vc({ emitter: t, activator: e, callback: o, contextElements: i }) {
                    t.listenTo(document, 'mousedown', (t, n) => {
                        if (!e()) return;
                        const r = 'function' == typeof n.composedPath ? n.composedPath() : [];
                        for (const t of i) if (t.contains(n.target) || r.includes(t)) return;
                        o();
                    });
                }
                function Oc(t) {
                    t.set('_isCssTransitionsDisabled', !1),
                        (t.disableCssTransitions = () => {
                            t._isCssTransitionsDisabled = !0;
                        }),
                        (t.enableCssTransitions = () => {
                            t._isCssTransitionsDisabled = !1;
                        }),
                        t.extendTemplate({
                            attributes: {
                                class: [t.bindTemplate.if('_isCssTransitionsDisabled', 'ck-transitions-disabled')],
                            },
                        });
                }
                function zc({ view: t }) {
                    t.listenTo(
                        t.element,
                        'submit',
                        (e, o) => {
                            o.preventDefault(), t.fire('submit');
                        },
                        { useCapture: !0 },
                    );
                }
                Kt(Ec, kr);
                class Mc extends Yo {
                    constructor(t = []) {
                        super(t, { idProperty: 'viewUid' }),
                            this.on('add', (t, e, o) => {
                                this._renderViewIntoCollectionParent(e, o);
                            }),
                            this.on('remove', (t, e) => {
                                e.element && this._parentElement && e.element.remove();
                            }),
                            (this._parentElement = null);
                    }
                    destroy() {
                        this.map((t) => t.destroy());
                    }
                    setParent(t) {
                        this._parentElement = t;
                        for (const t of this) this._renderViewIntoCollectionParent(t);
                    }
                    delegate(...t) {
                        if (!t.length || !t.every((t) => 'string' == typeof t))
                            throw new l.a('ui-viewcollection-delegate-wrong-events', this);
                        return {
                            to: (e) => {
                                for (const o of this) for (const i of t) o.delegate(i).to(e);
                                this.on('add', (o, i) => {
                                    for (const o of t) i.delegate(o).to(e);
                                }),
                                    this.on('remove', (o, i) => {
                                        for (const o of t) i.stopDelegating(o, e);
                                    });
                            },
                        };
                    }
                    _renderViewIntoCollectionParent(t, e) {
                        t.isRendered || t.render(),
                            t.element &&
                                this._parentElement &&
                                this._parentElement.insertBefore(t.element, this._parentElement.children[e]);
                    }
                }
                o(16);
                class Nc {
                    constructor(t) {
                        (this.element = null),
                            (this.isRendered = !1),
                            (this.locale = t),
                            (this.t = t && t.t),
                            (this._viewCollections = new Yo()),
                            (this._unboundChildren = this.createCollection()),
                            this._viewCollections.on('add', (e, o) => {
                                o.locale = t;
                            }),
                            this.decorate('render');
                    }
                    get bindTemplate() {
                        return this._bindTemplate ? this._bindTemplate : (this._bindTemplate = Bc.bind(this, this));
                    }
                    createCollection(t) {
                        const e = new Mc(t);
                        return this._viewCollections.add(e), e;
                    }
                    registerChild(t) {
                        Jo(t) || (t = [t]);
                        for (const e of t) this._unboundChildren.add(e);
                    }
                    deregisterChild(t) {
                        Jo(t) || (t = [t]);
                        for (const e of t) this._unboundChildren.remove(e);
                    }
                    setTemplate(t) {
                        this.template = new Bc(t);
                    }
                    extendTemplate(t) {
                        Bc.extend(this.template, t);
                    }
                    render() {
                        if (this.isRendered) throw new l.a('ui-view-render-already-rendered', this);
                        this.template &&
                            ((this.element = this.template.render()), this.registerChild(this.template.getViews())),
                            (this.isRendered = !0);
                    }
                    destroy() {
                        this.stopListening(),
                            this._viewCollections.map((t) => t.destroy()),
                            this.template && this.template._revertData && this.template.revert(this.element);
                    }
                }
                Kt(Nc, kr), Kt(Nc, Ht);
                class Bc {
                    constructor(t) {
                        Object.assign(this, Kc($c(t))), (this._isRendered = !1), (this._revertData = null);
                    }
                    render() {
                        const t = this._renderNode({ intoFragment: !0 });
                        return (this._isRendered = !0), t;
                    }
                    apply(t) {
                        return (
                            (this._revertData = { children: [], bindings: [], attributes: {} }),
                            this._renderNode({ node: t, isApplying: !0, revertData: this._revertData }),
                            t
                        );
                    }
                    revert(t) {
                        if (!this._revertData) throw new l.a('ui-template-revert-not-applied', [this, t]);
                        this._revertTemplateFromNode(t, this._revertData);
                    }
                    *getViews() {
                        yield* (function* t(e) {
                            if (e.children) for (const o of e.children) Zc(o) ? yield o : Qc(o) && (yield* t(o));
                        })(this);
                    }
                    static bind(t, e) {
                        return {
                            to: (o, i) =>
                                new Dc({
                                    eventNameOrFunction: o,
                                    attribute: o,
                                    observable: t,
                                    emitter: e,
                                    callback: i,
                                }),
                            if: (o, i, n) =>
                                new Lc({ observable: t, emitter: e, attribute: o, valueIfTrue: i, callback: n }),
                        };
                    }
                    static extend(t, e) {
                        if (t._isRendered) throw new l.a('template-extend-render', [this, t]);
                        !(function t(e, o) {
                            o.attributes && (e.attributes || (e.attributes = {}), Yc(e.attributes, o.attributes));
                            o.eventListeners &&
                                (e.eventListeners || (e.eventListeners = {}), Yc(e.eventListeners, o.eventListeners));
                            o.text && e.text.push(...o.text);
                            if (o.children && o.children.length) {
                                if (e.children.length != o.children.length)
                                    throw new l.a('ui-template-extend-children-mismatch', e);
                                let i = 0;
                                for (const n of o.children) t(e.children[i++], n);
                            }
                        })(t, Kc($c(e)));
                    }
                    _renderNode(t) {
                        let e;
                        if (((e = t.node ? this.tag && this.text : this.tag ? this.text : !this.text), e))
                            throw new l.a('ui-template-wrong-syntax', this);
                        return this.text ? this._renderText(t) : this._renderElement(t);
                    }
                    _renderElement(t) {
                        let e = t.node;
                        return (
                            e ||
                                (e = t.node =
                                    document.createElementNS(this.ns || 'http://www.w3.org/1999/xhtml', this.tag)),
                            this._renderAttributes(t),
                            this._renderElementChildren(t),
                            this._setUpListeners(t),
                            e
                        );
                    }
                    _renderText(t) {
                        let e = t.node;
                        return (
                            e ? (t.revertData.text = e.textContent) : (e = t.node = document.createTextNode('')),
                            Hc(this.text)
                                ? this._bindToObservable({ schema: this.text, updater: Wc(e), data: t })
                                : (e.textContent = this.text.join('')),
                            e
                        );
                    }
                    _renderAttributes(t) {
                        let e, o, i, n;
                        if (!this.attributes) return;
                        const r = t.node,
                            s = t.revertData;
                        for (e in this.attributes)
                            if (
                                ((i = r.getAttribute(e)),
                                (o = this.attributes[e]),
                                s && (s.attributes[e] = i),
                                (n = w(o[0]) && o[0].ns ? o[0].ns : null),
                                Hc(o))
                            ) {
                                const a = n ? o[0].value : o;
                                s && ed(e) && a.unshift(i),
                                    this._bindToObservable({ schema: a, updater: qc(r, e, n), data: t });
                            } else
                                'style' == e && 'string' != typeof o[0]
                                    ? this._renderStyleAttribute(o[0], t)
                                    : (s && i && ed(e) && o.unshift(i),
                                      (o = o
                                          .map((t) => (t && t.value) || t)
                                          .reduce((t, e) => t.concat(e), [])
                                          .reduce(Jc, '')),
                                      Xc(o) || r.setAttributeNS(n, e, o));
                    }
                    _renderStyleAttribute(t, e) {
                        const o = e.node;
                        for (const i in t) {
                            const n = t[i];
                            Hc(n)
                                ? this._bindToObservable({ schema: [n], updater: Uc(o, i), data: e })
                                : (o.style[i] = n);
                        }
                    }
                    _renderElementChildren(t) {
                        const e = t.node,
                            o = t.intoFragment ? document.createDocumentFragment() : e,
                            i = t.isApplying;
                        let n = 0;
                        for (const r of this.children)
                            if (td(r)) {
                                if (!i) {
                                    r.setParent(e);
                                    for (const t of r) o.appendChild(t.element);
                                }
                            } else if (Zc(r)) i || (r.isRendered || r.render(), o.appendChild(r.element));
                            else if (rr(r)) o.appendChild(r);
                            else if (i) {
                                const e = { children: [], bindings: [], attributes: {} };
                                t.revertData.children.push(e),
                                    r._renderNode({ node: o.childNodes[n++], isApplying: !0, revertData: e });
                            } else o.appendChild(r.render());
                        t.intoFragment && e.appendChild(o);
                    }
                    _setUpListeners(t) {
                        if (this.eventListeners)
                            for (const e in this.eventListeners) {
                                const o = this.eventListeners[e].map((o) => {
                                    const [i, n] = e.split('@');
                                    return o.activateDomEventListener(i, n, t);
                                });
                                t.revertData && t.revertData.bindings.push(o);
                            }
                    }
                    _bindToObservable({ schema: t, updater: e, data: o }) {
                        const i = o.revertData;
                        jc(t, e, o);
                        const n = t
                            .filter((t) => !Xc(t))
                            .filter((t) => t.observable)
                            .map((i) => i.activateAttributeListener(t, e, o));
                        i && i.bindings.push(n);
                    }
                    _revertTemplateFromNode(t, e) {
                        for (const t of e.bindings) for (const e of t) e();
                        if (e.text) t.textContent = e.text;
                        else {
                            for (const o in e.attributes) {
                                const i = e.attributes[o];
                                null === i ? t.removeAttribute(o) : t.setAttribute(o, i);
                            }
                            for (let o = 0; o < e.children.length; ++o)
                                this._revertTemplateFromNode(t.childNodes[o], e.children[o]);
                        }
                    }
                }
                Kt(Bc, h);
                class Fc {
                    constructor(t) {
                        Object.assign(this, t);
                    }
                    getValue(t) {
                        const e = this.observable[this.attribute];
                        return this.callback ? this.callback(e, t) : e;
                    }
                    activateAttributeListener(t, e, o) {
                        const i = () => jc(t, e, o);
                        return (
                            this.emitter.listenTo(this.observable, 'change:' + this.attribute, i),
                            () => {
                                this.emitter.stopListening(this.observable, 'change:' + this.attribute, i);
                            }
                        );
                    }
                }
                class Dc extends Fc {
                    activateDomEventListener(t, e, o) {
                        const i = (t, o) => {
                            (e && !o.target.matches(e)) ||
                                ('function' == typeof this.eventNameOrFunction
                                    ? this.eventNameOrFunction(o)
                                    : this.observable.fire(this.eventNameOrFunction, o));
                        };
                        return (
                            this.emitter.listenTo(o.node, t, i),
                            () => {
                                this.emitter.stopListening(o.node, t, i);
                            }
                        );
                    }
                }
                class Lc extends Fc {
                    getValue(t) {
                        return !Xc(super.getValue(t)) && (this.valueIfTrue || !0);
                    }
                }
                function Hc(t) {
                    return !!t && (t.value && (t = t.value), Array.isArray(t) ? t.some(Hc) : t instanceof Fc);
                }
                function jc(t, e, { node: o }) {
                    let i = (function (t, e) {
                        return t.map((t) => (t instanceof Fc ? t.getValue(e) : t));
                    })(t, o);
                    (i = 1 == t.length && t[0] instanceof Lc ? i[0] : i.reduce(Jc, '')), Xc(i) ? e.remove() : e.set(i);
                }
                function Wc(t) {
                    return {
                        set(e) {
                            t.textContent = e;
                        },
                        remove() {
                            t.textContent = '';
                        },
                    };
                }
                function qc(t, e, o) {
                    return {
                        set(i) {
                            t.setAttributeNS(o, e, i);
                        },
                        remove() {
                            t.removeAttributeNS(o, e);
                        },
                    };
                }
                function Uc(t, e) {
                    return {
                        set(o) {
                            t.style[e] = o;
                        },
                        remove() {
                            t.style[e] = null;
                        },
                    };
                }
                function $c(t) {
                    return qo(t, (t) => {
                        if (t && (t instanceof Fc || Qc(t) || Zc(t) || td(t))) return t;
                    });
                }
                function Kc(t) {
                    if (
                        ('string' == typeof t
                            ? (t = (function (t) {
                                  return { text: [t] };
                              })(t))
                            : t.text &&
                              (function (t) {
                                  t.text = Zo(t.text);
                              })(t),
                        t.on &&
                            ((t.eventListeners = (function (t) {
                                for (const e in t) Gc(t, e);
                                return t;
                            })(t.on)),
                            delete t.on),
                        !t.text)
                    ) {
                        t.attributes &&
                            (function (t) {
                                for (const e in t) t[e].value && (t[e].value = Zo(t[e].value)), Gc(t, e);
                            })(t.attributes);
                        const e = [];
                        if (t.children)
                            if (td(t.children)) e.push(t.children);
                            else for (const o of t.children) Qc(o) || Zc(o) || rr(o) ? e.push(o) : e.push(new Bc(o));
                        t.children = e;
                    }
                    return t;
                }
                function Gc(t, e) {
                    t[e] = Zo(t[e]);
                }
                function Jc(t, e) {
                    return Xc(e) ? t : Xc(t) ? e : `${t} ${e}`;
                }
                function Yc(t, e) {
                    for (const o in e) t[o] ? t[o].push(...e[o]) : (t[o] = e[o]);
                }
                function Xc(t) {
                    return !t && 0 !== t;
                }
                function Zc(t) {
                    return t instanceof Nc;
                }
                function Qc(t) {
                    return t instanceof Bc;
                }
                function td(t) {
                    return t instanceof Mc;
                }
                function ed(t) {
                    return 'class' == t || 'style' == t;
                }
                class od extends Mc {
                    constructor(t, e = []) {
                        super(e), (this.locale = t);
                    }
                    attachToDom() {
                        this._bodyCollectionContainer = new Bc({
                            tag: 'div',
                            attributes: {
                                class: ['ck', 'ck-reset_all', 'ck-body', 'ck-rounded-corners'],
                                dir: this.locale.uiLanguageDirection,
                            },
                            children: this,
                        }).render();
                        let t = document.querySelector('.ck-body-wrapper');
                        t ||
                            ((t = (function (t, e, o = {}, i = []) {
                                const n = o && o.xmlns,
                                    r = n ? t.createElementNS(n, e) : t.createElement(e);
                                for (const t in o) r.setAttribute(t, o[t]);
                                (!Pc(i) && Jo(i)) || (i = [i]);
                                for (let e of i) Pc(e) && (e = t.createTextNode(e)), r.appendChild(e);
                                return r;
                            })(document, 'div', { class: 'ck-body-wrapper' })),
                            document.body.appendChild(t)),
                            t.appendChild(this._bodyCollectionContainer);
                    }
                    detachFromDom() {
                        super.destroy(), this._bodyCollectionContainer && this._bodyCollectionContainer.remove();
                        const t = document.querySelector('.ck-body-wrapper');
                        t && 0 == t.childElementCount && t.remove();
                    }
                }
                o(18);
                class id extends Nc {
                    constructor() {
                        super();
                        const t = this.bindTemplate;
                        this.set('content', ''),
                            this.set('viewBox', '0 0 20 20'),
                            this.set('fillColor', ''),
                            this.setTemplate({
                                tag: 'svg',
                                ns: 'http://www.w3.org/2000/svg',
                                attributes: { class: ['ck', 'ck-icon'], viewBox: t.to('viewBox') },
                            });
                    }
                    render() {
                        super.render(),
                            this._updateXMLContent(),
                            this._colorFillPaths(),
                            this.on('change:content', () => {
                                this._updateXMLContent(), this._colorFillPaths();
                            }),
                            this.on('change:fillColor', () => {
                                this._colorFillPaths();
                            });
                    }
                    _updateXMLContent() {
                        if (this.content) {
                            const t = new DOMParser()
                                    .parseFromString(this.content.trim(), 'image/svg+xml')
                                    .querySelector('svg'),
                                e = t.getAttribute('viewBox');
                            for (e && (this.viewBox = e), this.element.innerHTML = ''; t.childNodes.length > 0; )
                                this.element.appendChild(t.childNodes[0]);
                        }
                    }
                    _colorFillPaths() {
                        this.fillColor &&
                            this.element.querySelectorAll('.ck-icon__fill').forEach((t) => {
                                t.style.fill = this.fillColor;
                            });
                    }
                }
                o(20);
                class nd extends Nc {
                    constructor(t) {
                        super(t), this.set('text', ''), this.set('position', 's');
                        const e = this.bindTemplate;
                        this.setTemplate({
                            tag: 'span',
                            attributes: {
                                class: [
                                    'ck',
                                    'ck-tooltip',
                                    e.to('position', (t) => 'ck-tooltip_' + t),
                                    e.if('text', 'ck-hidden', (t) => !t.trim()),
                                ],
                            },
                            children: [
                                {
                                    tag: 'span',
                                    attributes: { class: ['ck', 'ck-tooltip__text'] },
                                    children: [{ text: e.to('text') }],
                                },
                            ],
                        });
                    }
                }
                o(22);
                class rd extends Nc {
                    constructor(t) {
                        super(t);
                        const e = this.bindTemplate,
                            o = s();
                        this.set('class'),
                            this.set('labelStyle'),
                            this.set('icon'),
                            this.set('isEnabled', !0),
                            this.set('isOn', !1),
                            this.set('isVisible', !0),
                            this.set('isToggleable', !1),
                            this.set('keystroke'),
                            this.set('label'),
                            this.set('tabindex', -1),
                            this.set('tooltip'),
                            this.set('tooltipPosition', 's'),
                            this.set('type', 'button'),
                            this.set('withText', !1),
                            this.set('withKeystroke', !1),
                            (this.children = this.createCollection()),
                            (this.tooltipView = this._createTooltipView()),
                            (this.labelView = this._createLabelView(o)),
                            (this.iconView = new id()),
                            this.iconView.extendTemplate({ attributes: { class: 'ck-button__icon' } }),
                            (this.keystrokeView = this._createKeystrokeView()),
                            this.bind('_tooltipString').to(
                                this,
                                'tooltip',
                                this,
                                'label',
                                this,
                                'keystroke',
                                this._getTooltipString.bind(this),
                            ),
                            this.setTemplate({
                                tag: 'button',
                                attributes: {
                                    class: [
                                        'ck',
                                        'ck-button',
                                        e.to('class'),
                                        e.if('isEnabled', 'ck-disabled', (t) => !t),
                                        e.if('isVisible', 'ck-hidden', (t) => !t),
                                        e.to('isOn', (t) => (t ? 'ck-on' : 'ck-off')),
                                        e.if('withText', 'ck-button_with-text'),
                                        e.if('withKeystroke', 'ck-button_with-keystroke'),
                                    ],
                                    type: e.to('type', (t) => t || 'button'),
                                    tabindex: e.to('tabindex'),
                                    'aria-labelledby': 'ck-editor__aria-label_' + o,
                                    'aria-disabled': e.if('isEnabled', !0, (t) => !t),
                                    'aria-pressed': e.to('isOn', (t) => !!this.isToggleable && String(t)),
                                },
                                children: this.children,
                                on: {
                                    mousedown: e.to((t) => {
                                        t.preventDefault();
                                    }),
                                    click: e.to((t) => {
                                        this.isEnabled ? this.fire('execute') : t.preventDefault();
                                    }),
                                },
                            });
                    }
                    render() {
                        super.render(),
                            this.icon &&
                                (this.iconView.bind('content').to(this, 'icon'), this.children.add(this.iconView)),
                            this.children.add(this.tooltipView),
                            this.children.add(this.labelView),
                            this.withKeystroke && this.children.add(this.keystrokeView);
                    }
                    focus() {
                        this.element.focus();
                    }
                    _createTooltipView() {
                        const t = new nd();
                        return (
                            t.bind('text').to(this, '_tooltipString'), t.bind('position').to(this, 'tooltipPosition'), t
                        );
                    }
                    _createLabelView(t) {
                        const e = new Nc(),
                            o = this.bindTemplate;
                        return (
                            e.setTemplate({
                                tag: 'span',
                                attributes: {
                                    class: ['ck', 'ck-button__label'],
                                    style: o.to('labelStyle'),
                                    id: 'ck-editor__aria-label_' + t,
                                },
                                children: [{ text: this.bindTemplate.to('label') }],
                            }),
                            e
                        );
                    }
                    _createKeystrokeView() {
                        const t = new Nc();
                        return (
                            t.setTemplate({
                                tag: 'span',
                                attributes: { class: ['ck', 'ck-button__keystroke'] },
                                children: [{ text: this.bindTemplate.to('keystroke', (t) => An(t)) }],
                            }),
                            t
                        );
                    }
                    _getTooltipString(t, e, o) {
                        return t
                            ? 'string' == typeof t
                                ? t
                                : (o && (o = An(o)), t instanceof Function ? t(e, o) : `${e}${o ? ` (${o})` : ''}`)
                            : '';
                    }
                }
                o(24);
                class sd extends rd {
                    constructor(t) {
                        super(t),
                            (this.isToggleable = !0),
                            (this.toggleSwitchView = this._createToggleView()),
                            this.extendTemplate({ attributes: { class: 'ck-switchbutton' } });
                    }
                    render() {
                        super.render(), this.children.add(this.toggleSwitchView);
                    }
                    _createToggleView() {
                        const t = new Nc();
                        return (
                            t.setTemplate({
                                tag: 'span',
                                attributes: { class: ['ck', 'ck-button__toggle'] },
                                children: [{ tag: 'span', attributes: { class: ['ck', 'ck-button__toggle__inner'] } }],
                            }),
                            t
                        );
                    }
                }
                function ad(t, e) {
                    const o = t.t,
                        i = {
                            Black: o('Black'),
                            'Dim grey': o('Dim grey'),
                            Grey: o('Grey'),
                            'Light grey': o('Light grey'),
                            White: o('White'),
                            Red: o('Red'),
                            Orange: o('Orange'),
                            Yellow: o('Yellow'),
                            'Light green': o('Light green'),
                            Green: o('Green'),
                            Aquamarine: o('Aquamarine'),
                            Turquoise: o('Turquoise'),
                            'Light blue': o('Light blue'),
                            Blue: o('Blue'),
                            Purple: o('Purple'),
                        };
                    return e.map((t) => {
                        const e = i[t.label];
                        return e && e != t.label && (t.label = e), t;
                    });
                }
                function ld(t) {
                    return t.map(cd).filter((t) => !!t);
                }
                function cd(t) {
                    return 'string' == typeof t
                        ? { model: t, label: t, hasBorder: !1, view: { name: 'span', styles: { color: t } } }
                        : {
                              model: t.color,
                              label: t.label || t.color,
                              hasBorder: void 0 !== t.hasBorder && t.hasBorder,
                              view: { name: 'span', styles: { color: '' + t.color } },
                          };
                }
                class dd extends rd {
                    constructor(t) {
                        super(t);
                        const e = this.bindTemplate;
                        this.set('color'),
                            this.set('hasBorder'),
                            (this.icon =
                                '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path class="ck-icon__fill" d="M16.935 5.328a2 2 0 0 1 0 2.829l-7.778 7.778a2 2 0 0 1-2.829 0L3.5 13.107a1.999 1.999 0 1 1 2.828-2.829l.707.707a1 1 0 0 0 1.414 0l5.658-5.657a2 2 0 0 1 2.828 0z"/><path d="M14.814 6.035L8.448 12.4a1 1 0 0 1-1.414 0l-1.413-1.415A1 1 0 1 0 4.207 12.4l2.829 2.829a1 1 0 0 0 1.414 0l7.778-7.778a1 1 0 1 0-1.414-1.415z"/></svg>'),
                            this.extendTemplate({
                                attributes: {
                                    style: { backgroundColor: e.to('color') },
                                    class: [
                                        'ck',
                                        'ck-color-grid__tile',
                                        e.if('hasBorder', 'ck-color-table__color-tile_bordered'),
                                    ],
                                },
                            });
                    }
                    render() {
                        super.render(), (this.iconView.fillColor = 'hsl(0, 0%, 100%)');
                    }
                }
                class hd {
                    constructor(t) {
                        if ((Object.assign(this, t), t.actions && t.keystrokeHandler))
                            for (const e in t.actions) {
                                let o = t.actions[e];
                                'string' == typeof o && (o = [o]);
                                for (const i of o)
                                    t.keystrokeHandler.set(i, (t, o) => {
                                        this[e](), o();
                                    });
                            }
                    }
                    get first() {
                        return this.focusables.find(ud) || null;
                    }
                    get last() {
                        return this.focusables.filter(ud).slice(-1)[0] || null;
                    }
                    get next() {
                        return this._getFocusableItem(1);
                    }
                    get previous() {
                        return this._getFocusableItem(-1);
                    }
                    get current() {
                        let t = null;
                        return null === this.focusTracker.focusedElement
                            ? null
                            : (this.focusables.find((e, o) => {
                                  const i = e.element === this.focusTracker.focusedElement;
                                  return i && (t = o), i;
                              }),
                              t);
                    }
                    focusFirst() {
                        this._focus(this.first);
                    }
                    focusLast() {
                        this._focus(this.last);
                    }
                    focusNext() {
                        this._focus(this.next);
                    }
                    focusPrevious() {
                        this._focus(this.previous);
                    }
                    _focus(t) {
                        t && t.focus();
                    }
                    _getFocusableItem(t) {
                        const e = this.current,
                            o = this.focusables.length;
                        if (!o) return null;
                        if (null === e) return this[1 === t ? 'first' : 'last'];
                        let i = (e + o + t) % o;
                        do {
                            const e = this.focusables.get(i);
                            if (ud(e)) return e;
                            i = (i + o + t) % o;
                        } while (i !== e);
                        return null;
                    }
                }
                function ud(t) {
                    return !(!t.focus || 'none' == dr.window.getComputedStyle(t.element).display);
                }
                o(26);
                class fd extends Nc {
                    constructor(t, e) {
                        super(t);
                        const o = (e && e.colorDefinitions) || [],
                            i = {};
                        e && e.columns && (i.gridTemplateColumns = `repeat( ${e.columns}, 1fr)`),
                            this.set('selectedColor'),
                            (this.items = this.createCollection()),
                            (this.focusTracker = new tc()),
                            (this.keystrokes = new Jl()),
                            (this._focusCycler = new hd({
                                focusables: this.items,
                                focusTracker: this.focusTracker,
                                keystrokeHandler: this.keystrokes,
                                actions: { focusPrevious: 'arrowleft', focusNext: 'arrowright' },
                            })),
                            this.items.on('add', (t, e) => {
                                e.isOn = e.color === this.selectedColor;
                            }),
                            o.forEach((t) => {
                                const e = new dd();
                                e.set({ color: t.color, label: t.label, tooltip: !0, hasBorder: t.options.hasBorder }),
                                    e.on('execute', () => {
                                        this.fire('execute', {
                                            value: t.color,
                                            hasBorder: t.options.hasBorder,
                                            label: t.label,
                                        });
                                    }),
                                    this.items.add(e);
                            }),
                            this.setTemplate({
                                tag: 'div',
                                children: this.items,
                                attributes: { class: ['ck', 'ck-color-grid'], style: i },
                            }),
                            this.on('change:selectedColor', (t, e, o) => {
                                for (const t of this.items) t.isOn = t.color === o;
                            });
                    }
                    focus() {
                        this.items.length && this.items.first.focus();
                    }
                    focusLast() {
                        this.items.length && this.items.last.focus();
                    }
                    render() {
                        super.render();
                        for (const t of this.items) this.focusTracker.add(t.element);
                        this.items.on('add', (t, e) => {
                            this.focusTracker.add(e.element);
                        }),
                            this.items.on('remove', (t, e) => {
                                this.focusTracker.remove(e.element);
                            }),
                            this.keystrokes.listenTo(this.element);
                    }
                }
                var md =
                    '<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"><path d="M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z"/></svg>';
                class gd extends rd {
                    constructor(t) {
                        super(t),
                            (this.arrowView = this._createArrowView()),
                            this.extendTemplate({ attributes: { 'aria-haspopup': !0 } }),
                            this.delegate('execute').to(this, 'open');
                    }
                    render() {
                        super.render(), this.children.add(this.arrowView);
                    }
                    _createArrowView() {
                        const t = new id();
                        return (t.content = md), t.extendTemplate({ attributes: { class: 'ck-dropdown__arrow' } }), t;
                    }
                }
                o(28);
                class pd extends Nc {
                    constructor(t) {
                        super(t);
                        const e = this.bindTemplate;
                        this.set('icon'),
                            this.set('isEnabled', !0),
                            this.set('isOn', !1),
                            this.set('isToggleable', !1),
                            this.set('isVisible', !0),
                            this.set('keystroke'),
                            this.set('label'),
                            this.set('tabindex', -1),
                            this.set('tooltip'),
                            this.set('tooltipPosition', 's'),
                            this.set('type', 'button'),
                            this.set('withText', !1),
                            (this.children = this.createCollection()),
                            (this.actionView = this._createActionView()),
                            (this.arrowView = this._createArrowView()),
                            (this.keystrokes = new Jl()),
                            (this.focusTracker = new tc()),
                            this.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: [
                                        'ck',
                                        'ck-splitbutton',
                                        e.if('isVisible', 'ck-hidden', (t) => !t),
                                        this.arrowView.bindTemplate.if('isOn', 'ck-splitbutton_open'),
                                    ],
                                },
                                children: this.children,
                            });
                    }
                    render() {
                        super.render(),
                            this.children.add(this.actionView),
                            this.children.add(this.arrowView),
                            this.focusTracker.add(this.actionView.element),
                            this.focusTracker.add(this.arrowView.element),
                            this.keystrokes.listenTo(this.element),
                            this.keystrokes.set('arrowright', (t, e) => {
                                this.focusTracker.focusedElement === this.actionView.element &&
                                    (this.arrowView.focus(), e());
                            }),
                            this.keystrokes.set('arrowleft', (t, e) => {
                                this.focusTracker.focusedElement === this.arrowView.element &&
                                    (this.actionView.focus(), e());
                            });
                    }
                    focus() {
                        this.actionView.focus();
                    }
                    _createActionView() {
                        const t = new rd();
                        return (
                            t
                                .bind(
                                    'icon',
                                    'isEnabled',
                                    'isOn',
                                    'isToggleable',
                                    'keystroke',
                                    'label',
                                    'tabindex',
                                    'tooltip',
                                    'tooltipPosition',
                                    'type',
                                    'withText',
                                )
                                .to(this),
                            t.extendTemplate({ attributes: { class: 'ck-splitbutton__action' } }),
                            t.delegate('execute').to(this),
                            t
                        );
                    }
                    _createArrowView() {
                        const t = new rd(),
                            e = t.bindTemplate;
                        return (
                            (t.icon = md),
                            t.extendTemplate({
                                attributes: {
                                    class: 'ck-splitbutton__arrow',
                                    'aria-haspopup': !0,
                                    'aria-expanded': e.to('isOn', (t) => String(t)),
                                },
                            }),
                            t.bind('isEnabled').to(this),
                            t.delegate('execute').to(this, 'open'),
                            t
                        );
                    }
                }
                class bd extends Nc {
                    constructor(t) {
                        super(t);
                        const e = this.bindTemplate;
                        this.set('isVisible', !1),
                            this.set('position', 'se'),
                            (this.children = this.createCollection()),
                            this.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: [
                                        'ck',
                                        'ck-reset',
                                        'ck-dropdown__panel',
                                        e.to('position', (t) => 'ck-dropdown__panel_' + t),
                                        e.if('isVisible', 'ck-dropdown__panel-visible'),
                                    ],
                                },
                                children: this.children,
                                on: { selectstart: e.to((t) => t.preventDefault()) },
                            });
                    }
                    focus() {
                        this.children.length && this.children.first.focus();
                    }
                    focusLast() {
                        if (this.children.length) {
                            const t = this.children.last;
                            'function' == typeof t.focusLast ? t.focusLast() : t.focus();
                        }
                    }
                }
                o(30);
                function wd({ element: t, target: e, positions: o, limiter: i, fitInViewport: n }) {
                    I(e) && (e = e()), I(i) && (i = i());
                    const r = (function (t) {
                            return t && t.parentNode
                                ? t.offsetParent === dr.document.body
                                    ? null
                                    : t.offsetParent
                                : null;
                        })(t),
                        s = new us(t),
                        a = new us(e);
                    let l, c;
                    if (i || n) {
                        const t = (function (t, e) {
                            const { elementRect: o, viewportRect: i } = e,
                                n = o.getArea(),
                                r = (function (t, { targetRect: e, elementRect: o, limiterRect: i, viewportRect: n }) {
                                    const r = [],
                                        s = o.getArea();
                                    for (const a of t) {
                                        const t = kd(a, e, o);
                                        if (!t) continue;
                                        const [l, c] = t;
                                        let d = 0,
                                            h = 0;
                                        if (i)
                                            if (n) {
                                                const t = i.getIntersection(n);
                                                t && (d = t.getIntersectionArea(c));
                                            } else d = i.getIntersectionArea(c);
                                        n && (h = n.getIntersectionArea(c));
                                        const u = {
                                            positionName: l,
                                            positionRect: c,
                                            limiterIntersectArea: d,
                                            viewportIntersectArea: h,
                                        };
                                        if (d === s) return [u];
                                        r.push(u);
                                    }
                                    return r;
                                })(t, e);
                            if (i) {
                                const t = _d(
                                    r.filter(({ viewportIntersectArea: t }) => t === n),
                                    n,
                                );
                                if (t) return t;
                            }
                            return _d(r, n);
                        })(o, {
                            targetRect: a,
                            elementRect: s,
                            limiterRect: i && new us(i).getVisible(),
                            viewportRect: n && new us(dr.window),
                        });
                        [c, l] = t || kd(o[0], a, s);
                    } else [c, l] = kd(o[0], a, s);
                    let d = vd(l);
                    return (
                        r &&
                            (d = (function ({ left: t, top: e }, o) {
                                const i = vd(new us(o)),
                                    n = ds(o);
                                return (
                                    (t -= i.left),
                                    (e -= i.top),
                                    (t += o.scrollLeft),
                                    (e += o.scrollTop),
                                    (t -= n.left),
                                    (e -= n.top),
                                    { left: t, top: e }
                                );
                            })(d, r)),
                        { left: d.left, top: d.top, name: c }
                    );
                }
                function kd(t, e, o) {
                    const i = t(e, o);
                    if (!i) return null;
                    const { left: n, top: r, name: s } = i;
                    return [s, o.clone().moveTo(n, r)];
                }
                function _d(t, e) {
                    let o,
                        i,
                        n = 0;
                    for (const {
                        positionName: r,
                        positionRect: s,
                        limiterIntersectArea: a,
                        viewportIntersectArea: l,
                    } of t) {
                        if (a === e) return [r, s];
                        const t = l ** 2 + a ** 2;
                        t > n && ((n = t), (o = s), (i = r));
                    }
                    return o ? [i, o] : null;
                }
                function vd({ left: t, top: e }) {
                    const { scrollX: o, scrollY: i } = dr.window;
                    return { left: t + o, top: e + i };
                }
                class yd extends Nc {
                    constructor(t, e, o) {
                        super(t);
                        const i = this.bindTemplate;
                        (this.buttonView = e),
                            (this.panelView = o),
                            this.set('isOpen', !1),
                            this.set('isEnabled', !0),
                            this.set('class'),
                            this.set('id'),
                            this.set('panelPosition', 'auto'),
                            (this.keystrokes = new Jl()),
                            this.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: [
                                        'ck',
                                        'ck-dropdown',
                                        i.to('class'),
                                        i.if('isEnabled', 'ck-disabled', (t) => !t),
                                    ],
                                    id: i.to('id'),
                                    'aria-describedby': i.to('ariaDescribedById'),
                                },
                                children: [e, o],
                            }),
                            e.extendTemplate({ attributes: { class: ['ck-dropdown__button'] } });
                    }
                    render() {
                        super.render(),
                            this.listenTo(this.buttonView, 'open', () => {
                                this.isOpen = !this.isOpen;
                            }),
                            this.panelView.bind('isVisible').to(this, 'isOpen'),
                            this.on('change:isOpen', () => {
                                this.isOpen &&
                                    ('auto' === this.panelPosition
                                        ? (this.panelView.position = yd._getOptimalPosition({
                                              element: this.panelView.element,
                                              target: this.buttonView.element,
                                              fitInViewport: !0,
                                              positions: this._panelPositions,
                                          }).name)
                                        : (this.panelView.position = this.panelPosition));
                            }),
                            this.keystrokes.listenTo(this.element);
                        const t = (t, e) => {
                            this.isOpen && (this.buttonView.focus(), (this.isOpen = !1), e());
                        };
                        this.keystrokes.set('arrowdown', (t, e) => {
                            this.buttonView.isEnabled && !this.isOpen && ((this.isOpen = !0), e());
                        }),
                            this.keystrokes.set('arrowright', (t, e) => {
                                this.isOpen && e();
                            }),
                            this.keystrokes.set('arrowleft', t),
                            this.keystrokes.set('esc', t);
                    }
                    focus() {
                        this.buttonView.focus();
                    }
                    get _panelPositions() {
                        const {
                            south: t,
                            north: e,
                            southEast: o,
                            southWest: i,
                            northEast: n,
                            northWest: r,
                            southMiddleEast: s,
                            southMiddleWest: a,
                            northMiddleEast: l,
                            northMiddleWest: c,
                        } = yd.defaultPanelPositions;
                        return 'rtl' !== this.locale.uiLanguageDirection
                            ? [o, i, s, a, t, n, r, l, c, e]
                            : [i, o, a, s, t, r, n, c, l, e];
                    }
                }
                (yd.defaultPanelPositions = {
                    south: (t, e) => ({ top: t.bottom, left: t.left - (e.width - t.width) / 2, name: 's' }),
                    southEast: (t) => ({ top: t.bottom, left: t.left, name: 'se' }),
                    southWest: (t, e) => ({ top: t.bottom, left: t.left - e.width + t.width, name: 'sw' }),
                    southMiddleEast: (t, e) => ({ top: t.bottom, left: t.left - (e.width - t.width) / 4, name: 'sme' }),
                    southMiddleWest: (t, e) => ({
                        top: t.bottom,
                        left: t.left - (3 * (e.width - t.width)) / 4,
                        name: 'smw',
                    }),
                    north: (t, e) => ({ top: t.top - e.height, left: t.left - (e.width - t.width) / 2, name: 'n' }),
                    northEast: (t, e) => ({ top: t.top - e.height, left: t.left, name: 'ne' }),
                    northWest: (t, e) => ({ top: t.top - e.height, left: t.left - e.width + t.width, name: 'nw' }),
                    northMiddleEast: (t, e) => ({
                        top: t.top - e.height,
                        left: t.left - (e.width - t.width) / 4,
                        name: 'nme',
                    }),
                    northMiddleWest: (t, e) => ({
                        top: t.top - e.height,
                        left: t.left - (3 * (e.width - t.width)) / 4,
                        name: 'nmw',
                    }),
                }),
                    (yd._getOptimalPosition = wd);
                class xd extends Nc {
                    constructor(t) {
                        super(t),
                            this.setTemplate({ tag: 'span', attributes: { class: ['ck', 'ck-toolbar__separator'] } });
                    }
                }
                class Cd extends Nc {
                    constructor(t) {
                        super(t),
                            this.setTemplate({ tag: 'span', attributes: { class: ['ck', 'ck-toolbar__line-break'] } });
                    }
                }
                function Ad(t) {
                    return Array.isArray(t)
                        ? { items: t, removeItems: [] }
                        : t
                        ? Object.assign({ items: [], removeItems: [] }, t)
                        : { items: [], removeItems: [] };
                }
                o(32);
                class Td extends Nc {
                    constructor(t, e) {
                        super(t);
                        const o = this.bindTemplate,
                            i = this.t;
                        (this.options = e || {}),
                            this.set('ariaLabel', i('Editor toolbar')),
                            this.set('maxWidth', 'auto'),
                            (this.items = this.createCollection()),
                            (this.focusTracker = new tc()),
                            (this.keystrokes = new Jl()),
                            this.set('class'),
                            this.set('isCompact', !1),
                            (this.itemsView = new Pd(t)),
                            (this.children = this.createCollection()),
                            this.children.add(this.itemsView),
                            (this.focusables = this.createCollection()),
                            (this._focusCycler = new hd({
                                focusables: this.focusables,
                                focusTracker: this.focusTracker,
                                keystrokeHandler: this.keystrokes,
                                actions: {
                                    focusPrevious: ['arrowleft', 'arrowup'],
                                    focusNext: ['arrowright', 'arrowdown'],
                                },
                            }));
                        const n = ['ck', 'ck-toolbar', o.to('class'), o.if('isCompact', 'ck-toolbar_compact')];
                        var r;
                        this.options.shouldGroupWhenFull && this.options.isFloating && n.push('ck-toolbar_floating'),
                            this.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: n,
                                    role: 'toolbar',
                                    'aria-label': o.to('ariaLabel'),
                                    style: { maxWidth: o.to('maxWidth') },
                                },
                                children: this.children,
                                on: {
                                    mousedown:
                                        ((r = this),
                                        r.bindTemplate.to((t) => {
                                            t.target === r.element && t.preventDefault();
                                        })),
                                },
                            }),
                            (this._behavior = this.options.shouldGroupWhenFull ? new Ed(this) : new Sd(this));
                    }
                    render() {
                        super.render();
                        for (const t of this.items) this.focusTracker.add(t.element);
                        this.items.on('add', (t, e) => {
                            this.focusTracker.add(e.element);
                        }),
                            this.items.on('remove', (t, e) => {
                                this.focusTracker.remove(e.element);
                            }),
                            this.keystrokes.listenTo(this.element),
                            this._behavior.render(this);
                    }
                    destroy() {
                        return this._behavior.destroy(), super.destroy();
                    }
                    focus() {
                        this._focusCycler.focusFirst();
                    }
                    focusLast() {
                        this._focusCycler.focusLast();
                    }
                    fillFromConfig(t, e) {
                        const o = Ad(t),
                            i = o.items.filter(
                                (t, i, n) =>
                                    '|' === t ||
                                    (-1 === o.removeItems.indexOf(t) &&
                                        ('-' === t
                                            ? !this.options.shouldGroupWhenFull ||
                                              (Object(l.b)('toolbarview-line-break-ignored-when-grouping-items', n), !1)
                                            : !!e.has(t) ||
                                              (Object(l.b)('toolbarview-item-unavailable', { name: t }), !1))),
                            ),
                            n = this._cleanSeparators(i).map((t) =>
                                '|' === t ? new xd() : '-' === t ? new Cd() : e.create(t),
                            );
                        this.items.addMany(n);
                    }
                    _cleanSeparators(t) {
                        const e = (t) => '-' !== t && '|' !== t,
                            o = t.length,
                            i = t.findIndex(e),
                            n = o - t.slice().reverse().findIndex(e);
                        return t.slice(i, n).filter((t, o, i) => {
                            if (e(t)) return !0;
                            return !(o > 0 && i[o - 1] === t);
                        });
                    }
                }
                class Pd extends Nc {
                    constructor(t) {
                        super(t),
                            (this.children = this.createCollection()),
                            this.setTemplate({
                                tag: 'div',
                                attributes: { class: ['ck', 'ck-toolbar__items'] },
                                children: this.children,
                            });
                    }
                }
                class Sd {
                    constructor(t) {
                        const e = t.bindTemplate;
                        t.set('isVertical', !1),
                            t.itemsView.children.bindTo(t.items).using((t) => t),
                            t.focusables.bindTo(t.items).using((t) => t),
                            t.extendTemplate({ attributes: { class: [e.if('isVertical', 'ck-toolbar_vertical')] } });
                    }
                    render() {}
                    destroy() {}
                }
                class Ed {
                    constructor(t) {
                        (this.view = t),
                            (this.viewChildren = t.children),
                            (this.viewFocusables = t.focusables),
                            (this.viewItemsView = t.itemsView),
                            (this.viewFocusTracker = t.focusTracker),
                            (this.viewLocale = t.locale),
                            (this.ungroupedItems = t.createCollection()),
                            (this.groupedItems = t.createCollection()),
                            (this.groupedItemsDropdown = this._createGroupedItemsDropdown()),
                            (this.resizeObserver = null),
                            (this.cachedPadding = null),
                            (this.shouldUpdateGroupingOnNextResize = !1),
                            t.itemsView.children.bindTo(this.ungroupedItems).using((t) => t),
                            this.ungroupedItems.on('add', this._updateFocusCycleableItems.bind(this)),
                            this.ungroupedItems.on('remove', this._updateFocusCycleableItems.bind(this)),
                            t.children.on('add', this._updateFocusCycleableItems.bind(this)),
                            t.children.on('remove', this._updateFocusCycleableItems.bind(this)),
                            t.items.on('change', (t, e) => {
                                const o = e.index;
                                for (const t of e.removed)
                                    o >= this.ungroupedItems.length
                                        ? this.groupedItems.remove(t)
                                        : this.ungroupedItems.remove(t);
                                for (let t = o; t < o + e.added.length; t++) {
                                    const i = e.added[t - o];
                                    t > this.ungroupedItems.length
                                        ? this.groupedItems.add(i, t - this.ungroupedItems.length)
                                        : this.ungroupedItems.add(i, t);
                                }
                                this._updateGrouping();
                            }),
                            t.extendTemplate({ attributes: { class: ['ck-toolbar_grouping'] } });
                    }
                    render(t) {
                        (this.viewElement = t.element),
                            this._enableGroupingOnResize(),
                            this._enableGroupingOnMaxWidthChange(t);
                    }
                    destroy() {
                        this.groupedItemsDropdown.destroy(), this.resizeObserver.destroy();
                    }
                    _updateGrouping() {
                        if (!this.viewElement.ownerDocument.body.contains(this.viewElement)) return;
                        if (!this.viewElement.offsetParent) return void (this.shouldUpdateGroupingOnNextResize = !0);
                        const t = this.groupedItems.length;
                        let e;
                        for (; this._areItemsOverflowing; ) this._groupLastItem(), (e = !0);
                        if (!e && this.groupedItems.length) {
                            for (; this.groupedItems.length && !this._areItemsOverflowing; ) this._ungroupFirstItem();
                            this._areItemsOverflowing && this._groupLastItem();
                        }
                        this.groupedItems.length !== t && this.view.fire('groupedItemsUpdate');
                    }
                    get _areItemsOverflowing() {
                        if (!this.ungroupedItems.length) return !1;
                        const t = this.viewElement,
                            e = this.viewLocale.uiLanguageDirection,
                            o = new us(t.lastChild),
                            i = new us(t);
                        if (!this.cachedPadding) {
                            const o = dr.window.getComputedStyle(t),
                                i = 'ltr' === e ? 'paddingRight' : 'paddingLeft';
                            this.cachedPadding = Number.parseInt(o[i]);
                        }
                        return 'ltr' === e
                            ? o.right > i.right - this.cachedPadding
                            : o.left < i.left + this.cachedPadding;
                    }
                    _enableGroupingOnResize() {
                        let t;
                        (this.resizeObserver = new Sc(this.viewElement, (e) => {
                            (t && t === e.contentRect.width && !this.shouldUpdateGroupingOnNextResize) ||
                                ((this.shouldUpdateGroupingOnNextResize = !1),
                                this._updateGrouping(),
                                (t = e.contentRect.width));
                        })),
                            this._updateGrouping();
                    }
                    _enableGroupingOnMaxWidthChange(t) {
                        t.on('change:maxWidth', () => {
                            this._updateGrouping();
                        });
                    }
                    _groupLastItem() {
                        this.groupedItems.length ||
                            (this.viewChildren.add(new xd()),
                            this.viewChildren.add(this.groupedItemsDropdown),
                            this.viewFocusTracker.add(this.groupedItemsDropdown.element)),
                            this.groupedItems.add(this.ungroupedItems.remove(this.ungroupedItems.last), 0);
                    }
                    _ungroupFirstItem() {
                        this.ungroupedItems.add(this.groupedItems.remove(this.groupedItems.first)),
                            this.groupedItems.length ||
                                (this.viewChildren.remove(this.groupedItemsDropdown),
                                this.viewChildren.remove(this.viewChildren.last),
                                this.viewFocusTracker.remove(this.groupedItemsDropdown.element));
                    }
                    _createGroupedItemsDropdown() {
                        const t = this.viewLocale,
                            e = t.t,
                            o = Od(t);
                        return (
                            (o.class = 'ck-toolbar__grouped-dropdown'),
                            (o.panelPosition = 'ltr' === t.uiLanguageDirection ? 'sw' : 'se'),
                            zd(o, []),
                            o.buttonView.set({
                                label: e('Show more items'),
                                tooltip: !0,
                                tooltipPosition: 'rtl' === t.uiLanguageDirection ? 'se' : 'sw',
                                icon: Ac,
                            }),
                            o.toolbarView.items.bindTo(this.groupedItems).using((t) => t),
                            o
                        );
                    }
                    _updateFocusCycleableItems() {
                        this.viewFocusables.clear(),
                            this.ungroupedItems.map((t) => {
                                this.viewFocusables.add(t);
                            }),
                            this.groupedItems.length && this.viewFocusables.add(this.groupedItemsDropdown);
                    }
                }
                o(34);
                class Rd extends Nc {
                    constructor() {
                        super(),
                            (this.items = this.createCollection()),
                            (this.focusTracker = new tc()),
                            (this.keystrokes = new Jl()),
                            (this._focusCycler = new hd({
                                focusables: this.items,
                                focusTracker: this.focusTracker,
                                keystrokeHandler: this.keystrokes,
                                actions: { focusPrevious: 'arrowup', focusNext: 'arrowdown' },
                            })),
                            this.setTemplate({
                                tag: 'ul',
                                attributes: { class: ['ck', 'ck-reset', 'ck-list'] },
                                children: this.items,
                            });
                    }
                    render() {
                        super.render();
                        for (const t of this.items) this.focusTracker.add(t.element);
                        this.items.on('add', (t, e) => {
                            this.focusTracker.add(e.element);
                        }),
                            this.items.on('remove', (t, e) => {
                                this.focusTracker.remove(e.element);
                            }),
                            this.keystrokes.listenTo(this.element);
                    }
                    focus() {
                        this._focusCycler.focusFirst();
                    }
                    focusLast() {
                        this._focusCycler.focusLast();
                    }
                }
                class Id extends Nc {
                    constructor(t) {
                        super(t),
                            (this.children = this.createCollection()),
                            this.setTemplate({
                                tag: 'li',
                                attributes: { class: ['ck', 'ck-list__item'] },
                                children: this.children,
                            });
                    }
                    focus() {
                        this.children.first.focus();
                    }
                }
                class Vd extends Nc {
                    constructor(t) {
                        super(t), this.setTemplate({ tag: 'li', attributes: { class: ['ck', 'ck-list__separator'] } });
                    }
                }
                o(36), o(38);
                function Od(t, e = gd) {
                    const o = new e(t),
                        i = new bd(t),
                        n = new yd(t, o, i);
                    return (
                        o.bind('isEnabled').to(n),
                        o instanceof gd ? o.bind('isOn').to(n, 'isOpen') : o.arrowView.bind('isOn').to(n, 'isOpen'),
                        (function (t) {
                            (function (t) {
                                t.on('render', () => {
                                    Vc({
                                        emitter: t,
                                        activator: () => t.isOpen,
                                        callback: () => {
                                            t.isOpen = !1;
                                        },
                                        contextElements: [t.element],
                                    });
                                });
                            })(t),
                                (function (t) {
                                    t.on('execute', (e) => {
                                        e.source instanceof sd || (t.isOpen = !1);
                                    });
                                })(t),
                                (function (t) {
                                    t.keystrokes.set('arrowdown', (e, o) => {
                                        t.isOpen && (t.panelView.focus(), o());
                                    }),
                                        t.keystrokes.set('arrowup', (e, o) => {
                                            t.isOpen && (t.panelView.focusLast(), o());
                                        });
                                })(t);
                        })(n),
                        n
                    );
                }
                function zd(t, e) {
                    const o = t.locale,
                        i = o.t,
                        n = (t.toolbarView = new Td(o));
                    n.set('ariaLabel', i('Dropdown toolbar')),
                        t.extendTemplate({ attributes: { class: ['ck-toolbar-dropdown'] } }),
                        e.map((t) => n.items.add(t)),
                        t.panelView.children.add(n),
                        n.items.delegate('execute').to(t);
                }
                function Md(t, e) {
                    const o = t.locale,
                        i = (t.listView = new Rd(o));
                    i.items.bindTo(e).using(({ type: t, model: e }) => {
                        if ('separator' === t) return new Vd(o);
                        if ('button' === t || 'switchbutton' === t) {
                            const i = new Id(o);
                            let n;
                            return (
                                (n = 'button' === t ? new rd(o) : new sd(o)),
                                n.bind(...Object.keys(e)).to(e),
                                n.delegate('execute').to(i),
                                i.children.add(n),
                                i
                            );
                        }
                    }),
                        t.panelView.children.add(i),
                        i.items.delegate('execute').to(t);
                }
                o(40);
                class Nd extends Nc {
                    constructor(t) {
                        super(t), (this.body = new od(t));
                    }
                    render() {
                        super.render(), this.body.attachToDom();
                    }
                    destroy() {
                        return this.body.detachFromDom(), super.destroy();
                    }
                }
                o(42);
                class Bd extends Nc {
                    constructor(t) {
                        super(t), this.set('text'), this.set('for'), (this.id = 'ck-editor__label_' + s());
                        const e = this.bindTemplate;
                        this.setTemplate({
                            tag: 'label',
                            attributes: { class: ['ck', 'ck-label'], id: this.id, for: e.to('for') },
                            children: [{ text: e.to('text') }],
                        });
                    }
                }
                class Fd extends Nd {
                    constructor(t) {
                        super(t),
                            (this.top = this.createCollection()),
                            (this.main = this.createCollection()),
                            (this._voiceLabelView = this._createVoiceLabel()),
                            this.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: ['ck', 'ck-reset', 'ck-editor', 'ck-rounded-corners'],
                                    role: 'application',
                                    dir: t.uiLanguageDirection,
                                    lang: t.uiLanguage,
                                    'aria-labelledby': this._voiceLabelView.id,
                                },
                                children: [
                                    this._voiceLabelView,
                                    {
                                        tag: 'div',
                                        attributes: {
                                            class: ['ck', 'ck-editor__top', 'ck-reset_all'],
                                            role: 'presentation',
                                        },
                                        children: this.top,
                                    },
                                    {
                                        tag: 'div',
                                        attributes: { class: ['ck', 'ck-editor__main'], role: 'presentation' },
                                        children: this.main,
                                    },
                                ],
                            });
                    }
                    _createVoiceLabel() {
                        const t = this.t,
                            e = new Bd();
                        return (
                            (e.text = t('Rich Text Editor')),
                            e.extendTemplate({ attributes: { class: 'ck-voice-label' } }),
                            e
                        );
                    }
                }
                class Dd extends Nc {
                    constructor(t, e, o) {
                        super(t),
                            this.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: ['ck', 'ck-content', 'ck-editor__editable', 'ck-rounded-corners'],
                                    lang: t.contentLanguage,
                                    dir: t.contentLanguageDirection,
                                },
                            }),
                            (this.name = null),
                            this.set('isFocused', !1),
                            (this._editableElement = o),
                            (this._hasExternalElement = !!this._editableElement),
                            (this._editingView = e);
                    }
                    render() {
                        super.render(),
                            this._hasExternalElement
                                ? this.template.apply((this.element = this._editableElement))
                                : (this._editableElement = this.element),
                            this.on('change:isFocused', () => this._updateIsFocusedClasses()),
                            this._updateIsFocusedClasses();
                    }
                    destroy() {
                        this._hasExternalElement && this.template.revert(this._editableElement), super.destroy();
                    }
                    _updateIsFocusedClasses() {
                        const t = this._editingView;
                        function e(e) {
                            t.change((o) => {
                                const i = t.document.getRoot(e.name);
                                o.addClass(e.isFocused ? 'ck-focused' : 'ck-blurred', i),
                                    o.removeClass(e.isFocused ? 'ck-blurred' : 'ck-focused', i);
                            });
                        }
                        t.isRenderingInProgress
                            ? (function o(i) {
                                  t.once('change:isRenderingInProgress', (t, n, r) => {
                                      r ? o(i) : e(i);
                                  });
                              })(this)
                            : e(this);
                    }
                }
                class Ld extends Dd {
                    constructor(t, e, o) {
                        super(t, e, o),
                            this.extendTemplate({
                                attributes: { role: 'textbox', class: 'ck-editor__editable_inline' },
                            });
                    }
                    render() {
                        super.render();
                        const t = this._editingView,
                            e = this.t;
                        t.change((o) => {
                            const i = t.document.getRoot(this.name);
                            o.setAttribute('aria-label', e('Rich Text Editor, %0', this.name), i);
                        });
                    }
                }
                o(44);
                class Hd extends Nc {
                    constructor(t, e = {}) {
                        super(t);
                        const o = this.bindTemplate;
                        this.set('label', e.label || ''),
                            this.set('class', e.class || null),
                            (this.children = this.createCollection()),
                            this.setTemplate({
                                tag: 'div',
                                attributes: { class: ['ck', 'ck-form__header', o.to('class')] },
                                children: this.children,
                            });
                        const i = new Nc(t);
                        i.setTemplate({
                            tag: 'span',
                            attributes: { class: ['ck', 'ck-form__header__label'] },
                            children: [{ text: o.to('label') }],
                        }),
                            this.children.add(i);
                    }
                }
                o(46);
                class jd extends Nc {
                    constructor(t) {
                        super(t),
                            this.set('value'),
                            this.set('id'),
                            this.set('placeholder'),
                            this.set('isReadOnly', !1),
                            this.set('hasError', !1),
                            this.set('ariaDescribedById'),
                            (this.focusTracker = new tc()),
                            this.bind('isFocused').to(this.focusTracker),
                            this.set('isEmpty', !0);
                        const e = this.bindTemplate;
                        this.setTemplate({
                            tag: 'input',
                            attributes: {
                                type: 'text',
                                class: [
                                    'ck',
                                    'ck-input',
                                    'ck-input-text',
                                    e.if('isFocused', 'ck-input_focused'),
                                    e.if('isEmpty', 'ck-input-text_empty'),
                                    e.if('hasError', 'ck-error'),
                                ],
                                id: e.to('id'),
                                placeholder: e.to('placeholder'),
                                readonly: e.to('isReadOnly'),
                                'aria-invalid': e.if('hasError', !0),
                                'aria-describedby': e.to('ariaDescribedById'),
                            },
                            on: { input: e.to('input'), change: e.to(this._updateIsEmpty.bind(this)) },
                        });
                    }
                    render() {
                        super.render(),
                            this.focusTracker.add(this.element),
                            this._setDomElementValue(this.value),
                            this._updateIsEmpty(),
                            this.on('change:value', (t, e, o) => {
                                this._setDomElementValue(o), this._updateIsEmpty();
                            });
                    }
                    select() {
                        this.element.select();
                    }
                    focus() {
                        this.element.focus();
                    }
                    _updateIsEmpty() {
                        this.isEmpty = !this.element.value;
                    }
                    _setDomElementValue(t) {
                        this.element.value = t || 0 === t ? t : '';
                    }
                }
                o(48);
                class Wd extends Nc {
                    constructor(t, e) {
                        super(t);
                        const o = 'ck-labeled-field-view-' + s(),
                            i = 'ck-labeled-field-view-status-' + s();
                        (this.fieldView = e(this, o, i)),
                            this.set('label'),
                            this.set('isEnabled', !0),
                            this.set('isEmpty', !0),
                            this.set('isFocused', !1),
                            this.set('errorText', null),
                            this.set('infoText', null),
                            this.set('class'),
                            this.set('placeholder'),
                            (this.labelView = this._createLabelView(o)),
                            (this.statusView = this._createStatusView(i)),
                            this.bind('_statusText').to(this, 'errorText', this, 'infoText', (t, e) => t || e);
                        const n = this.bindTemplate;
                        this.setTemplate({
                            tag: 'div',
                            attributes: {
                                class: [
                                    'ck',
                                    'ck-labeled-field-view',
                                    n.to('class'),
                                    n.if('isEnabled', 'ck-disabled', (t) => !t),
                                    n.if('isEmpty', 'ck-labeled-field-view_empty'),
                                    n.if('isFocused', 'ck-labeled-field-view_focused'),
                                    n.if('placeholder', 'ck-labeled-field-view_placeholder'),
                                    n.if('errorText', 'ck-error'),
                                ],
                            },
                            children: [
                                {
                                    tag: 'div',
                                    attributes: { class: ['ck', 'ck-labeled-field-view__input-wrapper'] },
                                    children: [this.fieldView, this.labelView],
                                },
                                this.statusView,
                            ],
                        });
                    }
                    _createLabelView(t) {
                        const e = new Bd(this.locale);
                        return (e.for = t), e.bind('text').to(this, 'label'), e;
                    }
                    _createStatusView(t) {
                        const e = new Nc(this.locale),
                            o = this.bindTemplate;
                        return (
                            e.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: [
                                        'ck',
                                        'ck-labeled-field-view__status',
                                        o.if('errorText', 'ck-labeled-field-view__status_error'),
                                        o.if('_statusText', 'ck-hidden', (t) => !t),
                                    ],
                                    id: t,
                                    role: o.if('errorText', 'alert'),
                                },
                                children: [{ text: o.to('_statusText') }],
                            }),
                            e
                        );
                    }
                    focus() {
                        this.fieldView.focus();
                    }
                }
                function qd(t, e, o) {
                    const i = new jd(t.locale);
                    return (
                        i.set({ id: e, ariaDescribedById: o }),
                        i.bind('isReadOnly').to(t, 'isEnabled', (t) => !t),
                        i.bind('hasError').to(t, 'errorText', (t) => !!t),
                        i.on('input', () => {
                            t.errorText = null;
                        }),
                        t.bind('isEmpty', 'isFocused', 'placeholder').to(i),
                        i
                    );
                }
                function Ud(t, e, o) {
                    const i = Od(t.locale);
                    return i.set({ id: e, ariaDescribedById: o }), i.bind('isEnabled').to(t), i;
                }
                class $d extends ni {
                    static get pluginName() {
                        return 'Notification';
                    }
                    init() {
                        this.on(
                            'show:warning',
                            (t, e) => {
                                window.alert(e.message);
                            },
                            { priority: 'lowest' },
                        );
                    }
                    showSuccess(t, e = {}) {
                        this._showNotification({ message: t, type: 'success', namespace: e.namespace, title: e.title });
                    }
                    showInfo(t, e = {}) {
                        this._showNotification({ message: t, type: 'info', namespace: e.namespace, title: e.title });
                    }
                    showWarning(t, e = {}) {
                        this._showNotification({ message: t, type: 'warning', namespace: e.namespace, title: e.title });
                    }
                    _showNotification(t) {
                        const e = 'show:' + t.type + (t.namespace ? ':' + t.namespace : '');
                        this.fire(e, { message: t.message, type: t.type, title: t.title || '' });
                    }
                }
                class Kd {
                    constructor(t, e) {
                        e && Nt(this, e), t && this.set(t);
                    }
                }
                Kt(Kd, Ht);
                o(50);
                const Gd = Rc('px'),
                    Jd = dr.document.body;
                class Yd extends Nc {
                    constructor(t) {
                        super(t);
                        const e = this.bindTemplate;
                        this.set('top', 0),
                            this.set('left', 0),
                            this.set('position', 'arrow_nw'),
                            this.set('isVisible', !1),
                            this.set('withArrow', !0),
                            this.set('class'),
                            (this.content = this.createCollection()),
                            this.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: [
                                        'ck',
                                        'ck-balloon-panel',
                                        e.to('position', (t) => 'ck-balloon-panel_' + t),
                                        e.if('isVisible', 'ck-balloon-panel_visible'),
                                        e.if('withArrow', 'ck-balloon-panel_with-arrow'),
                                        e.to('class'),
                                    ],
                                    style: { top: e.to('top', Gd), left: e.to('left', Gd) },
                                },
                                children: this.content,
                            });
                    }
                    show() {
                        this.isVisible = !0;
                    }
                    hide() {
                        this.isVisible = !1;
                    }
                    attachTo(t) {
                        this.show();
                        const e = Yd.defaultPositions,
                            o = Object.assign(
                                {},
                                {
                                    element: this.element,
                                    positions: [
                                        e.southArrowNorth,
                                        e.southArrowNorthMiddleWest,
                                        e.southArrowNorthMiddleEast,
                                        e.southArrowNorthWest,
                                        e.southArrowNorthEast,
                                        e.northArrowSouth,
                                        e.northArrowSouthMiddleWest,
                                        e.northArrowSouthMiddleEast,
                                        e.northArrowSouthWest,
                                        e.northArrowSouthEast,
                                    ],
                                    limiter: Jd,
                                    fitInViewport: !0,
                                },
                                t,
                            ),
                            i = Yd._getOptimalPosition(o),
                            n = parseInt(i.left),
                            r = parseInt(i.top),
                            s = i.name;
                        Object.assign(this, { top: r, left: n, position: s });
                    }
                    pin(t) {
                        this.unpin(),
                            (this._pinWhenIsVisibleCallback = () => {
                                this.isVisible ? this._startPinning(t) : this._stopPinning();
                            }),
                            this._startPinning(t),
                            this.listenTo(this, 'change:isVisible', this._pinWhenIsVisibleCallback);
                    }
                    unpin() {
                        this._pinWhenIsVisibleCallback &&
                            (this._stopPinning(),
                            this.stopListening(this, 'change:isVisible', this._pinWhenIsVisibleCallback),
                            (this._pinWhenIsVisibleCallback = null),
                            this.hide());
                    }
                    _startPinning(t) {
                        this.attachTo(t);
                        const e = Xd(t.target),
                            o = t.limiter ? Xd(t.limiter) : Jd;
                        this.listenTo(
                            dr.document,
                            'scroll',
                            (i, n) => {
                                const r = n.target,
                                    s = e && r.contains(e),
                                    a = o && r.contains(o);
                                (!s && !a && e && o) || this.attachTo(t);
                            },
                            { useCapture: !0 },
                        ),
                            this.listenTo(dr.window, 'resize', () => {
                                this.attachTo(t);
                            });
                    }
                    _stopPinning() {
                        this.stopListening(dr.document, 'scroll'), this.stopListening(dr.window, 'resize');
                    }
                }
                function Xd(t) {
                    return Uo(t) ? t : cs(t) ? t.commonAncestorContainer : 'function' == typeof t ? Xd(t()) : null;
                }
                function Zd(t, e) {
                    return t.top - e.height - Yd.arrowVerticalOffset;
                }
                function Qd(t) {
                    return t.bottom + Yd.arrowVerticalOffset;
                }
                (Yd.arrowHorizontalOffset = 25),
                    (Yd.arrowVerticalOffset = 10),
                    (Yd._getOptimalPosition = wd),
                    (Yd.defaultPositions = {
                        northWestArrowSouthWest: (t, e) => ({
                            top: Zd(t, e),
                            left: t.left - Yd.arrowHorizontalOffset,
                            name: 'arrow_sw',
                        }),
                        northWestArrowSouthMiddleWest: (t, e) => ({
                            top: Zd(t, e),
                            left: t.left - 0.25 * e.width - Yd.arrowHorizontalOffset,
                            name: 'arrow_smw',
                        }),
                        northWestArrowSouth: (t, e) => ({ top: Zd(t, e), left: t.left - e.width / 2, name: 'arrow_s' }),
                        northWestArrowSouthMiddleEast: (t, e) => ({
                            top: Zd(t, e),
                            left: t.left - 0.75 * e.width + Yd.arrowHorizontalOffset,
                            name: 'arrow_sme',
                        }),
                        northWestArrowSouthEast: (t, e) => ({
                            top: Zd(t, e),
                            left: t.left - e.width + Yd.arrowHorizontalOffset,
                            name: 'arrow_se',
                        }),
                        northArrowSouthWest: (t, e) => ({
                            top: Zd(t, e),
                            left: t.left + t.width / 2 - Yd.arrowHorizontalOffset,
                            name: 'arrow_sw',
                        }),
                        northArrowSouthMiddleWest: (t, e) => ({
                            top: Zd(t, e),
                            left: t.left + t.width / 2 - 0.25 * e.width - Yd.arrowHorizontalOffset,
                            name: 'arrow_smw',
                        }),
                        northArrowSouth: (t, e) => ({
                            top: Zd(t, e),
                            left: t.left + t.width / 2 - e.width / 2,
                            name: 'arrow_s',
                        }),
                        northArrowSouthMiddleEast: (t, e) => ({
                            top: Zd(t, e),
                            left: t.left + t.width / 2 - 0.75 * e.width + Yd.arrowHorizontalOffset,
                            name: 'arrow_sme',
                        }),
                        northArrowSouthEast: (t, e) => ({
                            top: Zd(t, e),
                            left: t.left + t.width / 2 - e.width + Yd.arrowHorizontalOffset,
                            name: 'arrow_se',
                        }),
                        northEastArrowSouthWest: (t, e) => ({
                            top: Zd(t, e),
                            left: t.right - Yd.arrowHorizontalOffset,
                            name: 'arrow_sw',
                        }),
                        northEastArrowSouthMiddleWest: (t, e) => ({
                            top: Zd(t, e),
                            left: t.right - 0.25 * e.width - Yd.arrowHorizontalOffset,
                            name: 'arrow_smw',
                        }),
                        northEastArrowSouth: (t, e) => ({
                            top: Zd(t, e),
                            left: t.right - e.width / 2,
                            name: 'arrow_s',
                        }),
                        northEastArrowSouthMiddleEast: (t, e) => ({
                            top: Zd(t, e),
                            left: t.right - 0.75 * e.width + Yd.arrowHorizontalOffset,
                            name: 'arrow_sme',
                        }),
                        northEastArrowSouthEast: (t, e) => ({
                            top: Zd(t, e),
                            left: t.right - e.width + Yd.arrowHorizontalOffset,
                            name: 'arrow_se',
                        }),
                        southWestArrowNorthWest: (t, e) => ({
                            top: Qd(t),
                            left: t.left - Yd.arrowHorizontalOffset,
                            name: 'arrow_nw',
                        }),
                        southWestArrowNorthMiddleWest: (t, e) => ({
                            top: Qd(t),
                            left: t.left - 0.25 * e.width - Yd.arrowHorizontalOffset,
                            name: 'arrow_nmw',
                        }),
                        southWestArrowNorth: (t, e) => ({ top: Qd(t), left: t.left - e.width / 2, name: 'arrow_n' }),
                        southWestArrowNorthMiddleEast: (t, e) => ({
                            top: Qd(t),
                            left: t.left - 0.75 * e.width + Yd.arrowHorizontalOffset,
                            name: 'arrow_nme',
                        }),
                        southWestArrowNorthEast: (t, e) => ({
                            top: Qd(t),
                            left: t.left - e.width + Yd.arrowHorizontalOffset,
                            name: 'arrow_ne',
                        }),
                        southArrowNorthWest: (t, e) => ({
                            top: Qd(t),
                            left: t.left + t.width / 2 - Yd.arrowHorizontalOffset,
                            name: 'arrow_nw',
                        }),
                        southArrowNorthMiddleWest: (t, e) => ({
                            top: Qd(t),
                            left: t.left + t.width / 2 - 0.25 * e.width - Yd.arrowHorizontalOffset,
                            name: 'arrow_nmw',
                        }),
                        southArrowNorth: (t, e) => ({
                            top: Qd(t),
                            left: t.left + t.width / 2 - e.width / 2,
                            name: 'arrow_n',
                        }),
                        southArrowNorthMiddleEast: (t, e) => ({
                            top: Qd(t),
                            left: t.left + t.width / 2 - 0.75 * e.width + Yd.arrowHorizontalOffset,
                            name: 'arrow_nme',
                        }),
                        southArrowNorthEast: (t, e) => ({
                            top: Qd(t),
                            left: t.left + t.width / 2 - e.width + Yd.arrowHorizontalOffset,
                            name: 'arrow_ne',
                        }),
                        southEastArrowNorthWest: (t, e) => ({
                            top: Qd(t),
                            left: t.right - Yd.arrowHorizontalOffset,
                            name: 'arrow_nw',
                        }),
                        southEastArrowNorthMiddleWest: (t, e) => ({
                            top: Qd(t),
                            left: t.right - 0.25 * e.width - Yd.arrowHorizontalOffset,
                            name: 'arrow_nmw',
                        }),
                        southEastArrowNorth: (t, e) => ({ top: Qd(t), left: t.right - e.width / 2, name: 'arrow_n' }),
                        southEastArrowNorthMiddleEast: (t, e) => ({
                            top: Qd(t),
                            left: t.right - 0.75 * e.width + Yd.arrowHorizontalOffset,
                            name: 'arrow_nme',
                        }),
                        southEastArrowNorthEast: (t, e) => ({
                            top: Qd(t),
                            left: t.right - e.width + Yd.arrowHorizontalOffset,
                            name: 'arrow_ne',
                        }),
                    });
                o(52), o(54);
                const th = Rc('px');
                class eh extends Gt {
                    static get pluginName() {
                        return 'ContextualBalloon';
                    }
                    constructor(t) {
                        super(t),
                            (this.positionLimiter = () => {
                                const t = this.editor.editing.view,
                                    e = t.document.selection.editableElement;
                                return e ? t.domConverter.mapViewToDom(e.root) : null;
                            }),
                            this.set('visibleView', null),
                            (this.view = new Yd(t.locale)),
                            t.ui.view.body.add(this.view),
                            t.ui.focusTracker.add(this.view.element),
                            (this._viewToStack = new Map()),
                            (this._idToStack = new Map()),
                            this.set('_numberOfStacks', 0),
                            this.set('_singleViewMode', !1),
                            (this._rotatorView = this._createRotatorView()),
                            (this._fakePanelsView = this._createFakePanelsView());
                    }
                    hasView(t) {
                        return Array.from(this._viewToStack.keys()).includes(t);
                    }
                    add(t) {
                        if (this.hasView(t.view)) throw new l.a('contextualballoon-add-view-exist', [this, t]);
                        const e = t.stackId || 'main';
                        if (!this._idToStack.has(e))
                            return (
                                this._idToStack.set(e, new Map([[t.view, t]])),
                                this._viewToStack.set(t.view, this._idToStack.get(e)),
                                (this._numberOfStacks = this._idToStack.size),
                                void ((this._visibleStack && !t.singleViewMode) || this.showStack(e))
                            );
                        const o = this._idToStack.get(e);
                        t.singleViewMode && this.showStack(e),
                            o.set(t.view, t),
                            this._viewToStack.set(t.view, o),
                            o === this._visibleStack && this._showView(t);
                    }
                    remove(t) {
                        if (!this.hasView(t)) throw new l.a('contextualballoon-remove-view-not-exist', [this, t]);
                        const e = this._viewToStack.get(t);
                        this._singleViewMode && this.visibleView === t && (this._singleViewMode = !1),
                            this.visibleView === t &&
                                (1 === e.size
                                    ? this._idToStack.size > 1
                                        ? this._showNextStack()
                                        : (this.view.hide(), (this.visibleView = null), this._rotatorView.hideView())
                                    : this._showView(Array.from(e.values())[e.size - 2])),
                            1 === e.size
                                ? (this._idToStack.delete(this._getStackId(e)),
                                  (this._numberOfStacks = this._idToStack.size))
                                : e.delete(t),
                            this._viewToStack.delete(t);
                    }
                    updatePosition(t) {
                        t && (this._visibleStack.get(this.visibleView).position = t),
                            this.view.pin(this._getBalloonPosition()),
                            this._fakePanelsView.updatePosition();
                    }
                    showStack(t) {
                        this.visibleStack = t;
                        const e = this._idToStack.get(t);
                        if (!e) throw new l.a('contextualballoon-showstack-stack-not-exist', this);
                        this._visibleStack !== e && this._showView(Array.from(e.values()).pop());
                    }
                    get _visibleStack() {
                        return this._viewToStack.get(this.visibleView);
                    }
                    _getStackId(t) {
                        return Array.from(this._idToStack.entries()).find((e) => e[1] === t)[0];
                    }
                    _showNextStack() {
                        const t = Array.from(this._idToStack.values());
                        let e = t.indexOf(this._visibleStack) + 1;
                        t[e] || (e = 0), this.showStack(this._getStackId(t[e]));
                    }
                    _showPrevStack() {
                        const t = Array.from(this._idToStack.values());
                        let e = t.indexOf(this._visibleStack) - 1;
                        t[e] || (e = t.length - 1), this.showStack(this._getStackId(t[e]));
                    }
                    _createRotatorView() {
                        const t = new oh(this.editor.locale),
                            e = this.editor.locale.t;
                        return (
                            this.view.content.add(t),
                            t
                                .bind('isNavigationVisible')
                                .to(this, '_numberOfStacks', this, '_singleViewMode', (t, e) => !e && t > 1),
                            t.on('change:isNavigationVisible', () => this.updatePosition(), { priority: 'low' }),
                            t.bind('counter').to(this, 'visibleView', this, '_numberOfStacks', (t, o) => {
                                if (o < 2) return '';
                                const i = Array.from(this._idToStack.values()).indexOf(this._visibleStack) + 1;
                                return e('%0 of %1', [i, o]);
                            }),
                            t.buttonNextView.on('execute', () => {
                                t.focusTracker.isFocused && this.editor.editing.view.focus(), this._showNextStack();
                            }),
                            t.buttonPrevView.on('execute', () => {
                                t.focusTracker.isFocused && this.editor.editing.view.focus(), this._showPrevStack();
                            }),
                            t
                        );
                    }
                    _createFakePanelsView() {
                        const t = new ih(this.editor.locale, this.view);
                        return (
                            t
                                .bind('numberOfPanels')
                                .to(this, '_numberOfStacks', this, '_singleViewMode', (t, e) =>
                                    !e && t >= 2 ? Math.min(t - 1, 2) : 0,
                                ),
                            t.listenTo(this.view, 'change:top', () => t.updatePosition()),
                            t.listenTo(this.view, 'change:left', () => t.updatePosition()),
                            this.editor.ui.view.body.add(t),
                            t
                        );
                    }
                    _showView({ view: t, balloonClassName: e = '', withArrow: o = !0, singleViewMode: i = !1 }) {
                        (this.view.class = e),
                            (this.view.withArrow = o),
                            this._rotatorView.showView(t),
                            (this.visibleView = t),
                            this.view.pin(this._getBalloonPosition()),
                            this._fakePanelsView.updatePosition(),
                            i && (this._singleViewMode = !0);
                    }
                    _getBalloonPosition() {
                        let t = Array.from(this._visibleStack.values()).pop().position;
                        return t && !t.limiter && (t = Object.assign({}, t, { limiter: this.positionLimiter })), t;
                    }
                }
                class oh extends Nc {
                    constructor(t) {
                        super(t);
                        const e = t.t,
                            o = this.bindTemplate;
                        this.set('isNavigationVisible', !0),
                            (this.focusTracker = new tc()),
                            (this.buttonPrevView = this._createButtonView(
                                e('Previous'),
                                '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.463 5.187a.888.888 0 1 1 1.254 1.255L9.16 10l3.557 3.557a.888.888 0 1 1-1.254 1.255L7.26 10.61a.888.888 0 0 1 .16-1.382l4.043-4.042z"/></svg>',
                            )),
                            (this.buttonNextView = this._createButtonView(
                                e('Next'),
                                '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8.537 14.813a.888.888 0 1 1-1.254-1.255L10.84 10 7.283 6.442a.888.888 0 1 1 1.254-1.255L12.74 9.39a.888.888 0 0 1-.16 1.382l-4.043 4.042z"/></svg>',
                            )),
                            (this.content = this.createCollection()),
                            this.setTemplate({
                                tag: 'div',
                                attributes: { class: ['ck', 'ck-balloon-rotator'], 'z-index': '-1' },
                                children: [
                                    {
                                        tag: 'div',
                                        attributes: {
                                            class: [
                                                'ck-balloon-rotator__navigation',
                                                o.to('isNavigationVisible', (t) => (t ? '' : 'ck-hidden')),
                                            ],
                                        },
                                        children: [
                                            this.buttonPrevView,
                                            {
                                                tag: 'span',
                                                attributes: { class: ['ck-balloon-rotator__counter'] },
                                                children: [{ text: o.to('counter') }],
                                            },
                                            this.buttonNextView,
                                        ],
                                    },
                                    {
                                        tag: 'div',
                                        attributes: { class: 'ck-balloon-rotator__content' },
                                        children: this.content,
                                    },
                                ],
                            });
                    }
                    render() {
                        super.render(), this.focusTracker.add(this.element);
                    }
                    showView(t) {
                        this.hideView(), this.content.add(t);
                    }
                    hideView() {
                        this.content.clear();
                    }
                    _createButtonView(t, e) {
                        const o = new rd(this.locale);
                        return o.set({ label: t, icon: e, tooltip: !0 }), o;
                    }
                }
                class ih extends Nc {
                    constructor(t, e) {
                        super(t);
                        const o = this.bindTemplate;
                        this.set('top', 0),
                            this.set('left', 0),
                            this.set('height', 0),
                            this.set('width', 0),
                            this.set('numberOfPanels', 0),
                            (this.content = this.createCollection()),
                            (this._balloonPanelView = e),
                            this.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: ['ck-fake-panel', o.to('numberOfPanels', (t) => (t ? '' : 'ck-hidden'))],
                                    style: {
                                        top: o.to('top', th),
                                        left: o.to('left', th),
                                        width: o.to('width', th),
                                        height: o.to('height', th),
                                    },
                                },
                                children: this.content,
                            }),
                            this.on('change:numberOfPanels', (t, e, o, i) => {
                                o > i ? this._addPanels(o - i) : this._removePanels(i - o), this.updatePosition();
                            });
                    }
                    _addPanels(t) {
                        for (; t--; ) {
                            const t = new Nc();
                            t.setTemplate({ tag: 'div' }), this.content.add(t), this.registerChild(t);
                        }
                    }
                    _removePanels(t) {
                        for (; t--; ) {
                            const t = this.content.last;
                            this.content.remove(t), this.deregisterChild(t), t.destroy();
                        }
                    }
                    updatePosition() {
                        if (this.numberOfPanels) {
                            const { top: t, left: e } = this._balloonPanelView,
                                { width: o, height: i } = new us(this._balloonPanelView.element);
                            Object.assign(this, { top: t, left: e, width: o, height: i });
                        }
                    }
                }
                o(56);
                const nh = Rc('px');
                class rh extends Nc {
                    constructor(t) {
                        super(t);
                        const e = this.bindTemplate;
                        this.set('isActive', !1),
                            this.set('isSticky', !1),
                            this.set('limiterElement', null),
                            this.set('limiterBottomOffset', 50),
                            this.set('viewportTopOffset', 0),
                            this.set('_marginLeft', null),
                            this.set('_isStickyToTheLimiter', !1),
                            this.set('_hasViewportTopOffset', !1),
                            (this.content = this.createCollection()),
                            (this._contentPanelPlaceholder = new Bc({
                                tag: 'div',
                                attributes: {
                                    class: ['ck', 'ck-sticky-panel__placeholder'],
                                    style: {
                                        display: e.to('isSticky', (t) => (t ? 'block' : 'none')),
                                        height: e.to('isSticky', (t) => (t ? nh(this._panelRect.height) : null)),
                                    },
                                },
                            }).render()),
                            (this._contentPanel = new Bc({
                                tag: 'div',
                                attributes: {
                                    class: [
                                        'ck',
                                        'ck-sticky-panel__content',
                                        e.if('isSticky', 'ck-sticky-panel__content_sticky'),
                                        e.if('_isStickyToTheLimiter', 'ck-sticky-panel__content_sticky_bottom-limit'),
                                    ],
                                    style: {
                                        width: e.to('isSticky', (t) =>
                                            t ? nh(this._contentPanelPlaceholder.getBoundingClientRect().width) : null,
                                        ),
                                        top: e.to('_hasViewportTopOffset', (t) =>
                                            t ? nh(this.viewportTopOffset) : null,
                                        ),
                                        bottom: e.to('_isStickyToTheLimiter', (t) =>
                                            t ? nh(this.limiterBottomOffset) : null,
                                        ),
                                        marginLeft: e.to('_marginLeft'),
                                    },
                                },
                                children: this.content,
                            }).render()),
                            this.setTemplate({
                                tag: 'div',
                                attributes: { class: ['ck', 'ck-sticky-panel'] },
                                children: [this._contentPanelPlaceholder, this._contentPanel],
                            });
                    }
                    render() {
                        super.render(),
                            this._checkIfShouldBeSticky(),
                            this.listenTo(dr.window, 'scroll', () => {
                                this._checkIfShouldBeSticky();
                            }),
                            this.listenTo(this, 'change:isActive', () => {
                                this._checkIfShouldBeSticky();
                            });
                    }
                    _checkIfShouldBeSticky() {
                        const t = (this._panelRect = this._contentPanel.getBoundingClientRect());
                        let e;
                        this.limiterElement
                            ? ((e = this._limiterRect = this.limiterElement.getBoundingClientRect()),
                              (this.isSticky =
                                  this.isActive &&
                                  e.top < this.viewportTopOffset &&
                                  this._panelRect.height + this.limiterBottomOffset < e.height))
                            : (this.isSticky = !1),
                            this.isSticky
                                ? ((this._isStickyToTheLimiter =
                                      e.bottom < t.height + this.limiterBottomOffset + this.viewportTopOffset),
                                  (this._hasViewportTopOffset =
                                      !this._isStickyToTheLimiter && !!this.viewportTopOffset),
                                  (this._marginLeft = this._isStickyToTheLimiter ? null : nh(-dr.window.scrollX)))
                                : ((this._isStickyToTheLimiter = !1),
                                  (this._hasViewportTopOffset = !1),
                                  (this._marginLeft = null));
                    }
                }
                Rc('px');
                o(58);
                Rc('px');
                Rc('px');
                o(60);
                const sh = new WeakMap();
                function ah(t, e) {
                    return !!e.hasClass('ck-placeholder') && (t.removeClass('ck-placeholder', e), !0);
                }
                function lh(t, e) {
                    const o = sh.get(t),
                        i = [];
                    let n = !1;
                    for (const [t, r] of o) r.isDirectHost && (i.push(t), ch(e, t, r) && (n = !0));
                    for (const [t, r] of o) {
                        if (r.isDirectHost) continue;
                        const o = dh(t);
                        o && (i.includes(o) || ((r.hostElement = o), ch(e, t, r) && (n = !0)));
                    }
                    return n;
                }
                function ch(t, e, o) {
                    const { text: i, isDirectHost: n, hostElement: r } = o;
                    let s = !1;
                    r.getAttribute('data-placeholder') !== i && (t.setAttribute('data-placeholder', i, r), (s = !0));
                    return (
                        (n || 1 == e.childCount) &&
                        (function (t, e) {
                            if (!t.isAttached()) return !1;
                            if (Array.from(t.getChildren()).some((t) => !t.is('uiElement'))) return !1;
                            if (e) return !0;
                            const o = t.document;
                            if (!o.isFocused) return !0;
                            const i = o.selection.anchor;
                            return i && i.parent !== t;
                        })(r, o.keepOnFocus)
                            ? (function (t, e) {
                                  return !e.hasClass('ck-placeholder') && (t.addClass('ck-placeholder', e), !0);
                              })(t, r) && (s = !0)
                            : ah(t, r) && (s = !0),
                        s
                    );
                }
                function dh(t) {
                    if (t.childCount) {
                        const e = t.getChild(0);
                        if (e.is('element') && !e.is('uiElement')) return e;
                    }
                    return null;
                }
                const hh = new Map();
                function uh(t, e, o) {
                    let i = hh.get(t);
                    i || ((i = new Map()), hh.set(t, i)), i.set(e, o);
                }
                function fh(t) {
                    return [t];
                }
                function mh(t, e, o = {}) {
                    const i = (function (t, e) {
                        const o = hh.get(t);
                        return o && o.has(e) ? o.get(e) : fh;
                    })(t.constructor, e.constructor);
                    try {
                        return i((t = t.clone()), e, o);
                    } catch (t) {
                        throw t;
                    }
                }
                function gh(t, e, o) {
                    (t = t.slice()), (e = e.slice());
                    const i = new ph(o.document, o.useRelations, o.forceWeakRemove);
                    i.setOriginalOperations(t), i.setOriginalOperations(e);
                    const n = i.originalOperations;
                    if (0 == t.length || 0 == e.length)
                        return { operationsA: t, operationsB: e, originalOperations: n };
                    const r = new WeakMap();
                    for (const e of t) r.set(e, 0);
                    const s = {
                        nextBaseVersionA: t[t.length - 1].baseVersion + 1,
                        nextBaseVersionB: e[e.length - 1].baseVersion + 1,
                        originalOperationsACount: t.length,
                        originalOperationsBCount: e.length,
                    };
                    let a = 0;
                    for (; a < t.length; ) {
                        const o = t[a],
                            n = r.get(o);
                        if (n == e.length) {
                            a++;
                            continue;
                        }
                        const s = e[n],
                            l = mh(o, s, i.getContext(o, s, !0)),
                            c = mh(s, o, i.getContext(s, o, !1));
                        i.updateRelation(o, s), i.setOriginalOperations(l, o), i.setOriginalOperations(c, s);
                        for (const t of l) r.set(t, n + c.length);
                        t.splice(a, 1, ...l), e.splice(n, 1, ...c);
                    }
                    if (o.padWithNoOps) {
                        const o = t.length - s.originalOperationsACount,
                            i = e.length - s.originalOperationsBCount;
                        wh(t, i - o), wh(e, o - i);
                    }
                    return (
                        bh(t, s.nextBaseVersionB),
                        bh(e, s.nextBaseVersionA),
                        { operationsA: t, operationsB: e, originalOperations: n }
                    );
                }
                class ph {
                    constructor(t, e, o = !1) {
                        (this.originalOperations = new Map()),
                            (this._history = t.history),
                            (this._useRelations = e),
                            (this._forceWeakRemove = !!o),
                            (this._relations = new Map());
                    }
                    setOriginalOperations(t, e = null) {
                        const o = e ? this.originalOperations.get(e) : null;
                        for (const e of t) this.originalOperations.set(e, o || e);
                    }
                    updateRelation(t, e) {
                        switch (t.constructor) {
                            case nl:
                                switch (e.constructor) {
                                    case cl:
                                        t.targetPosition.isEqual(e.sourcePosition) ||
                                        e.movedRange.containsPosition(t.targetPosition)
                                            ? this._setRelation(t, e, 'insertAtSource')
                                            : t.targetPosition.isEqual(e.deletionPosition)
                                            ? this._setRelation(t, e, 'insertBetween')
                                            : t.targetPosition.isAfter(e.sourcePosition) &&
                                              this._setRelation(t, e, 'moveTargetAfter');
                                        break;
                                    case nl:
                                        t.targetPosition.isEqual(e.sourcePosition) ||
                                        t.targetPosition.isBefore(e.sourcePosition)
                                            ? this._setRelation(t, e, 'insertBefore')
                                            : this._setRelation(t, e, 'insertAfter');
                                }
                                break;
                            case dl:
                                switch (e.constructor) {
                                    case cl:
                                        t.splitPosition.isBefore(e.sourcePosition) &&
                                            this._setRelation(t, e, 'splitBefore');
                                        break;
                                    case nl:
                                        if (
                                            t.splitPosition.isEqual(e.sourcePosition) ||
                                            t.splitPosition.isBefore(e.sourcePosition)
                                        )
                                            this._setRelation(t, e, 'splitBefore');
                                        else {
                                            const o = Bs._createFromPositionAndShift(e.sourcePosition, e.howMany);
                                            if (
                                                t.splitPosition.hasSameParentAs(e.sourcePosition) &&
                                                o.containsPosition(t.splitPosition)
                                            ) {
                                                const i = o.end.offset - t.splitPosition.offset,
                                                    n = t.splitPosition.offset - o.start.offset;
                                                this._setRelation(t, e, { howMany: i, offset: n });
                                            }
                                        }
                                }
                                break;
                            case cl:
                                switch (e.constructor) {
                                    case cl:
                                        t.targetPosition.isEqual(e.sourcePosition) ||
                                            this._setRelation(t, e, 'mergeTargetNotMoved'),
                                            t.sourcePosition.isEqual(e.targetPosition) &&
                                                this._setRelation(t, e, 'mergeSourceNotMoved'),
                                            t.sourcePosition.isEqual(e.sourcePosition) &&
                                                this._setRelation(t, e, 'mergeSameElement');
                                        break;
                                    case dl:
                                        t.sourcePosition.isEqual(e.splitPosition) &&
                                            this._setRelation(t, e, 'splitAtSource');
                                }
                                break;
                            case sl: {
                                const o = t.newRange;
                                if (!o) return;
                                switch (e.constructor) {
                                    case nl: {
                                        const i = Bs._createFromPositionAndShift(e.sourcePosition, e.howMany),
                                            n = i.containsPosition(o.start) || i.start.isEqual(o.start),
                                            r = i.containsPosition(o.end) || i.end.isEqual(o.end);
                                        (!n && !r) ||
                                            i.containsRange(o) ||
                                            this._setRelation(t, e, {
                                                side: n ? 'left' : 'right',
                                                path: n ? o.start.path.slice() : o.end.path.slice(),
                                            });
                                        break;
                                    }
                                    case cl: {
                                        const i = o.start.isEqual(e.targetPosition),
                                            n = o.start.isEqual(e.deletionPosition),
                                            r = o.end.isEqual(e.deletionPosition),
                                            s = o.end.isEqual(e.sourcePosition);
                                        (i || n || r || s) &&
                                            this._setRelation(t, e, {
                                                wasInLeftElement: i,
                                                wasStartBeforeMergedElement: n,
                                                wasEndBeforeMergedElement: r,
                                                wasInRightElement: s,
                                            });
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                    getContext(t, e, o) {
                        return {
                            aIsStrong: o,
                            aWasUndone: this._wasUndone(t),
                            bWasUndone: this._wasUndone(e),
                            abRelation: this._useRelations ? this._getRelation(t, e) : null,
                            baRelation: this._useRelations ? this._getRelation(e, t) : null,
                            forceWeakRemove: this._forceWeakRemove,
                        };
                    }
                    _wasUndone(t) {
                        const e = this.originalOperations.get(t);
                        return e.wasUndone || this._history.isUndoneOperation(e);
                    }
                    _getRelation(t, e) {
                        const o = this.originalOperations.get(e),
                            i = this._history.getUndoneOperation(o);
                        if (!i) return null;
                        const n = this.originalOperations.get(t),
                            r = this._relations.get(n);
                        return (r && r.get(i)) || null;
                    }
                    _setRelation(t, e, o) {
                        const i = this.originalOperations.get(t),
                            n = this.originalOperations.get(e);
                        let r = this._relations.get(i);
                        r || ((r = new Map()), this._relations.set(i, r)), r.set(n, o);
                    }
                }
                function bh(t, e) {
                    for (const o of t) o.baseVersion = e++;
                }
                function wh(t, e) {
                    for (let o = 0; o < e; o++) t.push(new El(0));
                }
                function kh(t, e, o) {
                    const i = t.nodes.getNode(0).getAttribute(e);
                    if (i == o) return null;
                    const n = new Bs(t.position, t.position.getShiftedBy(t.howMany));
                    return new ol(n, e, i, o, 0);
                }
                function _h(t, e) {
                    return null === t.targetPosition._getTransformedByDeletion(e.sourcePosition, e.howMany);
                }
                function vh(t, e) {
                    const o = [];
                    for (let i = 0; i < t.length; i++) {
                        const n = t[i],
                            r = new nl(n.start, n.end.offset - n.start.offset, e, 0);
                        o.push(r);
                        for (let e = i + 1; e < t.length; e++)
                            t[e] = t[e]._getTransformedByMove(r.sourcePosition, r.targetPosition, r.howMany)[0];
                        e = e._getTransformedByMove(r.sourcePosition, r.targetPosition, r.howMany);
                    }
                    return o;
                }
                uh(ol, ol, (t, e, o) => {
                    if (t.key === e.key && t.range.start.hasSameParentAs(e.range.start)) {
                        const i = t.range
                                .getDifference(e.range)
                                .map((e) => new ol(e, t.key, t.oldValue, t.newValue, 0)),
                            n = t.range.getIntersection(e.range);
                        return (
                            n && o.aIsStrong && i.push(new ol(n, e.key, e.newValue, t.newValue, 0)),
                            0 == i.length ? [new El(0)] : i
                        );
                    }
                    return [t];
                }),
                    uh(ol, rl, (t, e) => {
                        if (t.range.start.hasSameParentAs(e.position) && t.range.containsPosition(e.position)) {
                            const o = t.range
                                ._getTransformedByInsertion(e.position, e.howMany, !e.shouldReceiveAttributes)
                                .map((e) => new ol(e, t.key, t.oldValue, t.newValue, t.baseVersion));
                            if (e.shouldReceiveAttributes) {
                                const i = kh(e, t.key, t.oldValue);
                                i && o.unshift(i);
                            }
                            return o;
                        }
                        return (t.range = t.range._getTransformedByInsertion(e.position, e.howMany, !1)[0]), [t];
                    }),
                    uh(ol, cl, (t, e) => {
                        const o = [];
                        t.range.start.hasSameParentAs(e.deletionPosition) &&
                            (t.range.containsPosition(e.deletionPosition) ||
                                t.range.start.isEqual(e.deletionPosition)) &&
                            o.push(Bs._createFromPositionAndShift(e.graveyardPosition, 1));
                        const i = t.range._getTransformedByMergeOperation(e);
                        return (
                            i.isCollapsed || o.push(i),
                            o.map((e) => new ol(e, t.key, t.oldValue, t.newValue, t.baseVersion))
                        );
                    }),
                    uh(ol, nl, (t, e) =>
                        (function (t, e) {
                            const o = Bs._createFromPositionAndShift(e.sourcePosition, e.howMany);
                            let i = null,
                                n = [];
                            o.containsRange(t, !0)
                                ? (i = t)
                                : t.start.hasSameParentAs(o.start)
                                ? ((n = t.getDifference(o)), (i = t.getIntersection(o)))
                                : (n = [t]);
                            const r = [];
                            for (let t of n) {
                                t = t._getTransformedByDeletion(e.sourcePosition, e.howMany);
                                const o = e.getMovedRangeStart(),
                                    i = t.start.hasSameParentAs(o);
                                (t = t._getTransformedByInsertion(o, e.howMany, i)), r.push(...t);
                            }
                            i && r.push(i._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany, !1)[0]);
                            return r;
                        })(t.range, e).map((e) => new ol(e, t.key, t.oldValue, t.newValue, t.baseVersion)),
                    ),
                    uh(ol, dl, (t, e) => {
                        if (t.range.end.isEqual(e.insertionPosition))
                            return e.graveyardPosition || t.range.end.offset++, [t];
                        if (
                            t.range.start.hasSameParentAs(e.splitPosition) &&
                            t.range.containsPosition(e.splitPosition)
                        ) {
                            const o = t.clone();
                            return (
                                (o.range = new Bs(
                                    e.moveTargetPosition.clone(),
                                    t.range.end._getCombined(e.splitPosition, e.moveTargetPosition),
                                )),
                                (t.range.end = e.splitPosition.clone()),
                                (t.range.end.stickiness = 'toPrevious'),
                                [t, o]
                            );
                        }
                        return (t.range = t.range._getTransformedBySplitOperation(e)), [t];
                    }),
                    uh(rl, ol, (t, e) => {
                        const o = [t];
                        if (
                            t.shouldReceiveAttributes &&
                            t.position.hasSameParentAs(e.range.start) &&
                            e.range.containsPosition(t.position)
                        ) {
                            const i = kh(t, e.key, e.newValue);
                            i && o.push(i);
                        }
                        return o;
                    }),
                    uh(
                        rl,
                        rl,
                        (t, e, o) => (
                            (t.position.isEqual(e.position) && o.aIsStrong) ||
                                (t.position = t.position._getTransformedByInsertOperation(e)),
                            [t]
                        ),
                    ),
                    uh(rl, nl, (t, e) => ((t.position = t.position._getTransformedByMoveOperation(e)), [t])),
                    uh(rl, dl, (t, e) => ((t.position = t.position._getTransformedBySplitOperation(e)), [t])),
                    uh(rl, cl, (t, e) => ((t.position = t.position._getTransformedByMergeOperation(e)), [t])),
                    uh(
                        sl,
                        rl,
                        (t, e) => (
                            t.oldRange && (t.oldRange = t.oldRange._getTransformedByInsertOperation(e)[0]),
                            t.newRange && (t.newRange = t.newRange._getTransformedByInsertOperation(e)[0]),
                            [t]
                        ),
                    ),
                    uh(sl, sl, (t, e, o) => {
                        if (t.name == e.name) {
                            if (!o.aIsStrong) return [new El(0)];
                            t.oldRange = e.newRange ? e.newRange.clone() : null;
                        }
                        return [t];
                    }),
                    uh(
                        sl,
                        cl,
                        (t, e) => (
                            t.oldRange && (t.oldRange = t.oldRange._getTransformedByMergeOperation(e)),
                            t.newRange && (t.newRange = t.newRange._getTransformedByMergeOperation(e)),
                            [t]
                        ),
                    ),
                    uh(sl, nl, (t, e, o) => {
                        if (
                            (t.oldRange &&
                                (t.oldRange = Bs._createFromRanges(t.oldRange._getTransformedByMoveOperation(e))),
                            t.newRange)
                        ) {
                            if (o.abRelation) {
                                const i = Bs._createFromRanges(t.newRange._getTransformedByMoveOperation(e));
                                if ('left' == o.abRelation.side && e.targetPosition.isEqual(t.newRange.start))
                                    return (t.newRange.start.path = o.abRelation.path), (t.newRange.end = i.end), [t];
                                if ('right' == o.abRelation.side && e.targetPosition.isEqual(t.newRange.end))
                                    return (t.newRange.start = i.start), (t.newRange.end.path = o.abRelation.path), [t];
                            }
                            t.newRange = Bs._createFromRanges(t.newRange._getTransformedByMoveOperation(e));
                        }
                        return [t];
                    }),
                    uh(sl, dl, (t, e, o) => {
                        if ((t.oldRange && (t.oldRange = t.oldRange._getTransformedBySplitOperation(e)), t.newRange)) {
                            if (o.abRelation) {
                                const i = t.newRange._getTransformedBySplitOperation(e);
                                return (
                                    t.newRange.start.isEqual(e.splitPosition) &&
                                    o.abRelation.wasStartBeforeMergedElement
                                        ? (t.newRange.start = Os._createAt(e.insertionPosition))
                                        : t.newRange.start.isEqual(e.splitPosition) &&
                                          !o.abRelation.wasInLeftElement &&
                                          (t.newRange.start = Os._createAt(e.moveTargetPosition)),
                                    t.newRange.end.isEqual(e.splitPosition) && o.abRelation.wasInRightElement
                                        ? (t.newRange.end = Os._createAt(e.moveTargetPosition))
                                        : t.newRange.end.isEqual(e.splitPosition) &&
                                          o.abRelation.wasEndBeforeMergedElement
                                        ? (t.newRange.end = Os._createAt(e.insertionPosition))
                                        : (t.newRange.end = i.end),
                                    [t]
                                );
                            }
                            t.newRange = t.newRange._getTransformedBySplitOperation(e);
                        }
                        return [t];
                    }),
                    uh(
                        cl,
                        rl,
                        (t, e) => (
                            t.sourcePosition.hasSameParentAs(e.position) && (t.howMany += e.howMany),
                            (t.sourcePosition = t.sourcePosition._getTransformedByInsertOperation(e)),
                            (t.targetPosition = t.targetPosition._getTransformedByInsertOperation(e)),
                            [t]
                        ),
                    ),
                    uh(cl, cl, (t, e, o) => {
                        if (t.sourcePosition.isEqual(e.sourcePosition) && t.targetPosition.isEqual(e.targetPosition)) {
                            if (o.bWasUndone) {
                                const o = e.graveyardPosition.path.slice();
                                return (
                                    o.push(0),
                                    (t.sourcePosition = new Os(e.graveyardPosition.root, o)),
                                    (t.howMany = 0),
                                    [t]
                                );
                            }
                            return [new El(0)];
                        }
                        if (
                            t.sourcePosition.isEqual(e.sourcePosition) &&
                            !t.targetPosition.isEqual(e.targetPosition) &&
                            !o.bWasUndone &&
                            'splitAtSource' != o.abRelation
                        ) {
                            const i = '$graveyard' == t.targetPosition.root.rootName,
                                n = '$graveyard' == e.targetPosition.root.rootName,
                                r = i && !n;
                            if ((n && !i) || (!r && o.aIsStrong)) {
                                const o = e.targetPosition._getTransformedByMergeOperation(e),
                                    i = t.targetPosition._getTransformedByMergeOperation(e);
                                return [new nl(o, t.howMany, i, 0)];
                            }
                            return [new El(0)];
                        }
                        return (
                            t.sourcePosition.hasSameParentAs(e.targetPosition) && (t.howMany += e.howMany),
                            (t.sourcePosition = t.sourcePosition._getTransformedByMergeOperation(e)),
                            (t.targetPosition = t.targetPosition._getTransformedByMergeOperation(e)),
                            (t.graveyardPosition.isEqual(e.graveyardPosition) && o.aIsStrong) ||
                                (t.graveyardPosition = t.graveyardPosition._getTransformedByMergeOperation(e)),
                            [t]
                        );
                    }),
                    uh(cl, nl, (t, e, o) => {
                        const i = Bs._createFromPositionAndShift(e.sourcePosition, e.howMany);
                        return 'remove' == e.type &&
                            !o.bWasUndone &&
                            !o.forceWeakRemove &&
                            t.deletionPosition.hasSameParentAs(e.sourcePosition) &&
                            i.containsPosition(t.sourcePosition)
                            ? [new El(0)]
                            : (t.sourcePosition.hasSameParentAs(e.targetPosition) && (t.howMany += e.howMany),
                              t.sourcePosition.hasSameParentAs(e.sourcePosition) && (t.howMany -= e.howMany),
                              (t.sourcePosition = t.sourcePosition._getTransformedByMoveOperation(e)),
                              (t.targetPosition = t.targetPosition._getTransformedByMoveOperation(e)),
                              t.graveyardPosition.isEqual(e.targetPosition) ||
                                  (t.graveyardPosition = t.graveyardPosition._getTransformedByMoveOperation(e)),
                              [t]);
                    }),
                    uh(cl, dl, (t, e, o) => {
                        if (
                            (e.graveyardPosition &&
                                ((t.graveyardPosition = t.graveyardPosition._getTransformedByDeletion(
                                    e.graveyardPosition,
                                    1,
                                )),
                                t.deletionPosition.isEqual(e.graveyardPosition) && (t.howMany = e.howMany)),
                            t.targetPosition.isEqual(e.splitPosition))
                        ) {
                            const i = 0 != e.howMany,
                                n = e.graveyardPosition && t.deletionPosition.isEqual(e.graveyardPosition);
                            if (i || n || 'mergeTargetNotMoved' == o.abRelation)
                                return (t.sourcePosition = t.sourcePosition._getTransformedBySplitOperation(e)), [t];
                        }
                        if (t.sourcePosition.isEqual(e.splitPosition)) {
                            if ('mergeSourceNotMoved' == o.abRelation)
                                return (
                                    (t.howMany = 0),
                                    (t.targetPosition = t.targetPosition._getTransformedBySplitOperation(e)),
                                    [t]
                                );
                            if ('mergeSameElement' == o.abRelation || t.sourcePosition.offset > 0)
                                return (
                                    (t.sourcePosition = e.moveTargetPosition.clone()),
                                    (t.targetPosition = t.targetPosition._getTransformedBySplitOperation(e)),
                                    [t]
                                );
                        }
                        return (
                            t.sourcePosition.hasSameParentAs(e.splitPosition) && (t.howMany = e.splitPosition.offset),
                            (t.sourcePosition = t.sourcePosition._getTransformedBySplitOperation(e)),
                            (t.targetPosition = t.targetPosition._getTransformedBySplitOperation(e)),
                            [t]
                        );
                    }),
                    uh(nl, rl, (t, e) => {
                        const o = Bs._createFromPositionAndShift(
                            t.sourcePosition,
                            t.howMany,
                        )._getTransformedByInsertOperation(e, !1)[0];
                        return (
                            (t.sourcePosition = o.start),
                            (t.howMany = o.end.offset - o.start.offset),
                            t.targetPosition.isEqual(e.position) ||
                                (t.targetPosition = t.targetPosition._getTransformedByInsertOperation(e)),
                            [t]
                        );
                    }),
                    uh(nl, nl, (t, e, o) => {
                        const i = Bs._createFromPositionAndShift(t.sourcePosition, t.howMany),
                            n = Bs._createFromPositionAndShift(e.sourcePosition, e.howMany);
                        let r,
                            s = o.aIsStrong,
                            a = !o.aIsStrong;
                        if (
                            ('insertBefore' == o.abRelation || 'insertAfter' == o.baRelation
                                ? (a = !0)
                                : ('insertAfter' != o.abRelation && 'insertBefore' != o.baRelation) || (a = !1),
                            (r =
                                t.targetPosition.isEqual(e.targetPosition) && a
                                    ? t.targetPosition._getTransformedByDeletion(e.sourcePosition, e.howMany)
                                    : t.targetPosition._getTransformedByMove(
                                          e.sourcePosition,
                                          e.targetPosition,
                                          e.howMany,
                                      )),
                            _h(t, e) && _h(e, t))
                        )
                            return [e.getReversed()];
                        if (i.containsPosition(e.targetPosition) && i.containsRange(n, !0))
                            return (
                                (i.start = i.start._getTransformedByMove(
                                    e.sourcePosition,
                                    e.targetPosition,
                                    e.howMany,
                                )),
                                (i.end = i.end._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany)),
                                vh([i], r)
                            );
                        if (n.containsPosition(t.targetPosition) && n.containsRange(i, !0))
                            return (
                                (i.start = i.start._getCombined(e.sourcePosition, e.getMovedRangeStart())),
                                (i.end = i.end._getCombined(e.sourcePosition, e.getMovedRangeStart())),
                                vh([i], r)
                            );
                        const l = ri(t.sourcePosition.getParentPath(), e.sourcePosition.getParentPath());
                        if ('prefix' == l || 'extension' == l)
                            return (
                                (i.start = i.start._getTransformedByMove(
                                    e.sourcePosition,
                                    e.targetPosition,
                                    e.howMany,
                                )),
                                (i.end = i.end._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany)),
                                vh([i], r)
                            );
                        'remove' != t.type || 'remove' == e.type || o.aWasUndone || o.forceWeakRemove
                            ? 'remove' == t.type || 'remove' != e.type || o.bWasUndone || o.forceWeakRemove || (s = !1)
                            : (s = !0);
                        const c = [],
                            d = i.getDifference(n);
                        for (const t of d) {
                            (t.start = t.start._getTransformedByDeletion(e.sourcePosition, e.howMany)),
                                (t.end = t.end._getTransformedByDeletion(e.sourcePosition, e.howMany));
                            const o = 'same' == ri(t.start.getParentPath(), e.getMovedRangeStart().getParentPath()),
                                i = t._getTransformedByInsertion(e.getMovedRangeStart(), e.howMany, o);
                            c.push(...i);
                        }
                        const h = i.getIntersection(n);
                        return (
                            null !== h &&
                                s &&
                                ((h.start = h.start._getCombined(e.sourcePosition, e.getMovedRangeStart())),
                                (h.end = h.end._getCombined(e.sourcePosition, e.getMovedRangeStart())),
                                0 === c.length
                                    ? c.push(h)
                                    : 1 == c.length
                                    ? n.start.isBefore(i.start) || n.start.isEqual(i.start)
                                        ? c.unshift(h)
                                        : c.push(h)
                                    : c.splice(1, 0, h)),
                            0 === c.length ? [new El(t.baseVersion)] : vh(c, r)
                        );
                    }),
                    uh(nl, dl, (t, e, o) => {
                        let i = t.targetPosition.clone();
                        (t.targetPosition.isEqual(e.insertionPosition) &&
                            e.graveyardPosition &&
                            'moveTargetAfter' != o.abRelation) ||
                            (i = t.targetPosition._getTransformedBySplitOperation(e));
                        const n = Bs._createFromPositionAndShift(t.sourcePosition, t.howMany);
                        if (n.end.isEqual(e.insertionPosition))
                            return e.graveyardPosition || t.howMany++, (t.targetPosition = i), [t];
                        if (n.start.hasSameParentAs(e.splitPosition) && n.containsPosition(e.splitPosition)) {
                            let t = new Bs(e.splitPosition, n.end);
                            t = t._getTransformedBySplitOperation(e);
                            return vh([new Bs(n.start, e.splitPosition), t], i);
                        }
                        t.targetPosition.isEqual(e.splitPosition) &&
                            'insertAtSource' == o.abRelation &&
                            (i = e.moveTargetPosition),
                            t.targetPosition.isEqual(e.insertionPosition) &&
                                'insertBetween' == o.abRelation &&
                                (i = t.targetPosition);
                        const r = [n._getTransformedBySplitOperation(e)];
                        if (e.graveyardPosition) {
                            const i = n.start.isEqual(e.graveyardPosition) || n.containsPosition(e.graveyardPosition);
                            t.howMany > 1 &&
                                i &&
                                !o.aWasUndone &&
                                r.push(Bs._createFromPositionAndShift(e.insertionPosition, 1));
                        }
                        return vh(r, i);
                    }),
                    uh(nl, cl, (t, e, o) => {
                        const i = Bs._createFromPositionAndShift(t.sourcePosition, t.howMany);
                        if (
                            e.deletionPosition.hasSameParentAs(t.sourcePosition) &&
                            i.containsPosition(e.sourcePosition)
                        )
                            if ('remove' != t.type || o.forceWeakRemove) {
                                if (1 == t.howMany)
                                    return o.bWasUndone
                                        ? ((t.sourcePosition = e.graveyardPosition.clone()),
                                          (t.targetPosition = t.targetPosition._getTransformedByMergeOperation(e)),
                                          [t])
                                        : [new El(0)];
                            } else if (!o.aWasUndone) {
                                const o = [];
                                let i = e.graveyardPosition.clone(),
                                    n = e.targetPosition._getTransformedByMergeOperation(e);
                                t.howMany > 1 &&
                                    (o.push(new nl(t.sourcePosition, t.howMany - 1, t.targetPosition, 0)),
                                    (i = i._getTransformedByMove(t.sourcePosition, t.targetPosition, t.howMany - 1)),
                                    (n = n._getTransformedByMove(t.sourcePosition, t.targetPosition, t.howMany - 1)));
                                const r = e.deletionPosition._getCombined(t.sourcePosition, t.targetPosition),
                                    s = new nl(i, 1, r, 0),
                                    a = s.getMovedRangeStart().path.slice();
                                a.push(0);
                                const l = new Os(s.targetPosition.root, a);
                                n = n._getTransformedByMove(i, r, 1);
                                const c = new nl(n, e.howMany, l, 0);
                                return o.push(s), o.push(c), o;
                            }
                        const n = Bs._createFromPositionAndShift(
                            t.sourcePosition,
                            t.howMany,
                        )._getTransformedByMergeOperation(e);
                        return (
                            (t.sourcePosition = n.start),
                            (t.howMany = n.end.offset - n.start.offset),
                            (t.targetPosition = t.targetPosition._getTransformedByMergeOperation(e)),
                            [t]
                        );
                    }),
                    uh(al, rl, (t, e) => ((t.position = t.position._getTransformedByInsertOperation(e)), [t])),
                    uh(al, cl, (t, e) =>
                        t.position.isEqual(e.deletionPosition)
                            ? ((t.position = e.graveyardPosition.clone()), (t.position.stickiness = 'toNext'), [t])
                            : ((t.position = t.position._getTransformedByMergeOperation(e)), [t]),
                    ),
                    uh(al, nl, (t, e) => ((t.position = t.position._getTransformedByMoveOperation(e)), [t])),
                    uh(al, al, (t, e, o) => {
                        if (t.position.isEqual(e.position)) {
                            if (!o.aIsStrong) return [new El(0)];
                            t.oldName = e.newName;
                        }
                        return [t];
                    }),
                    uh(al, dl, (t, e) => {
                        if ('same' == ri(t.position.path, e.splitPosition.getParentPath()) && !e.graveyardPosition) {
                            const e = new al(t.position.getShiftedBy(1), t.oldName, t.newName, 0);
                            return [t, e];
                        }
                        return (t.position = t.position._getTransformedBySplitOperation(e)), [t];
                    }),
                    uh(ll, ll, (t, e, o) => {
                        if (t.root === e.root && t.key === e.key) {
                            if (!o.aIsStrong || t.newValue === e.newValue) return [new El(0)];
                            t.oldValue = e.newValue;
                        }
                        return [t];
                    }),
                    uh(
                        dl,
                        rl,
                        (t, e) => (
                            t.splitPosition.hasSameParentAs(e.position) &&
                                t.splitPosition.offset < e.position.offset &&
                                (t.howMany += e.howMany),
                            (t.splitPosition = t.splitPosition._getTransformedByInsertOperation(e)),
                            (t.insertionPosition = t.insertionPosition._getTransformedByInsertOperation(e)),
                            [t]
                        ),
                    ),
                    uh(dl, cl, (t, e, o) => {
                        if (
                            !t.graveyardPosition &&
                            !o.bWasUndone &&
                            t.splitPosition.hasSameParentAs(e.sourcePosition)
                        ) {
                            const o = e.graveyardPosition.path.slice();
                            o.push(0);
                            const i = new Os(e.graveyardPosition.root, o),
                                n = dl.getInsertionPosition(new Os(e.graveyardPosition.root, o)),
                                r = new dl(i, 0, n, null, 0);
                            return (
                                (t.splitPosition = t.splitPosition._getTransformedByMergeOperation(e)),
                                (t.insertionPosition = dl.getInsertionPosition(t.splitPosition)),
                                (t.graveyardPosition = r.insertionPosition.clone()),
                                (t.graveyardPosition.stickiness = 'toNext'),
                                [r, t]
                            );
                        }
                        return (
                            t.splitPosition.hasSameParentAs(e.deletionPosition) &&
                                !t.splitPosition.isAfter(e.deletionPosition) &&
                                t.howMany--,
                            t.splitPosition.hasSameParentAs(e.targetPosition) && (t.howMany += e.howMany),
                            (t.splitPosition = t.splitPosition._getTransformedByMergeOperation(e)),
                            (t.insertionPosition = dl.getInsertionPosition(t.splitPosition)),
                            t.graveyardPosition &&
                                (t.graveyardPosition = t.graveyardPosition._getTransformedByMergeOperation(e)),
                            [t]
                        );
                    }),
                    uh(dl, nl, (t, e, o) => {
                        const i = Bs._createFromPositionAndShift(e.sourcePosition, e.howMany);
                        if (t.graveyardPosition) {
                            const n = i.start.isEqual(t.graveyardPosition) || i.containsPosition(t.graveyardPosition);
                            if (!o.bWasUndone && n) {
                                const o = t.splitPosition._getTransformedByMoveOperation(e),
                                    i = t.graveyardPosition._getTransformedByMoveOperation(e),
                                    n = i.path.slice();
                                n.push(0);
                                const r = new Os(i.root, n);
                                return [new nl(o, t.howMany, r, 0)];
                            }
                            t.graveyardPosition = t.graveyardPosition._getTransformedByMoveOperation(e);
                        }
                        const n = t.splitPosition.isEqual(e.targetPosition);
                        if (n && ('insertAtSource' == o.baRelation || 'splitBefore' == o.abRelation))
                            return (
                                (t.howMany += e.howMany),
                                (t.splitPosition = t.splitPosition._getTransformedByDeletion(
                                    e.sourcePosition,
                                    e.howMany,
                                )),
                                (t.insertionPosition = dl.getInsertionPosition(t.splitPosition)),
                                [t]
                            );
                        if (n && o.abRelation && o.abRelation.howMany) {
                            const { howMany: e, offset: i } = o.abRelation;
                            return (t.howMany += e), (t.splitPosition = t.splitPosition.getShiftedBy(i)), [t];
                        }
                        if (t.splitPosition.hasSameParentAs(e.sourcePosition) && i.containsPosition(t.splitPosition)) {
                            const o = e.howMany - (t.splitPosition.offset - e.sourcePosition.offset);
                            return (
                                (t.howMany -= o),
                                t.splitPosition.hasSameParentAs(e.targetPosition) &&
                                    t.splitPosition.offset < e.targetPosition.offset &&
                                    (t.howMany += e.howMany),
                                (t.splitPosition = e.sourcePosition.clone()),
                                (t.insertionPosition = dl.getInsertionPosition(t.splitPosition)),
                                [t]
                            );
                        }
                        return (
                            e.sourcePosition.isEqual(e.targetPosition) ||
                                (t.splitPosition.hasSameParentAs(e.sourcePosition) &&
                                    t.splitPosition.offset <= e.sourcePosition.offset &&
                                    (t.howMany -= e.howMany),
                                t.splitPosition.hasSameParentAs(e.targetPosition) &&
                                    t.splitPosition.offset < e.targetPosition.offset &&
                                    (t.howMany += e.howMany)),
                            (t.splitPosition.stickiness = 'toNone'),
                            (t.splitPosition = t.splitPosition._getTransformedByMoveOperation(e)),
                            (t.splitPosition.stickiness = 'toNext'),
                            t.graveyardPosition
                                ? (t.insertionPosition = t.insertionPosition._getTransformedByMoveOperation(e))
                                : (t.insertionPosition = dl.getInsertionPosition(t.splitPosition)),
                            [t]
                        );
                    }),
                    uh(dl, dl, (t, e, o) => {
                        if (t.splitPosition.isEqual(e.splitPosition)) {
                            if (!t.graveyardPosition && !e.graveyardPosition) return [new El(0)];
                            if (
                                t.graveyardPosition &&
                                e.graveyardPosition &&
                                t.graveyardPosition.isEqual(e.graveyardPosition)
                            )
                                return [new El(0)];
                            if ('splitBefore' == o.abRelation)
                                return (
                                    (t.howMany = 0),
                                    (t.graveyardPosition = t.graveyardPosition._getTransformedBySplitOperation(e)),
                                    [t]
                                );
                        }
                        if (
                            t.graveyardPosition &&
                            e.graveyardPosition &&
                            t.graveyardPosition.isEqual(e.graveyardPosition)
                        ) {
                            const i = '$graveyard' == t.splitPosition.root.rootName,
                                n = '$graveyard' == e.splitPosition.root.rootName,
                                r = i && !n;
                            if ((n && !i) || (!r && o.aIsStrong)) {
                                const o = [];
                                return (
                                    e.howMany && o.push(new nl(e.moveTargetPosition, e.howMany, e.splitPosition, 0)),
                                    t.howMany && o.push(new nl(t.splitPosition, t.howMany, t.moveTargetPosition, 0)),
                                    o
                                );
                            }
                            return [new El(0)];
                        }
                        if (
                            (t.graveyardPosition &&
                                (t.graveyardPosition = t.graveyardPosition._getTransformedBySplitOperation(e)),
                            t.splitPosition.isEqual(e.insertionPosition) && 'splitBefore' == o.abRelation)
                        )
                            return t.howMany++, [t];
                        if (e.splitPosition.isEqual(t.insertionPosition) && 'splitBefore' == o.baRelation) {
                            const o = e.insertionPosition.path.slice();
                            o.push(0);
                            const i = new Os(e.insertionPosition.root, o);
                            return [t, new nl(t.insertionPosition, 1, i, 0)];
                        }
                        return (
                            t.splitPosition.hasSameParentAs(e.splitPosition) &&
                                t.splitPosition.offset < e.splitPosition.offset &&
                                (t.howMany -= e.howMany),
                            (t.splitPosition = t.splitPosition._getTransformedBySplitOperation(e)),
                            (t.insertionPosition = dl.getInsertionPosition(t.splitPosition)),
                            [t]
                        );
                    });
                class yh extends Wr {
                    constructor(t) {
                        super(t), (this.domEventType = 'click');
                    }
                    onDomEvent(t) {
                        this.fire(t.type, t);
                    }
                }
                class xh extends Wr {
                    constructor(t) {
                        super(t), (this.domEventType = 'mousedown');
                    }
                    onDomEvent(t) {
                        this.fire(t.type, t);
                    }
                }
                class Ch {
                    constructor(t) {
                        this.document = t;
                    }
                    createDocumentFragment(t) {
                        return new zn(this.document, t);
                    }
                    createElement(t, e, o) {
                        return new Yi(this.document, t, e, o);
                    }
                    createText(t) {
                        return new li(this.document, t);
                    }
                    clone(t, e = !1) {
                        return t._clone(e);
                    }
                    appendChild(t, e) {
                        return e._appendChild(t);
                    }
                    insertChild(t, e, o) {
                        return o._insertChild(t, e);
                    }
                    removeChildren(t, e, o) {
                        return o._removeChildren(t, e);
                    }
                    remove(t) {
                        const e = t.parent;
                        return e ? this.removeChildren(e.getChildIndex(t), 1, e) : [];
                    }
                    replace(t, e) {
                        const o = t.parent;
                        if (o) {
                            const i = o.getChildIndex(t);
                            return this.removeChildren(i, 1, o), this.insertChild(i, e, o), !0;
                        }
                        return !1;
                    }
                    unwrapElement(t) {
                        const e = t.parent;
                        if (e) {
                            const o = e.getChildIndex(t);
                            this.remove(t), this.insertChild(o, t.getChildren(), e);
                        }
                    }
                    rename(t, e) {
                        const o = new Yi(this.document, t, e.getAttributes(), e.getChildren());
                        return this.replace(e, o) ? o : null;
                    }
                    setAttribute(t, e, o) {
                        o._setAttribute(t, e);
                    }
                    removeAttribute(t, e) {
                        e._removeAttribute(t);
                    }
                    addClass(t, e) {
                        e._addClass(t);
                    }
                    removeClass(t, e) {
                        e._removeClass(t);
                    }
                    setStyle(t, e, o) {
                        re(t) && void 0 === o && (o = e), o._setStyle(t, e);
                    }
                    removeStyle(t, e) {
                        e._removeStyle(t);
                    }
                    setCustomProperty(t, e, o) {
                        o._setCustomProperty(t, e);
                    }
                    removeCustomProperty(t, e) {
                        return e._removeCustomProperty(t);
                    }
                    createPositionAt(t, e) {
                        return rn._createAt(t, e);
                    }
                    createPositionAfter(t) {
                        return rn._createAfter(t);
                    }
                    createPositionBefore(t) {
                        return rn._createBefore(t);
                    }
                    createRange(t, e) {
                        return new sn(t, e);
                    }
                    createRangeOn(t) {
                        return sn._createOn(t);
                    }
                    createRangeIn(t) {
                        return sn._createIn(t);
                    }
                    createSelection(t, e, o) {
                        return new cn(t, e, o);
                    }
                }
                const Ah = /^#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/i,
                    Th = /^rgb\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}[0-9]{1,3}[ %]?\)$/i,
                    Ph = /^rgba\([ ]?([0-9]{1,3}[ %]?,[ ]?){3}(1|[0-9]+%|[0]?\.?[0-9]+)\)$/i,
                    Sh = /^hsl\([ ]?([0-9]{1,3}[ %]?[,]?[ ]*){3}(1|[0-9]+%|[0]?\.?[0-9]+)?\)$/i,
                    Eh = /^hsla\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}(1|[0-9]+%|[0]?\.?[0-9]+)\)$/i,
                    Rh = new Set([
                        'black',
                        'silver',
                        'gray',
                        'white',
                        'maroon',
                        'red',
                        'purple',
                        'fuchsia',
                        'green',
                        'lime',
                        'olive',
                        'yellow',
                        'navy',
                        'blue',
                        'teal',
                        'aqua',
                        'orange',
                        'aliceblue',
                        'antiquewhite',
                        'aquamarine',
                        'azure',
                        'beige',
                        'bisque',
                        'blanchedalmond',
                        'blueviolet',
                        'brown',
                        'burlywood',
                        'cadetblue',
                        'chartreuse',
                        'chocolate',
                        'coral',
                        'cornflowerblue',
                        'cornsilk',
                        'crimson',
                        'cyan',
                        'darkblue',
                        'darkcyan',
                        'darkgoldenrod',
                        'darkgray',
                        'darkgreen',
                        'darkgrey',
                        'darkkhaki',
                        'darkmagenta',
                        'darkolivegreen',
                        'darkorange',
                        'darkorchid',
                        'darkred',
                        'darksalmon',
                        'darkseagreen',
                        'darkslateblue',
                        'darkslategray',
                        'darkslategrey',
                        'darkturquoise',
                        'darkviolet',
                        'deeppink',
                        'deepskyblue',
                        'dimgray',
                        'dimgrey',
                        'dodgerblue',
                        'firebrick',
                        'floralwhite',
                        'forestgreen',
                        'gainsboro',
                        'ghostwhite',
                        'gold',
                        'goldenrod',
                        'greenyellow',
                        'grey',
                        'honeydew',
                        'hotpink',
                        'indianred',
                        'indigo',
                        'ivory',
                        'khaki',
                        'lavender',
                        'lavenderblush',
                        'lawngreen',
                        'lemonchiffon',
                        'lightblue',
                        'lightcoral',
                        'lightcyan',
                        'lightgoldenrodyellow',
                        'lightgray',
                        'lightgreen',
                        'lightgrey',
                        'lightpink',
                        'lightsalmon',
                        'lightseagreen',
                        'lightskyblue',
                        'lightslategray',
                        'lightslategrey',
                        'lightsteelblue',
                        'lightyellow',
                        'limegreen',
                        'linen',
                        'magenta',
                        'mediumaquamarine',
                        'mediumblue',
                        'mediumorchid',
                        'mediumpurple',
                        'mediumseagreen',
                        'mediumslateblue',
                        'mediumspringgreen',
                        'mediumturquoise',
                        'mediumvioletred',
                        'midnightblue',
                        'mintcream',
                        'mistyrose',
                        'moccasin',
                        'navajowhite',
                        'oldlace',
                        'olivedrab',
                        'orangered',
                        'orchid',
                        'palegoldenrod',
                        'palegreen',
                        'paleturquoise',
                        'palevioletred',
                        'papayawhip',
                        'peachpuff',
                        'peru',
                        'pink',
                        'plum',
                        'powderblue',
                        'rosybrown',
                        'royalblue',
                        'saddlebrown',
                        'salmon',
                        'sandybrown',
                        'seagreen',
                        'seashell',
                        'sienna',
                        'skyblue',
                        'slateblue',
                        'slategray',
                        'slategrey',
                        'snow',
                        'springgreen',
                        'steelblue',
                        'tan',
                        'thistle',
                        'tomato',
                        'turquoise',
                        'violet',
                        'wheat',
                        'whitesmoke',
                        'yellowgreen',
                        'rebeccapurple',
                        'currentcolor',
                        'transparent',
                    ]);
                function Ih(t) {
                    return t.startsWith('#')
                        ? Ah.test(t)
                        : t.startsWith('rgb')
                        ? Th.test(t) || Ph.test(t)
                        : t.startsWith('hsl')
                        ? Sh.test(t) || Eh.test(t)
                        : Rh.has(t.toLowerCase());
                }
                const Vh = [
                    'none',
                    'hidden',
                    'dotted',
                    'dashed',
                    'solid',
                    'double',
                    'groove',
                    'ridge',
                    'inset',
                    'outset',
                ];
                function Oh(t) {
                    return Vh.includes(t);
                }
                const zh = /^([+-]?[0-9]*[.]?[0-9]+(px|cm|mm|in|pc|pt|ch|em|ex|rem|vh|vw|vmin|vmax)|0)$/;
                function Mh(t) {
                    return zh.test(t);
                }
                const Nh = /^[+-]?[0-9]*[.]?[0-9]+%$/;
                const Bh = ['repeat-x', 'repeat-y', 'repeat', 'space', 'round', 'no-repeat'];
                const Fh = ['center', 'top', 'bottom', 'left', 'right'];
                function Dh(t) {
                    return Fh.includes(t);
                }
                const Lh = ['fixed', 'scroll', 'local'];
                function Hh(t) {
                    return Lh.includes(t);
                }
                const jh = /^url\(/;
                function Wh(t) {
                    return jh.test(t);
                }
                function qh(t = '') {
                    if ('' === t) return { top: void 0, right: void 0, bottom: void 0, left: void 0 };
                    const e = Gh(t),
                        o = e[0],
                        i = e[2] || o,
                        n = e[1] || o;
                    return { top: o, bottom: i, right: n, left: e[3] || n };
                }
                function Uh(t) {
                    return (e) => {
                        const { top: o, right: i, bottom: n, left: r } = e,
                            s = [];
                        return (
                            [o, i, r, n].every((t) => !!t)
                                ? s.push([t, $h(e)])
                                : (o && s.push([t + '-top', o]),
                                  i && s.push([t + '-right', i]),
                                  n && s.push([t + '-bottom', n]),
                                  r && s.push([t + '-left', r])),
                            s
                        );
                    };
                }
                function $h({ top: t, right: e, bottom: o, left: i }) {
                    const n = [];
                    return (
                        i !== e ? n.push(t, e, o, i) : o !== t ? n.push(t, e, o) : e !== t ? n.push(t, e) : n.push(t),
                        n.join(' ')
                    );
                }
                function Kh(t) {
                    return (e) => ({ path: t, value: qh(e) });
                }
                function Gh(t) {
                    return t
                        .replace(/, /g, ',')
                        .split(' ')
                        .map((t) => t.replace(/,/g, ', '));
                }
                function Jh(t) {
                    t.setNormalizer('background', Yh),
                        t.setNormalizer('background-color', (t) => ({ path: 'background.color', value: t })),
                        t.setReducer('background', (t) => {
                            const e = [];
                            return e.push(['background-color', t.color]), e;
                        });
                }
                function Yh(t) {
                    const e = {},
                        o = Gh(t);
                    for (const t of o)
                        (i = t),
                            Bh.includes(i)
                                ? ((e.repeat = e.repeat || []), e.repeat.push(t))
                                : Dh(t)
                                ? ((e.position = e.position || []), e.position.push(t))
                                : Hh(t)
                                ? (e.attachment = t)
                                : Ih(t)
                                ? (e.color = t)
                                : Wh(t) && (e.image = t);
                    var i;
                    return { path: 'background', value: e };
                }
                function Xh(t) {
                    t.setNormalizer('border', Zh),
                        t.setNormalizer('border-top', Qh('top')),
                        t.setNormalizer('border-right', Qh('right')),
                        t.setNormalizer('border-bottom', Qh('bottom')),
                        t.setNormalizer('border-left', Qh('left')),
                        t.setNormalizer('border-color', tu('color')),
                        t.setNormalizer('border-width', tu('width')),
                        t.setNormalizer('border-style', tu('style')),
                        t.setNormalizer('border-top-color', ou('color', 'top')),
                        t.setNormalizer('border-top-style', ou('style', 'top')),
                        t.setNormalizer('border-top-width', ou('width', 'top')),
                        t.setNormalizer('border-right-color', ou('color', 'right')),
                        t.setNormalizer('border-right-style', ou('style', 'right')),
                        t.setNormalizer('border-right-width', ou('width', 'right')),
                        t.setNormalizer('border-bottom-color', ou('color', 'bottom')),
                        t.setNormalizer('border-bottom-style', ou('style', 'bottom')),
                        t.setNormalizer('border-bottom-width', ou('width', 'bottom')),
                        t.setNormalizer('border-left-color', ou('color', 'left')),
                        t.setNormalizer('border-left-style', ou('style', 'left')),
                        t.setNormalizer('border-left-width', ou('width', 'left')),
                        t.setExtractor('border-top', iu('top')),
                        t.setExtractor('border-right', iu('right')),
                        t.setExtractor('border-bottom', iu('bottom')),
                        t.setExtractor('border-left', iu('left')),
                        t.setExtractor('border-top-color', 'border.color.top'),
                        t.setExtractor('border-right-color', 'border.color.right'),
                        t.setExtractor('border-bottom-color', 'border.color.bottom'),
                        t.setExtractor('border-left-color', 'border.color.left'),
                        t.setExtractor('border-top-width', 'border.width.top'),
                        t.setExtractor('border-right-width', 'border.width.right'),
                        t.setExtractor('border-bottom-width', 'border.width.bottom'),
                        t.setExtractor('border-left-width', 'border.width.left'),
                        t.setExtractor('border-top-style', 'border.style.top'),
                        t.setExtractor('border-right-style', 'border.style.right'),
                        t.setExtractor('border-bottom-style', 'border.style.bottom'),
                        t.setExtractor('border-left-style', 'border.style.left'),
                        t.setReducer('border-color', Uh('border-color')),
                        t.setReducer('border-style', Uh('border-style')),
                        t.setReducer('border-width', Uh('border-width')),
                        t.setReducer('border-top', au('top')),
                        t.setReducer('border-right', au('right')),
                        t.setReducer('border-bottom', au('bottom')),
                        t.setReducer('border-left', au('left')),
                        t.setReducer('border', su),
                        t.setStyleRelation('border', [
                            'border-color',
                            'border-style',
                            'border-width',
                            'border-top',
                            'border-right',
                            'border-bottom',
                            'border-left',
                            'border-top-color',
                            'border-right-color',
                            'border-bottom-color',
                            'border-left-color',
                            'border-top-style',
                            'border-right-style',
                            'border-bottom-style',
                            'border-left-style',
                            'border-top-width',
                            'border-right-width',
                            'border-bottom-width',
                            'border-left-width',
                        ]),
                        t.setStyleRelation('border-color', [
                            'border-top-color',
                            'border-right-color',
                            'border-bottom-color',
                            'border-left-color',
                        ]),
                        t.setStyleRelation('border-style', [
                            'border-top-style',
                            'border-right-style',
                            'border-bottom-style',
                            'border-left-style',
                        ]),
                        t.setStyleRelation('border-width', [
                            'border-top-width',
                            'border-right-width',
                            'border-bottom-width',
                            'border-left-width',
                        ]),
                        t.setStyleRelation('border-top', ['border-top-color', 'border-top-style', 'border-top-width']),
                        t.setStyleRelation('border-right', [
                            'border-right-color',
                            'border-right-style',
                            'border-right-width',
                        ]),
                        t.setStyleRelation('border-bottom', [
                            'border-bottom-color',
                            'border-bottom-style',
                            'border-bottom-width',
                        ]),
                        t.setStyleRelation('border-left', [
                            'border-left-color',
                            'border-left-style',
                            'border-left-width',
                        ]);
                }
                function Zh(t) {
                    const { color: e, style: o, width: i } = ru(t);
                    return { path: 'border', value: { color: qh(e), style: qh(o), width: qh(i) } };
                }
                function Qh(t) {
                    return (e) => {
                        const { color: o, style: i, width: n } = ru(e),
                            r = {};
                        return (
                            void 0 !== o && (r.color = { [t]: o }),
                            void 0 !== i && (r.style = { [t]: i }),
                            void 0 !== n && (r.width = { [t]: n }),
                            { path: 'border', value: r }
                        );
                    };
                }
                function tu(t) {
                    return (e) => ({ path: 'border', value: eu(e, t) });
                }
                function eu(t, e) {
                    return { [e]: qh(t) };
                }
                function ou(t, e) {
                    return (o) => ({ path: 'border', value: { [t]: { [e]: o } } });
                }
                function iu(t) {
                    return (e, o) => {
                        if (o.border) return nu(o.border, t);
                    };
                }
                function nu(t, e) {
                    const o = {};
                    return (
                        t.width && t.width[e] && (o.width = t.width[e]),
                        t.style && t.style[e] && (o.style = t.style[e]),
                        t.color && t.color[e] && (o.color = t.color[e]),
                        o
                    );
                }
                function ru(t) {
                    const e = {},
                        o = Gh(t);
                    for (const t of o)
                        Mh(t) || /thin|medium|thick/.test(t) ? (e.width = t) : Oh(t) ? (e.style = t) : (e.color = t);
                    return e;
                }
                function su(t) {
                    const e = [];
                    return (
                        e.push(...lu(nu(t, 'top'), 'top')),
                        e.push(...lu(nu(t, 'right'), 'right')),
                        e.push(...lu(nu(t, 'bottom'), 'bottom')),
                        e.push(...lu(nu(t, 'left'), 'left')),
                        e
                    );
                }
                function au(t) {
                    return (e) => lu(e, t);
                }
                function lu(t, e) {
                    const o = [];
                    return (
                        t && void 0 !== t.width && o.push(t.width),
                        t && void 0 !== t.style && o.push(t.style),
                        t && void 0 !== t.color && o.push(t.color),
                        o.length ? [['border-' + e, o.join(' ')]] : []
                    );
                }
                function cu(t) {
                    t.setNormalizer('padding', Kh('padding')),
                        t.setNormalizer('padding-top', (t) => ({ path: 'padding.top', value: t })),
                        t.setNormalizer('padding-right', (t) => ({ path: 'padding.right', value: t })),
                        t.setNormalizer('padding-bottom', (t) => ({ path: 'padding.bottom', value: t })),
                        t.setNormalizer('padding-left', (t) => ({ path: 'padding.left', value: t })),
                        t.setReducer('padding', Uh('padding')),
                        t.setStyleRelation('padding', [
                            'padding-top',
                            'padding-right',
                            'padding-bottom',
                            'padding-left',
                        ]);
                }
                class du extends ec {
                    constructor(t, e) {
                        super(t),
                            (this.view = e),
                            (this._toolbarConfig = Ad(t.config.get('toolbar'))),
                            (this._elementReplacer = new Tc());
                    }
                    get element() {
                        return this.view.element;
                    }
                    init(t) {
                        const e = this.editor,
                            o = this.view,
                            i = e.editing.view,
                            n = o.editable,
                            r = i.document.getRoot();
                        (n.name = r.rootName), o.render();
                        const s = n.element;
                        this.setEditableElement(n.name, s),
                            this.focusTracker.add(s),
                            o.editable.bind('isFocused').to(this.focusTracker),
                            i.attachDomRoot(s),
                            t && this._elementReplacer.replace(t, this.element),
                            this._initPlaceholder(),
                            this._initToolbar(),
                            this.fire('ready');
                    }
                    destroy() {
                        const t = this.view,
                            e = this.editor.editing.view;
                        this._elementReplacer.restore(), e.detachDomRoot(t.editable.name), t.destroy(), super.destroy();
                    }
                    _initToolbar() {
                        const t = this.editor,
                            e = this.view,
                            o = t.editing.view;
                        e.stickyPanel.bind('isActive').to(this.focusTracker, 'isFocused'),
                            (e.stickyPanel.limiterElement = e.element),
                            this._toolbarConfig.viewportTopOffset &&
                                (e.stickyPanel.viewportTopOffset = this._toolbarConfig.viewportTopOffset),
                            e.toolbar.fillFromConfig(this._toolbarConfig, this.componentFactory),
                            (function ({
                                origin: t,
                                originKeystrokeHandler: e,
                                originFocusTracker: o,
                                toolbar: i,
                                beforeFocus: n,
                                afterBlur: r,
                            }) {
                                o.add(i.element),
                                    e.set('Alt+F10', (t, e) => {
                                        o.isFocused && !i.focusTracker.isFocused && (n && n(), i.focus(), e());
                                    }),
                                    i.keystrokes.set('Esc', (e, o) => {
                                        i.focusTracker.isFocused && (t.focus(), r && r(), o());
                                    });
                            })({
                                origin: o,
                                originFocusTracker: this.focusTracker,
                                originKeystrokeHandler: t.keystrokes,
                                toolbar: e.toolbar,
                            });
                    }
                    _initPlaceholder() {
                        const t = this.editor,
                            e = t.editing.view,
                            o = e.document.getRoot(),
                            i = t.sourceElement,
                            n =
                                t.config.get('placeholder') ||
                                (i && 'textarea' === i.tagName.toLowerCase() && i.getAttribute('placeholder'));
                        n &&
                            (function (t) {
                                const { view: e, element: o, text: i, isDirectHost: n = !0, keepOnFocus: r = !1 } = t,
                                    s = e.document;
                                sh.has(s) || (sh.set(s, new Map()), s.registerPostFixer((t) => lh(s, t))),
                                    sh.get(s).set(o, {
                                        text: i,
                                        isDirectHost: n,
                                        keepOnFocus: r,
                                        hostElement: n ? o : null,
                                    }),
                                    e.change((t) => lh(s, t));
                            })({ view: e, element: o, text: n, isDirectHost: !1, keepOnFocus: !0 });
                    }
                }
                o(62);
                class hu extends Fd {
                    constructor(t, e, o = {}) {
                        super(t),
                            (this.stickyPanel = new rh(t)),
                            (this.toolbar = new Td(t, { shouldGroupWhenFull: o.shouldToolbarGroupWhenFull })),
                            (this.editable = new Ld(t, e));
                    }
                    render() {
                        super.render(),
                            this.stickyPanel.content.add(this.toolbar),
                            this.top.add(this.stickyPanel),
                            this.main.add(this.editable);
                    }
                }
                class uu extends Xl {
                    constructor(t, e) {
                        super(e), Uo(t) && (this.sourceElement = t), this.model.document.createRoot();
                        const o = !this.config.get('toolbar.shouldNotGroupWhenFull'),
                            i = new hu(this.locale, this.editing.view, { shouldToolbarGroupWhenFull: o });
                        (this.ui = new du(this, i)),
                            (function (t) {
                                if (!I(t.updateSourceElement))
                                    throw new l.a('attachtoform-missing-elementapi-interface', t);
                                const e = t.sourceElement;
                                if (e && 'textarea' === e.tagName.toLowerCase() && e.form) {
                                    let o;
                                    const i = e.form,
                                        n = () => t.updateSourceElement();
                                    I(i.submit) &&
                                        ((o = i.submit),
                                        (i.submit = () => {
                                            n(), o.apply(i);
                                        })),
                                        i.addEventListener('submit', n),
                                        t.on('destroy', () => {
                                            i.removeEventListener('submit', n), o && (i.submit = o);
                                        });
                                }
                            })(this);
                    }
                    destroy() {
                        return this.sourceElement && this.updateSourceElement(), this.ui.destroy(), super.destroy();
                    }
                    static create(t, e = {}) {
                        return new Promise((o) => {
                            const i = new this(t, e);
                            o(
                                i
                                    .initPlugins()
                                    .then(() => i.ui.init(Uo(t) ? t : null))
                                    .then(() => {
                                        if (!Uo(t) && e.initialData) throw new l.a('editor-create-initial-data', null);
                                        const o =
                                            e.initialData ||
                                            (function (t) {
                                                return Uo(t)
                                                    ? ((e = t),
                                                      e instanceof HTMLTextAreaElement ? e.value : e.innerHTML)
                                                    : t;
                                                var e;
                                            })(t);
                                        return i.data.init(o);
                                    })
                                    .then(() => i.fire('ready'))
                                    .then(() => i),
                            );
                        });
                    }
                }
                Kt(uu, oc), Kt(uu, ic);
                const fu = ['left', 'right', 'center', 'justify'];
                function mu(t) {
                    return fu.includes(t);
                }
                function gu(t, e) {
                    return 'rtl' == e.contentLanguageDirection ? 'right' === t : 'left' === t;
                }
                class pu extends Yt {
                    refresh() {
                        const t = this.editor.locale,
                            e = Ic(this.editor.model.document.selection.getSelectedBlocks());
                        (this.isEnabled = !!e && this._canBeAligned(e)),
                            this.isEnabled && e.hasAttribute('alignment')
                                ? (this.value = e.getAttribute('alignment'))
                                : (this.value = 'rtl' === t.contentLanguageDirection ? 'right' : 'left');
                    }
                    execute(t = {}) {
                        const e = this.editor,
                            o = e.locale,
                            i = e.model,
                            n = i.document,
                            r = t.value;
                        i.change((t) => {
                            const e = Array.from(n.selection.getSelectedBlocks()).filter((t) => this._canBeAligned(t)),
                                i = e[0].getAttribute('alignment');
                            gu(r, o) || i === r || !r
                                ? (function (t, e) {
                                      for (const o of t) e.removeAttribute('alignment', o);
                                  })(e, t)
                                : (function (t, e, o) {
                                      for (const i of t) e.setAttribute('alignment', o, i);
                                  })(e, t, r);
                        });
                    }
                    _canBeAligned(t) {
                        return this.editor.model.schema.checkAttribute(t, 'alignment');
                    }
                }
                class bu extends Gt {
                    static get pluginName() {
                        return 'AlignmentEditing';
                    }
                    constructor(t) {
                        super(t), t.config.define('alignment', { options: [...fu] });
                    }
                    init() {
                        const t = this.editor,
                            e = t.locale,
                            o = t.model.schema,
                            i = t.config.get('alignment.options').filter(mu);
                        o.extend('$block', { allowAttributes: 'alignment' }),
                            t.model.schema.setAttributeProperties('alignment', { isFormatting: !0 });
                        const n = (function (t) {
                            const e = { model: { key: 'alignment', values: t.slice() }, view: {} };
                            for (const o of t) e.view[o] = { key: 'style', value: { 'text-align': o } };
                            return e;
                        })(i.filter((t) => !gu(t, e)));
                        t.conversion.attributeToAttribute(n), t.commands.add('alignment', new pu(t));
                    }
                }
                const wu = new Map([
                    ['left', fc],
                    ['right', gc],
                    ['center', mc],
                    ['justify', pc],
                ]);
                class ku extends Gt {
                    get localizedOptionTitles() {
                        const t = this.editor.t;
                        return {
                            left: t('Align left'),
                            right: t('Align right'),
                            center: t('Align center'),
                            justify: t('Justify'),
                        };
                    }
                    static get pluginName() {
                        return 'AlignmentUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.ui.componentFactory,
                            o = t.t,
                            i = t.config.get('alignment.options');
                        i.filter(mu).forEach((t) => this._addButton(t)),
                            e.add('alignment', (t) => {
                                const n = Od(t),
                                    r = i.map((t) => e.create('alignment:' + t));
                                zd(n, r),
                                    n.buttonView.set({ label: o('Text alignment'), tooltip: !0 }),
                                    (n.toolbarView.isVertical = !0),
                                    (n.toolbarView.ariaLabel = o('Text alignment toolbar')),
                                    n.extendTemplate({ attributes: { class: 'ck-alignment-dropdown' } });
                                const s = 'rtl' === t.contentLanguageDirection ? wu.get('right') : wu.get('left');
                                return (
                                    n.buttonView.bind('icon').toMany(r, 'isOn', (...t) => {
                                        const e = t.findIndex((t) => t);
                                        return e < 0 ? s : r[e].icon;
                                    }),
                                    n.bind('isEnabled').toMany(r, 'isEnabled', (...t) => t.some((t) => t)),
                                    n
                                );
                            });
                    }
                    _addButton(t) {
                        const e = this.editor;
                        e.ui.componentFactory.add('alignment:' + t, (o) => {
                            const i = e.commands.get('alignment'),
                                n = new rd(o);
                            return (
                                n.set({
                                    label: this.localizedOptionTitles[t],
                                    icon: wu.get(t),
                                    tooltip: !0,
                                    isToggleable: !0,
                                }),
                                n.bind('isEnabled').to(i),
                                n.bind('isOn').to(i, 'value', (e) => e === t),
                                this.listenTo(n, 'execute', () => {
                                    e.execute('alignment', { value: t }), e.editing.view.focus();
                                }),
                                n
                            );
                        });
                    }
                }
                class _u extends Yt {
                    constructor(t, e) {
                        super(t), (this.attributeKey = e);
                    }
                    refresh() {
                        const t = this.editor.model,
                            e = t.document;
                        (this.value = this._getValueFromFirstAllowedNode()),
                            (this.isEnabled = t.schema.checkAttributeInSelection(e.selection, this.attributeKey));
                    }
                    execute(t = {}) {
                        const e = this.editor.model,
                            o = e.document.selection,
                            i = void 0 === t.forceValue ? !this.value : t.forceValue;
                        e.change((t) => {
                            if (o.isCollapsed)
                                i
                                    ? t.setSelectionAttribute(this.attributeKey, !0)
                                    : t.removeSelectionAttribute(this.attributeKey);
                            else {
                                const n = e.schema.getValidRanges(o.getRanges(), this.attributeKey);
                                for (const e of n)
                                    i
                                        ? t.setAttribute(this.attributeKey, i, e)
                                        : t.removeAttribute(this.attributeKey, e);
                            }
                        });
                    }
                    _getValueFromFirstAllowedNode() {
                        const t = this.editor.model,
                            e = t.schema,
                            o = t.document.selection;
                        if (o.isCollapsed) return o.hasAttribute(this.attributeKey);
                        for (const t of o.getRanges())
                            for (const o of t.getItems())
                                if (e.checkAttribute(o, this.attributeKey)) return o.hasAttribute(this.attributeKey);
                        return !1;
                    }
                }
                class vu extends Gt {
                    static get pluginName() {
                        return 'BoldEditing';
                    }
                    init() {
                        const t = this.editor;
                        t.model.schema.extend('$text', { allowAttributes: 'bold' }),
                            t.model.schema.setAttributeProperties('bold', { isFormatting: !0, copyOnEnter: !0 }),
                            t.conversion.attributeToElement({
                                model: 'bold',
                                view: 'strong',
                                upcastAlso: [
                                    'b',
                                    (t) => {
                                        const e = t.getStyle('font-weight');
                                        return e
                                            ? 'bold' == e || Number(e) >= 600
                                                ? { name: !0, styles: ['font-weight'] }
                                                : void 0
                                            : null;
                                    },
                                ],
                            }),
                            t.commands.add('bold', new _u(t, 'bold')),
                            t.keystrokes.set('CTRL+B', 'bold');
                    }
                }
                class yu extends Gt {
                    static get pluginName() {
                        return 'BoldUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.t;
                        t.ui.componentFactory.add('bold', (o) => {
                            const i = t.commands.get('bold'),
                                n = new rd(o);
                            return (
                                n.set({
                                    label: e('Bold'),
                                    icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z"/></svg>',
                                    keystroke: 'CTRL+B',
                                    tooltip: !0,
                                    isToggleable: !0,
                                }),
                                n.bind('isOn', 'isEnabled').to(i, 'value', 'isEnabled'),
                                this.listenTo(n, 'execute', () => {
                                    t.execute('bold'), t.editing.view.focus();
                                }),
                                n
                            );
                        });
                    }
                }
                class xu extends Gt {
                    static get pluginName() {
                        return 'ItalicEditing';
                    }
                    init() {
                        const t = this.editor;
                        t.model.schema.extend('$text', { allowAttributes: 'italic' }),
                            t.model.schema.setAttributeProperties('italic', { isFormatting: !0, copyOnEnter: !0 }),
                            t.conversion.attributeToElement({
                                model: 'italic',
                                view: 'i',
                                upcastAlso: ['em', { styles: { 'font-style': 'italic' } }],
                            }),
                            t.commands.add('italic', new _u(t, 'italic')),
                            t.keystrokes.set('CTRL+I', 'italic');
                    }
                }
                class Cu extends Gt {
                    static get pluginName() {
                        return 'ItalicUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.t;
                        t.ui.componentFactory.add('italic', (o) => {
                            const i = t.commands.get('italic'),
                                n = new rd(o);
                            return (
                                n.set({
                                    label: e('Italic'),
                                    icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.586 14.633l.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z"/></svg>',
                                    keystroke: 'CTRL+I',
                                    tooltip: !0,
                                    isToggleable: !0,
                                }),
                                n.bind('isOn', 'isEnabled').to(i, 'value', 'isEnabled'),
                                this.listenTo(n, 'execute', () => {
                                    t.execute('italic'), t.editing.view.focus();
                                }),
                                n
                            );
                        });
                    }
                }
                class Au extends Gt {
                    static get pluginName() {
                        return 'StrikethroughEditing';
                    }
                    init() {
                        const t = this.editor;
                        t.model.schema.extend('$text', { allowAttributes: 'strikethrough' }),
                            t.model.schema.setAttributeProperties('strikethrough', {
                                isFormatting: !0,
                                copyOnEnter: !0,
                            }),
                            t.conversion.attributeToElement({
                                model: 'strikethrough',
                                view: 's',
                                upcastAlso: ['del', 'strike', { styles: { 'text-decoration': 'line-through' } }],
                            }),
                            t.commands.add('strikethrough', new _u(t, 'strikethrough')),
                            t.keystrokes.set('CTRL+SHIFT+X', 'strikethrough');
                    }
                }
                class Tu extends Gt {
                    static get pluginName() {
                        return 'StrikethroughUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.t;
                        t.ui.componentFactory.add('strikethrough', (o) => {
                            const i = t.commands.get('strikethrough'),
                                n = new rd(o);
                            return (
                                n.set({
                                    label: e('Strikethrough'),
                                    icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7 16.4c-.8-.4-1.5-.9-2.2-1.5a.6.6 0 0 1-.2-.5l.3-.6h1c1 1.2 2.1 1.7 3.7 1.7 1 0 1.8-.3 2.3-.6.6-.4.6-1.2.6-1.3.2-1.2-.9-2.1-.9-2.1h2.1c.3.7.4 1.2.4 1.7v.8l-.6 1.2c-.6.8-1.1 1-1.6 1.2a6 6 0 0 1-2.4.6c-1 0-1.8-.3-2.5-.6zM6.8 9L6 8.3c-.4-.5-.5-.8-.5-1.6 0-.7.1-1.3.5-1.8.4-.6 1-1 1.6-1.3a6.3 6.3 0 0 1 4.7 0 4 4 0 0 1 1.7 1l.3.7c0 .1.2.4-.2.7-.4.2-.9.1-1 0a3 3 0 0 0-1.2-1c-.4-.2-1-.3-2-.4-.7 0-1.4.2-2 .6-.8.6-1 .8-1 1.5 0 .8.5 1 1.2 1.5.6.4 1.1.7 1.9 1H6.8z"/><path d="M3 10.5V9h14v1.5z"/></svg>',
                                    keystroke: 'CTRL+SHIFT+X',
                                    tooltip: !0,
                                    isToggleable: !0,
                                }),
                                n.bind('isOn', 'isEnabled').to(i, 'value', 'isEnabled'),
                                this.listenTo(n, 'execute', () => {
                                    t.execute('strikethrough'), t.editing.view.focus();
                                }),
                                n
                            );
                        });
                    }
                }
                class Pu extends Gt {
                    static get pluginName() {
                        return 'SubscriptEditing';
                    }
                    init() {
                        const t = this.editor;
                        t.model.schema.extend('$text', { allowAttributes: 'subscript' }),
                            t.model.schema.setAttributeProperties('subscript', { isFormatting: !0, copyOnEnter: !0 }),
                            t.conversion.attributeToElement({
                                model: 'subscript',
                                view: 'sub',
                                upcastAlso: [{ styles: { 'vertical-align': 'sub' } }],
                            }),
                            t.commands.add('subscript', new _u(t, 'subscript'));
                    }
                }
                class Su extends Gt {
                    static get pluginName() {
                        return 'SubscriptUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.t;
                        t.ui.componentFactory.add('subscript', (o) => {
                            const i = t.commands.get('subscript'),
                                n = new rd(o);
                            return (
                                n.set({
                                    label: e('Subscript'),
                                    icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7.03 10.349l3.818-3.819a.8.8 0 1 1 1.132 1.132L8.16 11.48l3.819 3.818a.8.8 0 1 1-1.132 1.132L7.03 12.61l-3.818 3.82a.8.8 0 1 1-1.132-1.132L5.9 11.48 2.08 7.662A.8.8 0 1 1 3.212 6.53l3.818 3.82zm8.147 7.829h2.549c.254 0 .447.05.58.152a.49.49 0 0 1 .201.413.54.54 0 0 1-.159.393c-.105.108-.266.162-.48.162h-3.594c-.245 0-.435-.066-.572-.197a.621.621 0 0 1-.205-.463c0-.114.044-.265.132-.453a1.62 1.62 0 0 1 .288-.444c.433-.436.824-.81 1.172-1.122.348-.312.597-.517.747-.615.267-.183.49-.368.667-.553.177-.185.312-.375.405-.57.093-.194.139-.384.139-.57a1.008 1.008 0 0 0-.554-.917 1.197 1.197 0 0 0-.56-.133c-.426 0-.761.182-1.005.546a2.332 2.332 0 0 0-.164.39 1.609 1.609 0 0 1-.258.488c-.096.114-.237.17-.423.17a.558.558 0 0 1-.405-.156.568.568 0 0 1-.161-.427c0-.218.05-.446.151-.683.101-.238.252-.453.452-.646s.454-.349.762-.467a2.998 2.998 0 0 1 1.081-.178c.498 0 .923.076 1.274.228a1.916 1.916 0 0 1 1.004 1.032 1.984 1.984 0 0 1-.156 1.794c-.2.32-.405.572-.613.754-.208.182-.558.468-1.048.857-.49.39-.826.691-1.008.906a2.703 2.703 0 0 0-.24.309z"/></svg>',
                                    tooltip: !0,
                                    isToggleable: !0,
                                }),
                                n.bind('isOn', 'isEnabled').to(i, 'value', 'isEnabled'),
                                this.listenTo(n, 'execute', () => {
                                    t.execute('subscript'), t.editing.view.focus();
                                }),
                                n
                            );
                        });
                    }
                }
                class Eu extends Gt {
                    static get pluginName() {
                        return 'SuperscriptEditing';
                    }
                    init() {
                        const t = this.editor;
                        t.model.schema.extend('$text', { allowAttributes: 'superscript' }),
                            t.model.schema.setAttributeProperties('superscript', { isFormatting: !0, copyOnEnter: !0 }),
                            t.conversion.attributeToElement({
                                model: 'superscript',
                                view: 'sup',
                                upcastAlso: [{ styles: { 'vertical-align': 'super' } }],
                            }),
                            t.commands.add('superscript', new _u(t, 'superscript'));
                    }
                }
                class Ru extends Gt {
                    static get pluginName() {
                        return 'SuperscriptUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.t;
                        t.ui.componentFactory.add('superscript', (o) => {
                            const i = t.commands.get('superscript'),
                                n = new rd(o);
                            return (
                                n.set({
                                    label: e('Superscript'),
                                    icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.677 8.678h2.549c.254 0 .447.05.58.152a.49.49 0 0 1 .201.413.54.54 0 0 1-.159.393c-.105.108-.266.162-.48.162h-3.594c-.245 0-.435-.066-.572-.197a.621.621 0 0 1-.205-.463c0-.114.044-.265.132-.453a1.62 1.62 0 0 1 .288-.444c.433-.436.824-.81 1.172-1.122.348-.312.597-.517.747-.615.267-.183.49-.368.667-.553.177-.185.312-.375.405-.57.093-.194.139-.384.139-.57a1.008 1.008 0 0 0-.554-.917 1.197 1.197 0 0 0-.56-.133c-.426 0-.761.182-1.005.546a2.332 2.332 0 0 0-.164.39 1.609 1.609 0 0 1-.258.488c-.096.114-.237.17-.423.17a.558.558 0 0 1-.405-.156.568.568 0 0 1-.161-.427c0-.218.05-.446.151-.683.101-.238.252-.453.452-.646s.454-.349.762-.467a2.998 2.998 0 0 1 1.081-.178c.498 0 .923.076 1.274.228a1.916 1.916 0 0 1 1.004 1.032 1.984 1.984 0 0 1-.156 1.794c-.2.32-.405.572-.613.754-.208.182-.558.468-1.048.857-.49.39-.826.691-1.008.906a2.703 2.703 0 0 0-.24.309zM7.03 10.349l3.818-3.819a.8.8 0 1 1 1.132 1.132L8.16 11.48l3.819 3.818a.8.8 0 1 1-1.132 1.132L7.03 12.61l-3.818 3.82a.8.8 0 1 1-1.132-1.132L5.9 11.48 2.08 7.662A.8.8 0 1 1 3.212 6.53l3.818 3.82z"/></svg>',
                                    tooltip: !0,
                                    isToggleable: !0,
                                }),
                                n.bind('isOn', 'isEnabled').to(i, 'value', 'isEnabled'),
                                this.listenTo(n, 'execute', () => {
                                    t.execute('superscript'), t.editing.view.focus();
                                }),
                                n
                            );
                        });
                    }
                }
                class Iu extends Gt {
                    static get pluginName() {
                        return 'UnderlineEditing';
                    }
                    init() {
                        const t = this.editor;
                        t.model.schema.extend('$text', { allowAttributes: 'underline' }),
                            t.model.schema.setAttributeProperties('underline', { isFormatting: !0, copyOnEnter: !0 }),
                            t.conversion.attributeToElement({
                                model: 'underline',
                                view: 'u',
                                upcastAlso: { styles: { 'text-decoration': 'underline' } },
                            }),
                            t.commands.add('underline', new _u(t, 'underline')),
                            t.keystrokes.set('CTRL+U', 'underline');
                    }
                }
                class Vu extends Gt {
                    static get pluginName() {
                        return 'UnderlineUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.t;
                        t.ui.componentFactory.add('underline', (o) => {
                            const i = t.commands.get('underline'),
                                n = new rd(o);
                            return (
                                n.set({
                                    label: e('Underline'),
                                    icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M3 18v-1.5h14V18zm2.2-8V3.6c0-.4.4-.6.8-.6.3 0 .7.2.7.6v6.2c0 2 1.3 2.8 3.2 2.8 1.9 0 3.4-.9 3.4-2.9V3.6c0-.3.4-.5.8-.5.3 0 .7.2.7.5V10c0 2.7-2.2 4-4.9 4-2.6 0-4.7-1.2-4.7-4z"/></svg>',
                                    keystroke: 'CTRL+U',
                                    tooltip: !0,
                                    isToggleable: !0,
                                }),
                                n.bind('isOn', 'isEnabled').to(i, 'value', 'isEnabled'),
                                this.listenTo(n, 'execute', () => {
                                    t.execute('underline'), t.editing.view.focus();
                                }),
                                n
                            );
                        });
                    }
                }
                class Ou {
                    constructor(t) {
                        (this.files = (function (t) {
                            const e = t.files ? Array.from(t.files) : [],
                                o = t.items ? Array.from(t.items) : [];
                            if (e.length) return e;
                            return o.filter((t) => 'file' === t.kind).map((t) => t.getAsFile());
                        })(t)),
                            (this._native = t);
                    }
                    get types() {
                        return this._native.types;
                    }
                    getData(t) {
                        return this._native.getData(t);
                    }
                    setData(t, e) {
                        this._native.setData(t, e);
                    }
                }
                class zu extends Wr {
                    constructor(t) {
                        super(t);
                        const e = this.document;
                        function o(t, o) {
                            o.preventDefault();
                            const i = o.dropRange ? [o.dropRange] : Array.from(e.selection.getRanges()),
                                r = new n(e, 'clipboardInput');
                            e.fire(r, { dataTransfer: o.dataTransfer, targetRanges: i }),
                                r.stop.called && o.stopPropagation();
                        }
                        (this.domEventType = ['paste', 'copy', 'cut', 'drop', 'dragover']),
                            this.listenTo(e, 'paste', o, { priority: 'low' }),
                            this.listenTo(e, 'drop', o, { priority: 'low' });
                    }
                    onDomEvent(t) {
                        const e = { dataTransfer: new Ou(t.clipboardData ? t.clipboardData : t.dataTransfer) };
                        'drop' == t.type &&
                            (e.dropRange = (function (t, e) {
                                const o = e.target.ownerDocument,
                                    i = e.clientX,
                                    n = e.clientY;
                                let r;
                                o.caretRangeFromPoint && o.caretRangeFromPoint(i, n)
                                    ? (r = o.caretRangeFromPoint(i, n))
                                    : e.rangeParent &&
                                      ((r = o.createRange()), r.setStart(e.rangeParent, e.rangeOffset), r.collapse(!0));
                                return r ? t.domConverter.domRangeToView(r) : t.document.selection.getFirstRange();
                            })(this.view, t)),
                            this.fire(t.type, t, e);
                    }
                }
                class Mu extends Gt {
                    static get pluginName() {
                        return 'PastePlainText';
                    }
                    init() {
                        const t = this.editor.editing.view,
                            e = t.document;
                        let o = !1;
                        t.addObserver(zu),
                            this.listenTo(e, 'keydown', (t, e) => {
                                o = e.shiftKey;
                            }),
                            this.listenTo(
                                e,
                                'clipboardInput',
                                (t, e) => {
                                    o && (e.asPlainText = !0);
                                },
                                { priority: 'high' },
                            );
                    }
                }
                const Nu = ['figcaption', 'li'];
                class Bu extends Gt {
                    static get pluginName() {
                        return 'Clipboard';
                    }
                    static get requires() {
                        return [Mu];
                    }
                    init() {
                        const t = this.editor,
                            e = t.model.document,
                            o = t.editing.view,
                            i = o.document;
                        function r(o, n) {
                            const r = n.dataTransfer;
                            n.preventDefault();
                            const s = t.data.toView(t.model.getSelectedContent(e.selection));
                            i.fire('clipboardOutput', { dataTransfer: r, content: s, method: o.name });
                        }
                        o.addObserver(zu),
                            this.listenTo(
                                i,
                                'clipboardInput',
                                (e) => {
                                    t.isReadOnly && e.stop();
                                },
                                { priority: 'highest' },
                            ),
                            this.listenTo(
                                i,
                                'clipboardInput',
                                (t, e) => {
                                    const i = e.dataTransfer;
                                    let r = '';
                                    var s;
                                    i.getData('text/html')
                                        ? (r = (function (t) {
                                              return t.replace(
                                                  /<span(?: class="Apple-converted-space"|)>(\s+)<\/span>/g,
                                                  (t, e) => (1 == e.length ? ' ' : e),
                                              );
                                          })(i.getData('text/html')))
                                        : i.getData('text/plain') &&
                                          (((s = (s = i.getData('text/plain'))
                                              .replace(/</g, '&lt;')
                                              .replace(/>/g, '&gt;')
                                              .replace(/\r?\n\r?\n/g, '</p><p>')
                                              .replace(/\r?\n/g, '<br>')
                                              .replace(/^\s/, '&nbsp;')
                                              .replace(/\s$/, '&nbsp;')
                                              .replace(/\s\s/g, ' &nbsp;')).includes('</p><p>') ||
                                              s.includes('<br>')) &&
                                              (s = `<p>${s}</p>`),
                                          (r = s)),
                                        (r = this.editor.data.htmlProcessor.toView(r));
                                    const a = new n(this, 'inputTransformation');
                                    this.fire(a, { content: r, dataTransfer: i, asPlainText: e.asPlainText }),
                                        a.stop.called && t.stop(),
                                        o.scrollToTheSelection();
                                },
                                { priority: 'low' },
                            ),
                            this.listenTo(
                                this,
                                'inputTransformation',
                                (t, e) => {
                                    if (!e.content.isEmpty) {
                                        const o = this.editor.data,
                                            i = this.editor.model,
                                            n = o.toModel(e.content, '$clipboardHolder');
                                        if (0 == n.childCount) return;
                                        i.change((t) => {
                                            const o = i.document.selection;
                                            if (
                                                e.asPlainText ||
                                                (function (t, e) {
                                                    if (t.childCount > 1) return !1;
                                                    const o = t.getChild(0);
                                                    if (e.isObject(o)) return !1;
                                                    return 0 == [...o.getAttributeKeys()].length;
                                                })(n, i.schema)
                                            ) {
                                                const e = Array.from(o.getAttributes()).filter(
                                                    ([t]) => i.schema.getAttributeProperties(t).isFormatting,
                                                );
                                                o.isCollapsed || i.deleteContent(o, { doNotAutoparagraph: !0 }),
                                                    e.push(...o.getAttributes());
                                                const r = t.createRangeIn(n);
                                                for (const o of r.getItems())
                                                    (o.is('$text') || o.is('$textProxy')) && t.setAttributes(e, o);
                                            }
                                            i.insertContent(n);
                                        }),
                                            t.stop();
                                    }
                                },
                                { priority: 'low' },
                            ),
                            this.listenTo(i, 'copy', r, { priority: 'low' }),
                            this.listenTo(
                                i,
                                'cut',
                                (e, o) => {
                                    t.isReadOnly ? o.preventDefault() : r(e, o);
                                },
                                { priority: 'low' },
                            ),
                            this.listenTo(
                                i,
                                'clipboardOutput',
                                (o, i) => {
                                    i.content.isEmpty ||
                                        (i.dataTransfer.setData(
                                            'text/html',
                                            this.editor.data.htmlProcessor.toData(i.content),
                                        ),
                                        i.dataTransfer.setData(
                                            'text/plain',
                                            (function t(e) {
                                                let o = '';
                                                if (e.is('$text') || e.is('$textProxy')) o = e.data;
                                                else if (e.is('element', 'img') && e.hasAttribute('alt'))
                                                    o = e.getAttribute('alt');
                                                else if (e.is('element', 'br')) o = '\n';
                                                else {
                                                    let i = null;
                                                    for (const n of e.getChildren()) {
                                                        const e = t(n);
                                                        i &&
                                                            (i.is('containerElement') || n.is('containerElement')) &&
                                                            (Nu.includes(i.name) || Nu.includes(n.name)
                                                                ? (o += '\n')
                                                                : (o += '\n\n')),
                                                            (o += e),
                                                            (i = n);
                                                    }
                                                }
                                                return o;
                                            })(i.content),
                                        )),
                                        'cut' == i.method && t.model.deleteContent(e.selection);
                                },
                                { priority: 'low' },
                            );
                    }
                }
                function* Fu(t, e) {
                    for (const o of e) o && t.getAttributeProperties(o[0]).copyOnEnter && (yield o);
                }
                class Du extends Yt {
                    execute() {
                        const t = this.editor.model,
                            e = t.document;
                        t.change((o) => {
                            !(function (t, e, o, i) {
                                const n = o.isCollapsed,
                                    r = o.getFirstRange(),
                                    s = r.start.parent,
                                    a = r.end.parent;
                                if (i.isLimit(s) || i.isLimit(a)) return void (n || s != a || t.deleteContent(o));
                                if (n) {
                                    const t = Fu(e.model.schema, o.getAttributes());
                                    Lu(e, r.start), e.setSelectionAttribute(t);
                                } else {
                                    const i = !(r.start.isAtStart && r.end.isAtEnd),
                                        n = s == a;
                                    t.deleteContent(o, { leaveUnmerged: i }),
                                        i && (n ? Lu(e, o.focus) : e.setSelection(a, 0));
                                }
                            })(this.editor.model, o, e.selection, t.schema),
                                this.fire('afterExecute', { writer: o });
                        });
                    }
                }
                function Lu(t, e) {
                    t.split(e), t.setSelection(e.parent.nextSibling, 0);
                }
                class Hu extends yr {
                    constructor(t) {
                        super(t);
                        const e = this.document;
                        e.on('keydown', (t, o) => {
                            if (this.isEnabled && o.keyCode == vn.enter) {
                                let i;
                                e.once('enter', (t) => (i = t), { priority: 'highest' }),
                                    e.fire('enter', new jr(e, o.domEvent, { isSoft: o.shiftKey })),
                                    i && i.stop.called && t.stop();
                            }
                        });
                    }
                    observe() {}
                }
                class ju extends Gt {
                    static get pluginName() {
                        return 'Enter';
                    }
                    init() {
                        const t = this.editor,
                            e = t.editing.view,
                            o = e.document;
                        e.addObserver(Hu),
                            t.commands.add('enter', new Du(t)),
                            this.listenTo(
                                o,
                                'enter',
                                (o, i) => {
                                    i.preventDefault(), i.isSoft || (t.execute('enter'), e.scrollToTheSelection());
                                },
                                { priority: 'low' },
                            );
                    }
                }
                class Wu extends Yt {
                    execute() {
                        const t = this.editor.model,
                            e = t.document;
                        t.change((o) => {
                            !(function (t, e, o) {
                                const i = o.isCollapsed,
                                    n = o.getFirstRange(),
                                    r = n.start.parent,
                                    s = n.end.parent,
                                    a = r == s;
                                if (i) {
                                    const i = Fu(t.schema, o.getAttributes());
                                    qu(t, e, n.end),
                                        e.removeSelectionAttribute(o.getAttributeKeys()),
                                        e.setSelectionAttribute(i);
                                } else {
                                    const i = !(n.start.isAtStart && n.end.isAtEnd);
                                    t.deleteContent(o, { leaveUnmerged: i }),
                                        a ? qu(t, e, o.focus) : i && e.setSelection(s, 0);
                                }
                            })(t, o, e.selection),
                                this.fire('afterExecute', { writer: o });
                        });
                    }
                    refresh() {
                        const t = this.editor.model,
                            e = t.document;
                        this.isEnabled = (function (t, e) {
                            if (e.rangeCount > 1) return !1;
                            const o = e.anchor;
                            if (!o || !t.checkChild(o, 'softBreak')) return !1;
                            const i = e.getFirstRange(),
                                n = i.start.parent,
                                r = i.end.parent;
                            if ((Uu(n, t) || Uu(r, t)) && n !== r) return !1;
                            return !0;
                        })(t.schema, e.selection);
                    }
                }
                function qu(t, e, o) {
                    const i = e.createElement('softBreak');
                    t.insertContent(i, o), e.setSelection(i, 'after');
                }
                function Uu(t, e) {
                    return !t.is('rootElement') && (e.isLimit(t) || Uu(t.parent, e));
                }
                class $u extends Gt {
                    static get pluginName() {
                        return 'ShiftEnter';
                    }
                    init() {
                        const t = this.editor,
                            e = t.model.schema,
                            o = t.conversion,
                            i = t.editing.view,
                            n = i.document;
                        e.register('softBreak', { allowWhere: '$text', isInline: !0 }),
                            o.for('upcast').elementToElement({ model: 'softBreak', view: 'br' }),
                            o.for('downcast').elementToElement({
                                model: 'softBreak',
                                view: (t, { writer: e }) => e.createEmptyElement('br'),
                            }),
                            i.addObserver(Hu),
                            t.commands.add('shiftEnter', new Wu(t)),
                            this.listenTo(
                                n,
                                'enter',
                                (e, o) => {
                                    o.preventDefault(), o.isSoft && (t.execute('shiftEnter'), i.scrollToTheSelection());
                                },
                                { priority: 'low' },
                            );
                    }
                }
                class Ku extends Yt {
                    execute() {
                        const t = this.editor.model,
                            e = t.document.selection;
                        let o = t.schema.getLimitElement(e);
                        if (e.containsEntireContent(o) || !Gu(t.schema, o))
                            do {
                                if (((o = o.parent), !o)) return;
                            } while (!Gu(t.schema, o));
                        t.change((t) => {
                            t.setSelection(o, 'in');
                        });
                    }
                }
                function Gu(t, e) {
                    return t.isLimit(e) && (t.checkChild(e, '$text') || t.checkChild(e, 'paragraph'));
                }
                const Ju = Cn('Ctrl+A');
                class Yu extends Gt {
                    static get pluginName() {
                        return 'SelectAllEditing';
                    }
                    init() {
                        const t = this.editor,
                            e = t.editing.view.document;
                        t.commands.add('selectAll', new Ku(t)),
                            this.listenTo(e, 'keydown', (e, o) => {
                                xn(o) === Ju && (t.execute('selectAll'), o.preventDefault());
                            });
                    }
                }
                class Xu extends Gt {
                    static get pluginName() {
                        return 'SelectAllUI';
                    }
                    init() {
                        const t = this.editor;
                        t.ui.componentFactory.add('selectAll', (e) => {
                            const o = t.commands.get('selectAll'),
                                i = new rd(e),
                                n = e.t;
                            return (
                                i.set({
                                    label: n('Select all'),
                                    icon: '<svg width="20" height="20" xmlns="http://www.w3.org/2000/svg"><path d="M.75 15.5a.75.75 0 0 1 .75.75V18l.008.09A.5.5 0 0 0 2 18.5h1.75a.75.75 0 1 1 0 1.5H1.5l-.144-.007a1.5 1.5 0 0 1-1.35-1.349L0 18.5v-2.25a.75.75 0 0 1 .75-.75zm18.5 0a.75.75 0 0 1 .75.75v2.25l-.007.144a1.5 1.5 0 0 1-1.349 1.35L18.5 20h-2.25a.75.75 0 1 1 0-1.5H18a.5.5 0 0 0 .492-.41L18.5 18v-1.75a.75.75 0 0 1 .75-.75zm-10.45 3c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2v-1.1c0-.11.09-.2.2-.2h1.6zm4 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2h-1.6a.2.2 0 0 1-.2-.2v-1.1c0-.11.09-.2.2-.2h1.6zm.45-5.5a.75.75 0 1 1 0 1.5h-8.5a.75.75 0 1 1 0-1.5h8.5zM1.3 11c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2H.2a.2.2 0 0 1-.2-.2v-1.6c0-.11.09-.2.2-.2h1.1zm18.5 0c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2h-1.1a.2.2 0 0 1-.2-.2v-1.6c0-.11.09-.2.2-.2h1.1zm-4.55-2a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM1.3 7c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2H.2a.2.2 0 0 1-.2-.2V7.2c0-.11.09-.2.2-.2h1.1zm18.5 0c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2h-1.1a.2.2 0 0 1-.2-.2V7.2c0-.11.09-.2.2-.2h1.1zm-4.55-2a.75.75 0 1 1 0 1.5h-2.5a.75.75 0 1 1 0-1.5h2.5zm-5 0a.75.75 0 1 1 0 1.5h-5.5a.75.75 0 0 1 0-1.5h5.5zm-6.5-5a.75.75 0 0 1 0 1.5H2a.5.5 0 0 0-.492.41L1.5 2v1.75a.75.75 0 0 1-1.5 0V1.5l.007-.144A1.5 1.5 0 0 1 1.356.006L1.5 0h2.25zM18.5 0l.144.007a1.5 1.5 0 0 1 1.35 1.349L20 1.5v2.25a.75.75 0 1 1-1.5 0V2l-.008-.09A.5.5 0 0 0 18 1.5h-1.75a.75.75 0 1 1 0-1.5h2.25zM8.8 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2V.2c0-.11.09-.2.2-.2h1.6zm4 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2h-1.6a.2.2 0 0 1-.2-.2V.2c0-.11.09-.2.2-.2h1.6z"/></svg>',
                                    keystroke: 'Ctrl+A',
                                    tooltip: !0,
                                }),
                                i.bind('isOn', 'isEnabled').to(o, 'value', 'isEnabled'),
                                this.listenTo(i, 'execute', () => {
                                    t.execute('selectAll'), t.editing.view.focus();
                                }),
                                i
                            );
                        });
                    }
                }
                class Zu extends Gt {
                    static get requires() {
                        return [Yu, Xu];
                    }
                    static get pluginName() {
                        return 'SelectAll';
                    }
                }
                class Qu {
                    constructor(t, e = 20) {
                        (this.model = t),
                            (this.size = 0),
                            (this.limit = e),
                            (this.isLocked = !1),
                            (this._changeCallback = (t, e) => {
                                'transparent' != e.type && e !== this._batch && this._reset(!0);
                            }),
                            (this._selectionChangeCallback = () => {
                                this._reset();
                            }),
                            this.model.document.on('change', this._changeCallback),
                            this.model.document.selection.on('change:range', this._selectionChangeCallback),
                            this.model.document.selection.on('change:attribute', this._selectionChangeCallback);
                    }
                    get batch() {
                        return this._batch || (this._batch = this.model.createBatch()), this._batch;
                    }
                    input(t) {
                        (this.size += t), this.size >= this.limit && this._reset(!0);
                    }
                    lock() {
                        this.isLocked = !0;
                    }
                    unlock() {
                        this.isLocked = !1;
                    }
                    destroy() {
                        this.model.document.off('change', this._changeCallback),
                            this.model.document.selection.off('change:range', this._selectionChangeCallback),
                            this.model.document.selection.off('change:attribute', this._selectionChangeCallback);
                    }
                    _reset(t) {
                        (this.isLocked && !t) || ((this._batch = null), (this.size = 0));
                    }
                }
                class tf extends Yt {
                    constructor(t, e) {
                        super(t), (this._buffer = new Qu(t.model, e)), (this._batches = new WeakSet());
                    }
                    get buffer() {
                        return this._buffer;
                    }
                    destroy() {
                        super.destroy(), this._buffer.destroy();
                    }
                    execute(t = {}) {
                        const e = this.editor.model,
                            o = e.document,
                            i = t.text || '',
                            n = i.length,
                            r = t.range ? e.createSelection(t.range) : o.selection,
                            s = t.resultRange;
                        e.enqueueChange(this._buffer.batch, (t) => {
                            this._buffer.lock(),
                                this._batches.add(this._buffer.batch),
                                e.deleteContent(r),
                                i && e.insertContent(t.createText(i, o.selection.getAttributes()), r),
                                s ? t.setSelection(s) : r.is('documentSelection') || t.setSelection(r),
                                this._buffer.unlock(),
                                this._buffer.input(n);
                        });
                    }
                }
                const ef = [
                    xn('arrowUp'),
                    xn('arrowRight'),
                    xn('arrowDown'),
                    xn('arrowLeft'),
                    9,
                    16,
                    17,
                    18,
                    19,
                    20,
                    27,
                    33,
                    34,
                    35,
                    36,
                    45,
                    91,
                    93,
                    144,
                    145,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    255,
                ];
                for (let t = 112; t <= 135; t++) ef.push(t);
                function of(t) {
                    return !(!t.ctrlKey && !t.metaKey) || ef.includes(t.keyCode);
                }
                function nf(t) {
                    if (t.newChildren.length - t.oldChildren.length != 1) return;
                    const e = (function (t, e) {
                        const o = [];
                        let i,
                            n = 0;
                        return (
                            t.forEach((t) => {
                                'equal' == t
                                    ? (r(), n++)
                                    : 'insert' == t
                                    ? (s('insert')
                                          ? i.values.push(e[n])
                                          : (r(), (i = { type: 'insert', index: n, values: [e[n]] })),
                                      n++)
                                    : s('delete')
                                    ? i.howMany++
                                    : (r(), (i = { type: 'delete', index: n, howMany: 1 }));
                            }),
                            r(),
                            o
                        );
                        function r() {
                            i && (o.push(i), (i = null));
                        }
                        function s(t) {
                            return i && i.type == t;
                        }
                    })(or(t.oldChildren, t.newChildren, rf), t.newChildren);
                    if (e.length > 1) return;
                    const o = e[0];
                    return o.values[0] && o.values[0].is('$text') ? o : void 0;
                }
                function rf(t, e) {
                    return t && t.is('$text') && e && e.is('$text') ? t.data === e.data : t === e;
                }
                class sf {
                    constructor(t) {
                        (this.editor = t), (this.editing = this.editor.editing);
                    }
                    handle(t, e) {
                        if (
                            (function (t) {
                                if (0 == t.length) return !1;
                                for (const e of t) if ('children' === e.type && !nf(e)) return !0;
                                return !1;
                            })(t)
                        )
                            this._handleContainerChildrenMutations(t, e);
                        else for (const o of t) this._handleTextMutation(o, e), this._handleTextNodeInsertion(o);
                    }
                    _handleContainerChildrenMutations(t, e) {
                        const o = (function (t) {
                            const e = t
                                .map((t) => t.node)
                                .reduce((t, e) => t.getCommonAncestor(e, { includeSelf: !0 }));
                            if (!e) return;
                            return e
                                .getAncestors({ includeSelf: !0, parentFirst: !0 })
                                .find((t) => t.is('containerElement') || t.is('rootElement'));
                        })(t);
                        if (!o) return;
                        const i = this.editor.editing.view.domConverter.mapViewToDom(o),
                            n = new mr(this.editor.editing.view.document),
                            r = this.editor.data.toModel(n.domToView(i)).getChild(0),
                            s = this.editor.editing.mapper.toModelElement(o);
                        if (!s) return;
                        const a = Array.from(r.getChildren()),
                            l = Array.from(s.getChildren()),
                            c = a[a.length - 1],
                            d = l[l.length - 1],
                            h = c && c.is('element', 'softBreak'),
                            u = d && !d.is('element', 'softBreak');
                        h && u && a.pop();
                        const f = this.editor.model.schema;
                        if (!af(a, f) || !af(l, f)) return;
                        const m = a
                                .map((t) => (t.is('$text') ? t.data : '@'))
                                .join('')
                                .replace(/\u00A0/g, ' '),
                            g = l
                                .map((t) => (t.is('$text') ? t.data : '@'))
                                .join('')
                                .replace(/\u00A0/g, ' ');
                        if (g === m) return;
                        const p = or(g, m),
                            { firstChangeAt: b, insertions: w, deletions: k } = lf(p);
                        let _ = null;
                        e && (_ = this.editing.mapper.toModelRange(e.getFirstRange()));
                        const v = m.substr(b, w),
                            y = this.editor.model.createRange(
                                this.editor.model.createPositionAt(s, b),
                                this.editor.model.createPositionAt(s, b + k),
                            );
                        this.editor.execute('input', { text: v, range: y, resultRange: _ });
                    }
                    _handleTextMutation(t, e) {
                        if ('text' != t.type) return;
                        const o = t.newText.replace(/\u00A0/g, ' '),
                            i = t.oldText.replace(/\u00A0/g, ' ');
                        if (i === o) return;
                        const n = or(i, o),
                            { firstChangeAt: r, insertions: s, deletions: a } = lf(n);
                        let l = null;
                        e && (l = this.editing.mapper.toModelRange(e.getFirstRange()));
                        const c = this.editing.view.createPositionAt(t.node, r),
                            d = this.editing.mapper.toModelPosition(c),
                            h = this.editor.model.createRange(d, d.getShiftedBy(a)),
                            u = o.substr(r, s);
                        this.editor.execute('input', { text: u, range: h, resultRange: l });
                    }
                    _handleTextNodeInsertion(t) {
                        if ('children' != t.type) return;
                        const e = nf(t),
                            o = this.editing.view.createPositionAt(t.node, e.index),
                            i = this.editing.mapper.toModelPosition(o),
                            n = e.values[0].data;
                        this.editor.execute('input', {
                            text: n.replace(/\u00A0/g, ' '),
                            range: this.editor.model.createRange(i),
                        });
                    }
                }
                function af(t, e) {
                    return t.every((t) => e.isInline(t));
                }
                function lf(t) {
                    let e = null,
                        o = null;
                    for (let i = 0; i < t.length; i++) {
                        'equal' != t[i] && ((e = null === e ? i : e), (o = i));
                    }
                    let i = 0,
                        n = 0;
                    for (let r = e; r <= o; r++) 'insert' != t[r] && i++, 'delete' != t[r] && n++;
                    return { insertions: n, deletions: i, firstChangeAt: e };
                }
                class cf extends Gt {
                    static get pluginName() {
                        return 'Input';
                    }
                    init() {
                        const t = this.editor,
                            e = new tf(t, t.config.get('typing.undoStep') || 20);
                        t.commands.add('input', e),
                            (function (t) {
                                let e = null;
                                const o = t.model,
                                    i = t.editing.view,
                                    n = t.commands.get('input');
                                function r(t) {
                                    const r = o.document,
                                        a = i.document.isComposing,
                                        l = e && e.isEqual(r.selection);
                                    (e = null),
                                        n.isEnabled &&
                                            (of(t) ||
                                                r.selection.isCollapsed ||
                                                (a && 229 === t.keyCode) ||
                                                (!a && 229 === t.keyCode && l) ||
                                                s());
                                }
                                function s() {
                                    const t = n.buffer;
                                    t.lock();
                                    const e = t.batch;
                                    n._batches.add(e),
                                        o.enqueueChange(e, () => {
                                            o.deleteContent(o.document.selection);
                                        }),
                                        t.unlock();
                                }
                                wn.isAndroid
                                    ? i.document.on('beforeinput', (t, e) => r(e), { priority: 'lowest' })
                                    : i.document.on('keydown', (t, e) => r(e), { priority: 'lowest' }),
                                    i.document.on(
                                        'compositionstart',
                                        function () {
                                            const t = o.document,
                                                e = 1 !== t.selection.rangeCount || t.selection.getFirstRange().isFlat;
                                            if (t.selection.isCollapsed || e) return;
                                            s();
                                        },
                                        { priority: 'lowest' },
                                    ),
                                    i.document.on(
                                        'compositionend',
                                        () => {
                                            e = o.createSelection(o.document.selection);
                                        },
                                        { priority: 'lowest' },
                                    );
                            })(t),
                            (function (t) {
                                t.editing.view.document.on('mutations', (e, o, i) => {
                                    new sf(t).handle(o, i);
                                });
                            })(t);
                    }
                    isInput(t) {
                        return this.editor.commands.get('input')._batches.has(t);
                    }
                }
                class df extends Yt {
                    constructor(t, e) {
                        super(t),
                            (this.direction = e),
                            (this._buffer = new Qu(t.model, t.config.get('typing.undoStep')));
                    }
                    get buffer() {
                        return this._buffer;
                    }
                    execute(t = {}) {
                        const e = this.editor.model,
                            o = e.document;
                        e.enqueueChange(this._buffer.batch, (i) => {
                            this._buffer.lock();
                            const n = i.createSelection(t.selection || o.selection),
                                r = t.sequence || 1,
                                s = n.isCollapsed;
                            if (
                                (n.isCollapsed && e.modifySelection(n, { direction: this.direction, unit: t.unit }),
                                this._shouldEntireContentBeReplacedWithParagraph(r))
                            )
                                return void this._replaceEntireContentWithParagraph(i);
                            if (this._shouldReplaceFirstBlockWithParagraph(n, r))
                                return void this.editor.execute('paragraph', { selection: n });
                            if (n.isCollapsed) return;
                            let a = 0;
                            n
                                .getFirstRange()
                                .getMinimalFlatRanges()
                                .forEach((t) => {
                                    a += ln(t.getWalker({ singleCharacters: !0, ignoreElementEnd: !0, shallow: !0 }));
                                }),
                                e.deleteContent(n, { doNotResetEntireContent: s, direction: this.direction }),
                                this._buffer.input(a),
                                i.setSelection(n),
                                this._buffer.unlock();
                        });
                    }
                    _shouldEntireContentBeReplacedWithParagraph(t) {
                        if (t > 1) return !1;
                        const e = this.editor.model,
                            o = e.document.selection,
                            i = e.schema.getLimitElement(o);
                        if (!(o.isCollapsed && o.containsEntireContent(i))) return !1;
                        if (!e.schema.checkChild(i, 'paragraph')) return !1;
                        const n = i.getChild(0);
                        return !n || 'paragraph' !== n.name;
                    }
                    _replaceEntireContentWithParagraph(t) {
                        const e = this.editor.model,
                            o = e.document.selection,
                            i = e.schema.getLimitElement(o),
                            n = t.createElement('paragraph');
                        t.remove(t.createRangeIn(i)), t.insert(n, i), t.setSelection(n, 0);
                    }
                    _shouldReplaceFirstBlockWithParagraph(t, e) {
                        const o = this.editor.model;
                        if (e > 1 || 'backward' != this.direction) return !1;
                        if (!t.isCollapsed) return !1;
                        const i = t.getFirstPosition(),
                            n = o.schema.getLimitElement(i),
                            r = n.getChild(0);
                        return (
                            i.parent == r &&
                            !!t.containsEntireContent(r) &&
                            !!o.schema.checkChild(n, 'paragraph') &&
                            'paragraph' != r.name
                        );
                    }
                }
                class hf extends yr {
                    constructor(t) {
                        super(t);
                        const e = t.document;
                        let o = 0;
                        function i(t, o, i) {
                            let n;
                            e.once('delete', (t) => (n = t), { priority: Number.POSITIVE_INFINITY }),
                                e.fire('delete', new jr(e, o, i)),
                                n && n.stop.called && t.stop();
                        }
                        e.on('keyup', (t, e) => {
                            (e.keyCode != vn.delete && e.keyCode != vn.backspace) || (o = 0);
                        }),
                            e.on('keydown', (t, e) => {
                                const n = {};
                                if (e.keyCode == vn.delete) (n.direction = 'forward'), (n.unit = 'character');
                                else {
                                    if (e.keyCode != vn.backspace) return;
                                    (n.direction = 'backward'), (n.unit = 'codePoint');
                                }
                                const r = wn.isMac ? e.altKey : e.ctrlKey;
                                (n.unit = r ? 'word' : n.unit), (n.sequence = ++o), i(t, e.domEvent, n);
                            }),
                            wn.isAndroid &&
                                e.on('beforeinput', (e, o) => {
                                    if ('deleteContentBackward' != o.domEvent.inputType) return;
                                    const n = { unit: 'codepoint', direction: 'backward', sequence: 1 },
                                        r = o.domTarget.ownerDocument.defaultView.getSelection();
                                    r.anchorNode == r.focusNode &&
                                        r.anchorOffset + 1 != r.focusOffset &&
                                        (n.selectionToRemove = t.domConverter.domSelectionToView(r)),
                                        i(e, o.domEvent, n);
                                });
                    }
                    observe() {}
                }
                class uf extends Gt {
                    static get pluginName() {
                        return 'Delete';
                    }
                    init() {
                        const t = this.editor,
                            e = t.editing.view,
                            o = e.document;
                        e.addObserver(hf);
                        const i = new df(t, 'forward');
                        if (
                            (t.commands.add('deleteForward', i),
                            t.commands.add('forwardDelete', i),
                            t.commands.add('delete', new df(t, 'backward')),
                            this.listenTo(o, 'delete', (o, i) => {
                                const n = { unit: i.unit, sequence: i.sequence };
                                if (i.selectionToRemove) {
                                    const e = t.model.createSelection(),
                                        o = [];
                                    for (const e of i.selectionToRemove.getRanges())
                                        o.push(t.editing.mapper.toModelRange(e));
                                    e.setTo(o), (n.selection = e);
                                }
                                t.execute('forward' == i.direction ? 'deleteForward' : 'delete', n),
                                    i.preventDefault(),
                                    e.scrollToTheSelection();
                            }),
                            wn.isAndroid)
                        ) {
                            let t = null;
                            this.listenTo(
                                o,
                                'delete',
                                (e, o) => {
                                    const i = o.domTarget.ownerDocument.defaultView.getSelection();
                                    t = {
                                        anchorNode: i.anchorNode,
                                        anchorOffset: i.anchorOffset,
                                        focusNode: i.focusNode,
                                        focusOffset: i.focusOffset,
                                    };
                                },
                                { priority: 'lowest' },
                            ),
                                this.listenTo(o, 'keyup', (e, o) => {
                                    if (t) {
                                        const e = o.domTarget.ownerDocument.defaultView.getSelection();
                                        e.collapse(t.anchorNode, t.anchorOffset),
                                            e.extend(t.focusNode, t.focusOffset),
                                            (t = null);
                                    }
                                });
                        }
                    }
                }
                class ff extends Gt {
                    static get requires() {
                        return [cf, uf];
                    }
                    static get pluginName() {
                        return 'Typing';
                    }
                }
                function mf(t, e) {
                    let o = t.start;
                    return {
                        text: Array.from(t.getItems()).reduce(
                            (t, i) =>
                                i.is('$text') || i.is('$textProxy') ? t + i.data : ((o = e.createPositionAfter(i)), ''),
                            '',
                        ),
                        range: e.createRange(o, t.end),
                    };
                }
                class gf {
                    constructor(t, e) {
                        (this.model = t),
                            (this.testCallback = e),
                            (this.hasMatch = !1),
                            this.set('isEnabled', !0),
                            this.on('change:isEnabled', () => {
                                this.isEnabled
                                    ? this._startListening()
                                    : (this.stopListening(t.document.selection), this.stopListening(t.document));
                            }),
                            this._startListening();
                    }
                    _startListening() {
                        const t = this.model.document;
                        this.listenTo(t.selection, 'change:range', (e, { directChange: o }) => {
                            o &&
                                (t.selection.isCollapsed
                                    ? this._evaluateTextBeforeSelection('selection')
                                    : this.hasMatch && (this.fire('unmatched'), (this.hasMatch = !1)));
                        }),
                            this.listenTo(t, 'change:data', (t, e) => {
                                'transparent' != e.type && this._evaluateTextBeforeSelection('data', { batch: e });
                            });
                    }
                    _evaluateTextBeforeSelection(t, e = {}) {
                        const o = this.model,
                            i = o.document.selection,
                            n = o.createRange(o.createPositionAt(i.focus.parent, 0), i.focus),
                            { text: r, range: s } = mf(n, o),
                            a = this.testCallback(r);
                        if ((!a && this.hasMatch && this.fire('unmatched'), (this.hasMatch = !!a), a)) {
                            const o = Object.assign(e, { text: r, range: s });
                            'object' == typeof a && Object.assign(o, a), this.fire('matched:' + t, o);
                        }
                    }
                }
                Kt(gf, Ht);
                class pf extends Gt {
                    static get pluginName() {
                        return 'TwoStepCaretMovement';
                    }
                    constructor(t) {
                        super(t), (this.attributes = new Set()), (this._overrideUid = null);
                    }
                    init() {
                        const t = this.editor,
                            e = t.model,
                            o = t.editing.view,
                            i = t.locale,
                            n = e.document.selection;
                        this.listenTo(
                            o.document,
                            'keydown',
                            (t, e) => {
                                if (!n.isCollapsed) return;
                                if (e.shiftKey || e.altKey || e.ctrlKey) return;
                                const o = e.keyCode == vn.arrowright,
                                    r = e.keyCode == vn.arrowleft;
                                if (!o && !r) return;
                                const s = i.contentLanguageDirection;
                                let a = !1;
                                (a =
                                    ('ltr' === s && o) || ('rtl' === s && r)
                                        ? this._handleForwardMovement(e)
                                        : this._handleBackwardMovement(e)),
                                    !0 === a && t.stop();
                            },
                            { priority: a.get('high') + 1 },
                        ),
                            (this._isNextGravityRestorationSkipped = !1),
                            this.listenTo(n, 'change:range', (t, e) => {
                                this._isNextGravityRestorationSkipped
                                    ? (this._isNextGravityRestorationSkipped = !1)
                                    : this._isGravityOverridden &&
                                      ((!e.directChange && _f(n.getFirstPosition(), this.attributes)) ||
                                          this._restoreGravity());
                            });
                    }
                    registerAttribute(t) {
                        this.attributes.add(t);
                    }
                    _handleForwardMovement(t) {
                        const e = this.attributes,
                            o = this.editor.model.document.selection,
                            i = o.getFirstPosition();
                        return (
                            !this._isGravityOverridden &&
                            (!i.isAtStart || !bf(o, e)) &&
                            (_f(i, e) ? (kf(t), this._overrideGravity(), !0) : void 0)
                        );
                    }
                    _handleBackwardMovement(t) {
                        const e = this.attributes,
                            o = this.editor.model,
                            i = o.document.selection,
                            n = i.getFirstPosition();
                        return this._isGravityOverridden
                            ? (kf(t), this._restoreGravity(), wf(o, e, n), !0)
                            : n.isAtStart
                            ? !!bf(i, e) && (kf(t), wf(o, e, n), !0)
                            : (function (t, e) {
                                  return _f(t.getShiftedBy(-1), e);
                              })(n, e)
                            ? n.isAtEnd && !bf(i, e) && _f(n, e)
                                ? (kf(t), wf(o, e, n), !0)
                                : ((this._isNextGravityRestorationSkipped = !0), this._overrideGravity(), !1)
                            : void 0;
                    }
                    get _isGravityOverridden() {
                        return !!this._overrideUid;
                    }
                    _overrideGravity() {
                        this._overrideUid = this.editor.model.change((t) => t.overrideSelectionGravity());
                    }
                    _restoreGravity() {
                        this.editor.model.change((t) => {
                            t.restoreSelectionGravity(this._overrideUid), (this._overrideUid = null);
                        });
                    }
                }
                function bf(t, e) {
                    for (const o of e) if (t.hasAttribute(o)) return !0;
                    return !1;
                }
                function wf(t, e, o) {
                    const i = o.nodeBefore;
                    t.change((t) => {
                        i ? t.setSelectionAttribute(i.getAttributes()) : t.removeSelectionAttribute(e);
                    });
                }
                function kf(t) {
                    t.preventDefault();
                }
                function _f(t, e) {
                    const { nodeBefore: o, nodeAfter: i } = t;
                    for (const t of e) {
                        const e = o ? o.getAttribute(t) : void 0;
                        if ((i ? i.getAttribute(t) : void 0) !== e) return !0;
                    }
                    return !1;
                }
                var vf = /[\\^$.*+?()[\]{}|]/g;
                RegExp(vf.source);
                yf('"'), yf("'"), yf("'"), yf('"'), yf('"'), yf("'");
                function yf(t) {
                    return new RegExp(`(^|\\s)(${t})([^${t}]*)(${t})$`);
                }
                function xf(t, e, o, i) {
                    return i.createRange(Cf(t, e, o, !0, i), Cf(t, e, o, !1, i));
                }
                function Cf(t, e, o, i, n) {
                    let r = t.textNode || (i ? t.nodeBefore : t.nodeAfter),
                        s = null;
                    for (; r && r.getAttribute(e) == o; ) (s = r), (r = i ? r.previousSibling : r.nextSibling);
                    return s ? n.createPositionAt(s, i ? 'before' : 'after') : t;
                }
                class Af extends Yt {
                    constructor(t) {
                        super(t),
                            (this._stack = []),
                            (this._createdBatches = new WeakSet()),
                            this.refresh(),
                            this.listenTo(t.data, 'set', () => this.clearStack());
                    }
                    refresh() {
                        this.isEnabled = this._stack.length > 0;
                    }
                    addBatch(t) {
                        const e = this.editor.model.document.selection,
                            o = { ranges: e.hasOwnRange ? Array.from(e.getRanges()) : [], isBackward: e.isBackward };
                        this._stack.push({ batch: t, selection: o }), this.refresh();
                    }
                    clearStack() {
                        (this._stack = []), this.refresh();
                    }
                    _restoreSelection(t, e, o) {
                        const i = this.editor.model,
                            n = i.document,
                            r = [],
                            s = t.map((t) => t.getTransformedByOperations(o)),
                            a = s.flat();
                        for (const t of s) {
                            const e = t.filter((t) => t.root != n.graveyard).filter((t) => !Pf(t, a));
                            e.length && (Tf(e), r.push(e[0]));
                        }
                        r.length &&
                            i.change((t) => {
                                t.setSelection(r, { backward: e });
                            });
                    }
                    _undo(t, e) {
                        const o = this.editor.model,
                            i = o.document;
                        this._createdBatches.add(e);
                        const n = t.operations.slice().filter((t) => t.isDocumentOperation);
                        n.reverse();
                        for (const t of n) {
                            const n = t.baseVersion + 1,
                                r = Array.from(i.history.getOperations(n)),
                                s = gh([t.getReversed()], r, {
                                    useRelations: !0,
                                    document: this.editor.model.document,
                                    padWithNoOps: !1,
                                    forceWeakRemove: !0,
                                }).operationsA;
                            for (const n of s)
                                e.addOperation(n), o.applyOperation(n), i.history.setOperationAsUndone(t, n);
                        }
                    }
                }
                function Tf(t) {
                    t.sort((t, e) => (t.start.isBefore(e.start) ? -1 : 1));
                    for (let e = 1; e < t.length; e++) {
                        const o = t[e - 1].getJoined(t[e], !0);
                        o && (e--, t.splice(e, 2, o));
                    }
                }
                function Pf(t, e) {
                    return e.some((e) => e !== t && e.containsRange(t, !0));
                }
                class Sf extends Af {
                    execute(t = null) {
                        const e = t ? this._stack.findIndex((e) => e.batch == t) : this._stack.length - 1,
                            o = this._stack.splice(e, 1)[0],
                            i = this.editor.model.createBatch('transparent');
                        this.editor.model.enqueueChange(i, () => {
                            this._undo(o.batch, i);
                            const t = this.editor.model.document.history.getOperations(o.batch.baseVersion);
                            this._restoreSelection(o.selection.ranges, o.selection.isBackward, t),
                                this.fire('revert', o.batch, i);
                        }),
                            this.refresh();
                    }
                }
                class Ef extends Af {
                    execute() {
                        const t = this._stack.pop(),
                            e = this.editor.model.createBatch('transparent');
                        this.editor.model.enqueueChange(e, () => {
                            const o = t.batch.operations[t.batch.operations.length - 1].baseVersion + 1,
                                i = this.editor.model.document.history.getOperations(o);
                            this._restoreSelection(t.selection.ranges, t.selection.isBackward, i),
                                this._undo(t.batch, e);
                        }),
                            this.refresh();
                    }
                }
                class Rf extends Gt {
                    static get pluginName() {
                        return 'UndoEditing';
                    }
                    constructor(t) {
                        super(t), (this._batchRegistry = new WeakSet());
                    }
                    init() {
                        const t = this.editor;
                        (this._undoCommand = new Sf(t)),
                            (this._redoCommand = new Ef(t)),
                            t.commands.add('undo', this._undoCommand),
                            t.commands.add('redo', this._redoCommand),
                            this.listenTo(
                                t.model,
                                'applyOperation',
                                (t, e) => {
                                    const o = e[0];
                                    if (!o.isDocumentOperation) return;
                                    const i = o.batch,
                                        n = this._redoCommand._createdBatches.has(i),
                                        r = this._undoCommand._createdBatches.has(i);
                                    this._batchRegistry.has(i) ||
                                        ('transparent' == i.type && !n && !r) ||
                                        (n
                                            ? this._undoCommand.addBatch(i)
                                            : r || (this._undoCommand.addBatch(i), this._redoCommand.clearStack()),
                                        this._batchRegistry.add(i));
                                },
                                { priority: 'highest' },
                            ),
                            this.listenTo(this._undoCommand, 'revert', (t, e, o) => {
                                this._redoCommand.addBatch(o);
                            }),
                            t.keystrokes.set('CTRL+Z', 'undo'),
                            t.keystrokes.set('CTRL+Y', 'redo'),
                            t.keystrokes.set('CTRL+SHIFT+Z', 'redo');
                    }
                }
                var If =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M5.042 9.367l2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z"/></svg>',
                    Vf =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M14.958 9.367l-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z"/></svg>';
                class Of extends Gt {
                    static get pluginName() {
                        return 'UndoUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.locale,
                            o = t.t,
                            i = 'ltr' == e.uiLanguageDirection ? If : Vf,
                            n = 'ltr' == e.uiLanguageDirection ? Vf : If;
                        this._addButton('undo', o('Undo'), 'CTRL+Z', i),
                            this._addButton('redo', o('Redo'), 'CTRL+Y', n);
                    }
                    _addButton(t, e, o, i) {
                        const n = this.editor;
                        n.ui.componentFactory.add(t, (r) => {
                            const s = n.commands.get(t),
                                a = new rd(r);
                            return (
                                a.set({ label: e, icon: i, keystroke: o, tooltip: !0 }),
                                a.bind('isEnabled').to(s, 'isEnabled'),
                                this.listenTo(a, 'execute', () => {
                                    n.execute(t), n.editing.view.focus();
                                }),
                                a
                            );
                        });
                    }
                }
                class zf extends Gt {
                    static get requires() {
                        return [Rf, Of];
                    }
                    static get pluginName() {
                        return 'Undo';
                    }
                }
                class Mf extends Yt {
                    constructor(t, e) {
                        super(t), (this.attributeKey = e);
                    }
                    refresh() {
                        const t = this.editor.model,
                            e = t.document;
                        (this.value = e.selection.getAttribute(this.attributeKey)),
                            (this.isEnabled = t.schema.checkAttributeInSelection(e.selection, this.attributeKey));
                    }
                    execute(t = {}) {
                        const e = this.editor.model,
                            o = e.document.selection,
                            i = t.value;
                        e.change((t) => {
                            if (o.isCollapsed)
                                i
                                    ? t.setSelectionAttribute(this.attributeKey, i)
                                    : t.removeSelectionAttribute(this.attributeKey);
                            else {
                                const n = e.schema.getValidRanges(o.getRanges(), this.attributeKey);
                                for (const e of n)
                                    i
                                        ? t.setAttribute(this.attributeKey, i, e)
                                        : t.removeAttribute(this.attributeKey, e);
                            }
                        });
                    }
                }
                class Nf extends Yo {
                    constructor(t) {
                        super(t),
                            this.set('isEmpty', !0),
                            this.on('change', () => {
                                this.set('isEmpty', 0 === this.length);
                            });
                    }
                    add(t, e) {
                        this.find((e) => e.color === t.color) || super.add(t, e);
                    }
                    hasColor(t) {
                        return !!this.find((e) => e.color === t);
                    }
                }
                Kt(Nf, Ht);
                o(64);
                class Bf extends Nc {
                    constructor(
                        t,
                        { colors: e, columns: o, removeButtonLabel: i, documentColorsLabel: n, documentColorsCount: r },
                    ) {
                        super(t),
                            (this.items = this.createCollection()),
                            (this.colorDefinitions = e),
                            (this.focusTracker = new tc()),
                            (this.keystrokes = new Jl()),
                            this.set('selectedColor'),
                            (this.removeButtonLabel = i),
                            (this.columns = o),
                            (this.documentColors = new Nf()),
                            (this.documentColorsCount = r),
                            (this._focusCycler = new hd({
                                focusables: this.items,
                                focusTracker: this.focusTracker,
                                keystrokeHandler: this.keystrokes,
                                actions: { focusPrevious: 'arrowup', focusNext: 'arrowdown' },
                            })),
                            (this._documentColorsLabel = n),
                            this.setTemplate({
                                tag: 'div',
                                attributes: { class: ['ck', 'ck-color-table'] },
                                children: this.items,
                            }),
                            this.items.add(this._removeColorButton());
                    }
                    updateDocumentColors(t, e) {
                        const o = t.document,
                            i = this.documentColorsCount;
                        this.documentColors.clear();
                        for (const n of o.getRootNames()) {
                            const r = o.getRoot(n),
                                s = t.createRangeIn(r);
                            for (const t of s.getItems())
                                if (
                                    t.is('$textProxy') &&
                                    t.hasAttribute(e) &&
                                    (this._addColorToDocumentColors(t.getAttribute(e)), this.documentColors.length >= i)
                                )
                                    return;
                        }
                    }
                    updateSelectedColors() {
                        const t = this.documentColorsGrid,
                            e = this.staticColorsGrid,
                            o = this.selectedColor;
                        (e.selectedColor = o), t && (t.selectedColor = o);
                    }
                    render() {
                        super.render();
                        for (const t of this.items) this.focusTracker.add(t.element);
                        this.keystrokes.listenTo(this.element);
                    }
                    appendGrids() {
                        if (
                            !this.staticColorsGrid &&
                            ((this.staticColorsGrid = this._createStaticColorsGrid()),
                            this.items.add(this.staticColorsGrid),
                            this.documentColorsCount)
                        ) {
                            const t = Bc.bind(this.documentColors, this.documentColors),
                                e = new Bd(this.locale);
                            (e.text = this._documentColorsLabel),
                                e.extendTemplate({
                                    attributes: { class: ['ck', 'ck-color-grid__label', t.if('isEmpty', 'ck-hidden')] },
                                }),
                                this.items.add(e),
                                (this.documentColorsGrid = this._createDocumentColorsGrid()),
                                this.items.add(this.documentColorsGrid);
                        }
                    }
                    focus() {
                        this._focusCycler.focusFirst();
                    }
                    focusLast() {
                        this._focusCycler.focusLast();
                    }
                    _removeColorButton() {
                        const t = new rd();
                        return (
                            t.set({ withText: !0, icon: ac, tooltip: !0, label: this.removeButtonLabel }),
                            (t.class = 'ck-color-table__remove-color'),
                            t.on('execute', () => {
                                this.fire('execute', { value: null });
                            }),
                            t
                        );
                    }
                    _createStaticColorsGrid() {
                        const t = new fd(this.locale, {
                            colorDefinitions: this.colorDefinitions,
                            columns: this.columns,
                        });
                        return t.delegate('execute').to(this), t;
                    }
                    _createDocumentColorsGrid() {
                        const t = Bc.bind(this.documentColors, this.documentColors),
                            e = new fd(this.locale, { columns: this.columns });
                        return (
                            e.delegate('execute').to(this),
                            e.extendTemplate({ attributes: { class: t.if('isEmpty', 'ck-hidden') } }),
                            e.items.bindTo(this.documentColors).using((t) => {
                                const e = new dd();
                                return (
                                    e.set({ color: t.color, hasBorder: t.options && t.options.hasBorder }),
                                    t.label && e.set({ label: t.label, tooltip: !0 }),
                                    e.on('execute', () => {
                                        this.fire('execute', { value: t.color });
                                    }),
                                    e
                                );
                            }),
                            this.documentColors.on('change:isEmpty', (t, o, i) => {
                                i && (e.selectedColor = null);
                            }),
                            e
                        );
                    }
                    _addColorToDocumentColors(t) {
                        const e = this.colorDefinitions.find((e) => e.color === t);
                        e
                            ? this.documentColors.add(Object.assign({}, e))
                            : this.documentColors.add({ color: t, label: t, options: { hasBorder: !1 } });
                    }
                }
                function Ff(t, e) {
                    const o = { model: { key: t, values: [] }, view: {}, upcastAlso: {} };
                    for (const t of e)
                        o.model.values.push(t.model),
                            (o.view[t.model] = t.view),
                            t.upcastAlso && (o.upcastAlso[t.model] = t.upcastAlso);
                    return o;
                }
                function Df(t) {
                    return (e) => e.getStyle(t).replace(/\s/g, '');
                }
                function Lf(t) {
                    return (e, { writer: o }) =>
                        o.createAttributeElement('span', { style: `${t}:${e}` }, { priority: 7 });
                }
                class Hf extends Mf {
                    constructor(t) {
                        super(t, 'fontBackgroundColor');
                    }
                }
                class jf extends Gt {
                    static get pluginName() {
                        return 'FontBackgroundColorEditing';
                    }
                    constructor(t) {
                        super(t),
                            t.config.define('fontBackgroundColor', {
                                colors: [
                                    { color: 'hsl(0, 0%, 0%)', label: 'Black' },
                                    { color: 'hsl(0, 0%, 30%)', label: 'Dim grey' },
                                    { color: 'hsl(0, 0%, 60%)', label: 'Grey' },
                                    { color: 'hsl(0, 0%, 90%)', label: 'Light grey' },
                                    { color: 'hsl(0, 0%, 100%)', label: 'White', hasBorder: !0 },
                                    { color: 'hsl(0, 75%, 60%)', label: 'Red' },
                                    { color: 'hsl(30, 75%, 60%)', label: 'Orange' },
                                    { color: 'hsl(60, 75%, 60%)', label: 'Yellow' },
                                    { color: 'hsl(90, 75%, 60%)', label: 'Light green' },
                                    { color: 'hsl(120, 75%, 60%)', label: 'Green' },
                                    { color: 'hsl(150, 75%, 60%)', label: 'Aquamarine' },
                                    { color: 'hsl(180, 75%, 60%)', label: 'Turquoise' },
                                    { color: 'hsl(210, 75%, 60%)', label: 'Light blue' },
                                    { color: 'hsl(240, 75%, 60%)', label: 'Blue' },
                                    { color: 'hsl(270, 75%, 60%)', label: 'Purple' },
                                ],
                                columns: 5,
                            }),
                            t.data.addStyleProcessorRules(Jh),
                            t.conversion.for('upcast').elementToAttribute({
                                view: { name: 'span', styles: { 'background-color': /[\s\S]+/ } },
                                model: { key: 'fontBackgroundColor', value: Df('background-color') },
                            }),
                            t.conversion
                                .for('downcast')
                                .attributeToElement({ model: 'fontBackgroundColor', view: Lf('background-color') }),
                            t.commands.add('fontBackgroundColor', new Hf(t)),
                            t.model.schema.extend('$text', { allowAttributes: 'fontBackgroundColor' }),
                            t.model.schema.setAttributeProperties('fontBackgroundColor', {
                                isFormatting: !0,
                                copyOnEnter: !0,
                            });
                    }
                }
                class Wf extends Gt {
                    constructor(t, { commandName: e, icon: o, componentName: i, dropdownLabel: n }) {
                        super(t),
                            (this.commandName = e),
                            (this.componentName = i),
                            (this.icon = o),
                            (this.dropdownLabel = n),
                            (this.columns = t.config.get(this.componentName + '.columns')),
                            (this.colorTableView = void 0);
                    }
                    init() {
                        const t = this.editor,
                            e = t.locale,
                            o = e.t,
                            i = t.commands.get(this.commandName),
                            n = ad(e, ld(t.config.get(this.componentName).colors)),
                            r = t.config.get(this.componentName + '.documentColors');
                        t.ui.componentFactory.add(this.componentName, (e) => {
                            const s = Od(e);
                            return (
                                (this.colorTableView = (function ({
                                    dropdownView: t,
                                    colors: e,
                                    columns: o,
                                    removeButtonLabel: i,
                                    documentColorsLabel: n,
                                    documentColorsCount: r,
                                }) {
                                    const s = t.locale,
                                        a = new Bf(s, {
                                            colors: e,
                                            columns: o,
                                            removeButtonLabel: i,
                                            documentColorsLabel: n,
                                            documentColorsCount: r,
                                        });
                                    return (
                                        (t.colorTableView = a),
                                        t.panelView.children.add(a),
                                        a.delegate('execute').to(t, 'execute'),
                                        a
                                    );
                                })({
                                    dropdownView: s,
                                    colors: n.map((t) => ({
                                        label: t.label,
                                        color: t.model,
                                        options: { hasBorder: t.hasBorder },
                                    })),
                                    columns: this.columns,
                                    removeButtonLabel: o('Remove color'),
                                    documentColorsLabel: 0 !== r ? o('Document colors') : void 0,
                                    documentColorsCount: void 0 === r ? this.columns : r,
                                })),
                                this.colorTableView.bind('selectedColor').to(i, 'value'),
                                s.buttonView.set({ label: this.dropdownLabel, icon: this.icon, tooltip: !0 }),
                                s.extendTemplate({ attributes: { class: 'ck-color-ui-dropdown' } }),
                                s.bind('isEnabled').to(i),
                                s.on('execute', (e, o) => {
                                    t.execute(this.commandName, o), t.editing.view.focus();
                                }),
                                s.on('change:isOpen', (e, o, i) => {
                                    s.colorTableView.appendGrids(),
                                        i &&
                                            (0 !== r &&
                                                this.colorTableView.updateDocumentColors(t.model, this.componentName),
                                            this.colorTableView.updateSelectedColors());
                                }),
                                s
                            );
                        });
                    }
                }
                class qf extends Wf {
                    constructor(t) {
                        super(t, {
                            commandName: 'fontBackgroundColor',
                            componentName: 'fontBackgroundColor',
                            icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M4 2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2zm8.38 9.262H7.62L10 5.506l2.38 5.756zm.532 1.285L14.34 16h1.426L10.804 4H9.196L4.234 16H5.66l1.428-3.453h5.824z"/></svg>',
                            dropdownLabel: (0, t.locale.t)('Font Background Color'),
                        });
                    }
                    static get pluginName() {
                        return 'FontBackgroundColorUI';
                    }
                }
                class Uf extends Mf {
                    constructor(t) {
                        super(t, 'fontColor');
                    }
                }
                class $f extends Gt {
                    static get pluginName() {
                        return 'FontColorEditing';
                    }
                    constructor(t) {
                        super(t),
                            t.config.define('fontColor', {
                                colors: [
                                    { color: 'hsl(0, 0%, 0%)', label: 'Black' },
                                    { color: 'hsl(0, 0%, 30%)', label: 'Dim grey' },
                                    { color: 'hsl(0, 0%, 60%)', label: 'Grey' },
                                    { color: 'hsl(0, 0%, 90%)', label: 'Light grey' },
                                    { color: 'hsl(0, 0%, 100%)', label: 'White', hasBorder: !0 },
                                    { color: 'hsl(0, 75%, 60%)', label: 'Red' },
                                    { color: 'hsl(30, 75%, 60%)', label: 'Orange' },
                                    { color: 'hsl(60, 75%, 60%)', label: 'Yellow' },
                                    { color: 'hsl(90, 75%, 60%)', label: 'Light green' },
                                    { color: 'hsl(120, 75%, 60%)', label: 'Green' },
                                    { color: 'hsl(150, 75%, 60%)', label: 'Aquamarine' },
                                    { color: 'hsl(180, 75%, 60%)', label: 'Turquoise' },
                                    { color: 'hsl(210, 75%, 60%)', label: 'Light blue' },
                                    { color: 'hsl(240, 75%, 60%)', label: 'Blue' },
                                    { color: 'hsl(270, 75%, 60%)', label: 'Purple' },
                                ],
                                columns: 5,
                            }),
                            t.conversion.for('upcast').elementToAttribute({
                                view: { name: 'span', styles: { color: /[\s\S]+/ } },
                                model: { key: 'fontColor', value: Df('color') },
                            }),
                            t.conversion.for('upcast').elementToAttribute({
                                view: { name: 'font', attributes: { color: /^#?\w+$/ } },
                                model: { key: 'fontColor', value: (t) => t.getAttribute('color') },
                            }),
                            t.conversion.for('downcast').attributeToElement({ model: 'fontColor', view: Lf('color') }),
                            t.commands.add('fontColor', new Uf(t)),
                            t.model.schema.extend('$text', { allowAttributes: 'fontColor' }),
                            t.model.schema.setAttributeProperties('fontColor', { isFormatting: !0, copyOnEnter: !0 });
                    }
                }
                class Kf extends Wf {
                    constructor(t) {
                        super(t, {
                            commandName: 'fontColor',
                            componentName: 'fontColor',
                            icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M12.4 10.3L10 4.5l-2.4 5.8h4.8zm.5 1.2H7.1L5.7 15H4.2l5-12h1.6l5 12h-1.5L13 11.5zm3.1 7H4a1 1 0 0 1 0-2h12a1 1 0 0 1 0 2z"/></svg>',
                            dropdownLabel: (0, t.locale.t)('Font Color'),
                        });
                    }
                    static get pluginName() {
                        return 'FontColorUI';
                    }
                }
                class Gf extends Mf {
                    constructor(t) {
                        super(t, 'fontFamily');
                    }
                }
                function Jf(t) {
                    return t.map(Yf).filter((t) => !!t);
                }
                function Yf(t) {
                    return 'object' == typeof t
                        ? t
                        : 'default' === t
                        ? { title: 'Default', model: void 0 }
                        : 'string' == typeof t
                        ? (function (t) {
                              const e = t.replace(/"|'/g, '').split(','),
                                  o = e[0],
                                  i = e.map(Xf).join(', ');
                              return {
                                  title: o,
                                  model: i,
                                  view: { name: 'span', styles: { 'font-family': i }, priority: 7 },
                              };
                          })(t)
                        : void 0;
                }
                function Xf(t) {
                    return (t = t.trim()).indexOf(' ') > 0 && (t = `'${t}'`), t;
                }
                class Zf extends Gt {
                    static get pluginName() {
                        return 'FontFamilyEditing';
                    }
                    constructor(t) {
                        super(t),
                            t.config.define('fontFamily', {
                                options: [
                                    'default',
                                    'Arial, Helvetica, sans-serif',
                                    'Courier New, Courier, monospace',
                                    'Georgia, serif',
                                    'Lucida Sans Unicode, Lucida Grande, sans-serif',
                                    'Tahoma, Geneva, sans-serif',
                                    'Times New Roman, Times, serif',
                                    'Trebuchet MS, Helvetica, sans-serif',
                                    'Verdana, Geneva, sans-serif',
                                ],
                                supportAllValues: !1,
                            });
                    }
                    init() {
                        const t = this.editor;
                        t.model.schema.extend('$text', { allowAttributes: 'fontFamily' }),
                            t.model.schema.setAttributeProperties('fontFamily', { isFormatting: !0, copyOnEnter: !0 });
                        const e = Ff(
                            'fontFamily',
                            Jf(t.config.get('fontFamily.options')).filter((t) => t.model),
                        );
                        t.config.get('fontFamily.supportAllValues')
                            ? (this._prepareAnyValueConverters(), this._prepareCompatibilityConverter())
                            : t.conversion.attributeToElement(e),
                            t.commands.add('fontFamily', new Gf(t));
                    }
                    _prepareAnyValueConverters() {
                        const t = this.editor;
                        t.conversion.for('downcast').attributeToElement({
                            model: 'fontFamily',
                            view: (t, { writer: e }) =>
                                e.createAttributeElement('span', { style: 'font-family:' + t }, { priority: 7 }),
                        }),
                            t.conversion.for('upcast').elementToAttribute({
                                model: { key: 'fontFamily', value: (t) => t.getStyle('font-family') },
                                view: { name: 'span', styles: { 'font-family': /.*/ } },
                            });
                    }
                    _prepareCompatibilityConverter() {
                        this.editor.conversion.for('upcast').elementToAttribute({
                            view: { name: 'font', attributes: { face: /.*/ } },
                            model: { key: 'fontFamily', value: (t) => t.getAttribute('face') },
                        });
                    }
                }
                class Qf extends Gt {
                    static get pluginName() {
                        return 'FontFamilyUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.t,
                            o = this._getLocalizedOptions(),
                            i = t.commands.get('fontFamily');
                        t.ui.componentFactory.add('fontFamily', (n) => {
                            const r = Od(n);
                            return (
                                Md(
                                    r,
                                    (function (t, e) {
                                        const o = new Yo();
                                        for (const i of t) {
                                            const t = {
                                                type: 'button',
                                                model: new Kd({
                                                    commandName: 'fontFamily',
                                                    commandParam: i.model,
                                                    label: i.title,
                                                    withText: !0,
                                                }),
                                            };
                                            t.model
                                                .bind('isOn')
                                                .to(
                                                    e,
                                                    'value',
                                                    (t) =>
                                                        t === i.model ||
                                                        (!(!t || !i.model) &&
                                                            t.split(',')[0].replace(/'/g, '').toLowerCase() ===
                                                                i.model.toLowerCase()),
                                                ),
                                                i.view &&
                                                    i.view.styles &&
                                                    t.model.set(
                                                        'labelStyle',
                                                        'font-family: ' + i.view.styles['font-family'],
                                                    ),
                                                o.add(t);
                                        }
                                        return o;
                                    })(o, i),
                                ),
                                r.buttonView.set({
                                    label: e('Font Family'),
                                    icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.03 3h6.149a.75.75 0 1 1 0 1.5h-5.514L11.03 3zm1.27 3h4.879a.75.75 0 1 1 0 1.5h-4.244L12.3 6zm1.27 3h3.609a.75.75 0 1 1 0 1.5h-2.973L13.57 9zm-2.754 2.5L8.038 4.785 5.261 11.5h5.555zm.62 1.5H4.641l-1.666 4.028H1.312l5.789-14h1.875l5.789 14h-1.663L11.436 13z"/></svg>',
                                    tooltip: !0,
                                }),
                                r.extendTemplate({ attributes: { class: 'ck-font-family-dropdown' } }),
                                r.bind('isEnabled').to(i),
                                this.listenTo(r, 'execute', (e) => {
                                    t.execute(e.source.commandName, { value: e.source.commandParam }),
                                        t.editing.view.focus();
                                }),
                                r
                            );
                        });
                    }
                    _getLocalizedOptions() {
                        const t = this.editor,
                            e = t.t;
                        return Jf(t.config.get('fontFamily').options).map(
                            (t) => ('Default' === t.title && (t.title = e('Default')), t),
                        );
                    }
                }
                class tm extends Mf {
                    constructor(t) {
                        super(t, 'fontSize');
                    }
                }
                function em(t) {
                    return t
                        .map((t) =>
                            (function (t) {
                                if (((e = t), 'object' == typeof e && e.title && e.model && e.view)) return im(t);
                                var e;
                                const o = (function (t) {
                                    return om[t] || om[t.model];
                                })(t);
                                if (o) return im(o);
                                if ('default' === t) return { model: void 0, title: 'Default' };
                                if (
                                    (function (t) {
                                        let e;
                                        if ('object' == typeof t) {
                                            if (!t.model) throw new l.a('font-size-invalid-definition', null, t);
                                            e = parseFloat(t.model);
                                        } else e = parseFloat(t);
                                        return isNaN(e);
                                    })(t)
                                )
                                    return;
                                return (function (t) {
                                    ('number' != typeof t && 'string' != typeof t) ||
                                        (t = { title: String(t), model: parseFloat(t) + 'px' });
                                    return (t.view = { name: 'span', styles: { 'font-size': t.model } }), im(t);
                                })(t);
                            })(t),
                        )
                        .filter((t) => !!t);
                }
                const om = {
                    get tiny() {
                        return {
                            title: 'Tiny',
                            model: 'tiny',
                            view: { name: 'span', classes: 'text-tiny', priority: 7 },
                        };
                    },
                    get small() {
                        return {
                            title: 'Small',
                            model: 'small',
                            view: { name: 'span', classes: 'text-small', priority: 7 },
                        };
                    },
                    get big() {
                        return { title: 'Big', model: 'big', view: { name: 'span', classes: 'text-big', priority: 7 } };
                    },
                    get huge() {
                        return {
                            title: 'Huge',
                            model: 'huge',
                            view: { name: 'span', classes: 'text-huge', priority: 7 },
                        };
                    },
                };
                function im(t) {
                    return t.view.priority || (t.view.priority = 7), t;
                }
                const nm = ['x-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large', 'xxx-large'];
                class rm extends Gt {
                    static get pluginName() {
                        return 'FontSizeEditing';
                    }
                    constructor(t) {
                        super(t),
                            t.config.define('fontSize', {
                                options: ['tiny', 'small', 'default', 'big', 'huge'],
                                supportAllValues: !1,
                            });
                    }
                    init() {
                        const t = this.editor;
                        t.model.schema.extend('$text', { allowAttributes: 'fontSize' }),
                            t.model.schema.setAttributeProperties('fontSize', { isFormatting: !0, copyOnEnter: !0 });
                        const e = t.config.get('fontSize.supportAllValues'),
                            o = Ff(
                                'fontSize',
                                em(this.editor.config.get('fontSize.options')).filter((t) => t.model),
                            );
                        e
                            ? (this._prepareAnyValueConverters(o), this._prepareCompatibilityConverter())
                            : t.conversion.attributeToElement(o),
                            t.commands.add('fontSize', new tm(t));
                    }
                    _prepareAnyValueConverters(t) {
                        const e = this.editor,
                            o = t.model.values.filter((t) => !String(t).match(/[\d.]+[\w%]+/));
                        if (o.length) throw new l.a('font-size-invalid-use-of-named-presets', null, { presets: o });
                        e.conversion.for('downcast').attributeToElement({
                            model: 'fontSize',
                            view: (t, { writer: e }) => {
                                if (t)
                                    return e.createAttributeElement(
                                        'span',
                                        { style: 'font-size:' + t },
                                        { priority: 7 },
                                    );
                            },
                        }),
                            e.conversion.for('upcast').elementToAttribute({
                                model: { key: 'fontSize', value: (t) => t.getStyle('font-size') },
                                view: { name: 'span', styles: { 'font-size': /.*/ } },
                            });
                    }
                    _prepareCompatibilityConverter() {
                        this.editor.conversion.for('upcast').elementToAttribute({
                            view: { name: 'font', attributes: { size: /^[+-]?\d{1,3}$/ } },
                            model: {
                                key: 'fontSize',
                                value: (t) => {
                                    const e = t.getAttribute('size'),
                                        o = '-' === e[0] || '+' === e[0];
                                    let i = parseInt(e, 10);
                                    o && (i = 3 + i);
                                    const n = nm.length - 1,
                                        r = Math.min(Math.max(i, 0), n);
                                    return nm[r];
                                },
                            },
                        });
                    }
                }
                o(66);
                class sm extends Gt {
                    static get pluginName() {
                        return 'FontSizeUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.t,
                            o = this._getLocalizedOptions(),
                            i = t.commands.get('fontSize');
                        t.ui.componentFactory.add('fontSize', (n) => {
                            const r = Od(n);
                            return (
                                Md(
                                    r,
                                    (function (t, e) {
                                        const o = new Yo();
                                        for (const i of t) {
                                            const t = {
                                                type: 'button',
                                                model: new Kd({
                                                    commandName: 'fontSize',
                                                    commandParam: i.model,
                                                    label: i.title,
                                                    class: 'ck-fontsize-option',
                                                    withText: !0,
                                                }),
                                            };
                                            i.view &&
                                                i.view.styles &&
                                                t.model.set('labelStyle', 'font-size:' + i.view.styles['font-size']),
                                                i.view &&
                                                    i.view.classes &&
                                                    t.model.set('class', `${t.model.class} ${i.view.classes}`),
                                                t.model.bind('isOn').to(e, 'value', (t) => t === i.model),
                                                o.add(t);
                                        }
                                        return o;
                                    })(o, i),
                                ),
                                r.buttonView.set({
                                    label: e('Font Size'),
                                    icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.816 11.5L7.038 4.785 4.261 11.5h5.555zm.62 1.5H3.641l-1.666 4.028H.312l5.789-14h1.875l5.789 14h-1.663L10.436 13zm7.55 2.279l.779-.779.707.707-2.265 2.265-2.193-2.265.707-.707.765.765V4.825c0-.042 0-.083.002-.123l-.77.77-.707-.707L17.207 2.5l2.265 2.265-.707.707-.782-.782c.002.043.003.089.003.135v10.454z"/></svg>',
                                    tooltip: !0,
                                }),
                                r.extendTemplate({ attributes: { class: ['ck-font-size-dropdown'] } }),
                                r.bind('isEnabled').to(i),
                                this.listenTo(r, 'execute', (e) => {
                                    t.execute(e.source.commandName, { value: e.source.commandParam }),
                                        t.editing.view.focus();
                                }),
                                r
                            );
                        });
                    }
                    _getLocalizedOptions() {
                        const t = this.editor,
                            e = t.t,
                            o = {
                                Default: e('Default'),
                                Tiny: e('Tiny'),
                                Small: e('Small'),
                                Big: e('Big'),
                                Huge: e('Huge'),
                            };
                        return em(t.config.get('fontSize').options).map((t) => {
                            const e = o[t.title];
                            return e && e != t.title && (t = Object.assign({}, t, { title: e })), t;
                        });
                    }
                }
                class am extends Yt {
                    refresh() {
                        const t = this.editor.model,
                            e = Ic(t.document.selection.getSelectedBlocks());
                        (this.value = !!e && e.is('element', 'paragraph')), (this.isEnabled = !!e && lm(e, t.schema));
                    }
                    execute(t = {}) {
                        const e = this.editor.model,
                            o = e.document;
                        e.change((i) => {
                            const n = (t.selection || o.selection).getSelectedBlocks();
                            for (const t of n)
                                !t.is('element', 'paragraph') && lm(t, e.schema) && i.rename(t, 'paragraph');
                        });
                    }
                }
                function lm(t, e) {
                    return e.checkChild(t.parent, 'paragraph') && !e.isObject(t);
                }
                class cm extends Yt {
                    execute(t) {
                        const e = this.editor.model;
                        let o = t.position;
                        e.change((t) => {
                            const i = t.createElement('paragraph');
                            if (!e.schema.checkChild(o.parent, i)) {
                                const n = e.schema.findAllowedParent(o, i);
                                if (!n) return;
                                o = t.split(o, n).position;
                            }
                            e.insertContent(i, o), t.setSelection(i, 'in');
                        });
                    }
                }
                class dm extends Gt {
                    static get pluginName() {
                        return 'Paragraph';
                    }
                    init() {
                        const t = this.editor,
                            e = t.model;
                        t.commands.add('paragraph', new am(t)),
                            t.commands.add('insertParagraph', new cm(t)),
                            e.schema.register('paragraph', { inheritAllFrom: '$block' }),
                            t.conversion.elementToElement({ model: 'paragraph', view: 'p' }),
                            t.conversion.for('upcast').elementToElement({
                                model: (t, { writer: e }) =>
                                    dm.paragraphLikeElements.has(t.name)
                                        ? t.isEmpty
                                            ? null
                                            : e.createElement('paragraph')
                                        : null,
                                view: /.+/,
                                converterPriority: 'low',
                            });
                    }
                }
                dm.paragraphLikeElements = new Set([
                    'blockquote',
                    'dd',
                    'div',
                    'dt',
                    'h1',
                    'h2',
                    'h3',
                    'h4',
                    'h5',
                    'h6',
                    'li',
                    'p',
                    'td',
                    'th',
                ]);
                class hm extends Yt {
                    constructor(t, e) {
                        super(t), (this.modelElements = e);
                    }
                    refresh() {
                        const t = Ic(this.editor.model.document.selection.getSelectedBlocks());
                        (this.value = !!t && this.modelElements.includes(t.name) && t.name),
                            (this.isEnabled =
                                !!t && this.modelElements.some((e) => um(t, e, this.editor.model.schema)));
                    }
                    execute(t) {
                        const e = this.editor.model,
                            o = e.document,
                            i = t.value;
                        e.change((t) => {
                            const n = Array.from(o.selection.getSelectedBlocks()).filter((t) => um(t, i, e.schema));
                            for (const e of n) e.is('element', i) || t.rename(e, i);
                        });
                    }
                }
                function um(t, e, o) {
                    return o.checkChild(t.parent, e) && !o.isObject(t);
                }
                class fm extends Gt {
                    static get pluginName() {
                        return 'HeadingEditing';
                    }
                    constructor(t) {
                        super(t),
                            t.config.define('heading', {
                                options: [
                                    { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                                    { model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },
                                    { model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },
                                    { model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' },
                                ],
                            });
                    }
                    static get requires() {
                        return [dm];
                    }
                    init() {
                        const t = this.editor,
                            e = t.config.get('heading.options'),
                            o = [];
                        for (const i of e)
                            'paragraph' !== i.model &&
                                (t.model.schema.register(i.model, { inheritAllFrom: '$block' }),
                                t.conversion.elementToElement(i),
                                o.push(i.model));
                        this._addDefaultH1Conversion(t), t.commands.add('heading', new hm(t, o));
                    }
                    afterInit() {
                        const t = this.editor,
                            e = t.commands.get('enter'),
                            o = t.config.get('heading.options');
                        e &&
                            this.listenTo(e, 'afterExecute', (e, i) => {
                                const n = t.model.document.selection.getFirstPosition().parent;
                                o.some((t) => n.is('element', t.model)) &&
                                    !n.is('element', 'paragraph') &&
                                    0 === n.childCount &&
                                    i.writer.rename(n, 'paragraph');
                            });
                    }
                    _addDefaultH1Conversion(t) {
                        t.conversion
                            .for('upcast')
                            .elementToElement({ model: 'heading1', view: 'h1', converterPriority: a.get('low') + 1 });
                    }
                }
                o(12);
                class mm extends Gt {
                    static get pluginName() {
                        return 'HeadingUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.t,
                            o = (function (t) {
                                const e = t.t,
                                    o = {
                                        Paragraph: e('Paragraph'),
                                        'Heading 1': e('Heading 1'),
                                        'Heading 2': e('Heading 2'),
                                        'Heading 3': e('Heading 3'),
                                        'Heading 4': e('Heading 4'),
                                        'Heading 5': e('Heading 5'),
                                        'Heading 6': e('Heading 6'),
                                    };
                                return t.config.get('heading.options').map((t) => {
                                    const e = o[t.title];
                                    return e && e != t.title && (t.title = e), t;
                                });
                            })(t),
                            i = e('Choose heading'),
                            n = e('Heading');
                        t.ui.componentFactory.add('heading', (e) => {
                            const r = {},
                                s = new Yo(),
                                a = t.commands.get('heading'),
                                l = t.commands.get('paragraph'),
                                c = [a];
                            for (const t of o) {
                                const e = {
                                    type: 'button',
                                    model: new Kd({ label: t.title, class: t.class, withText: !0 }),
                                };
                                'paragraph' === t.model
                                    ? (e.model.bind('isOn').to(l, 'value'),
                                      e.model.set('commandName', 'paragraph'),
                                      c.push(l))
                                    : (e.model.bind('isOn').to(a, 'value', (e) => e === t.model),
                                      e.model.set({ commandName: 'heading', commandValue: t.model })),
                                    s.add(e),
                                    (r[t.model] = t.title);
                            }
                            const d = Od(e);
                            return (
                                Md(d, s),
                                d.buttonView.set({ isOn: !1, withText: !0, tooltip: n }),
                                d.extendTemplate({ attributes: { class: ['ck-heading-dropdown'] } }),
                                d.bind('isEnabled').toMany(c, 'isEnabled', (...t) => t.some((t) => t)),
                                d.buttonView.bind('label').to(a, 'value', l, 'value', (t, e) => {
                                    const o = t || (e && 'paragraph');
                                    return r[o] ? r[o] : i;
                                }),
                                this.listenTo(d, 'execute', (e) => {
                                    t.execute(
                                        e.source.commandName,
                                        e.source.commandValue ? { value: e.source.commandValue } : void 0,
                                    ),
                                        t.editing.view.focus();
                                }),
                                d
                            );
                        });
                    }
                }
                class gm {
                    constructor() {
                        this._stack = [];
                    }
                    add(t, e) {
                        const o = this._stack,
                            i = o[0];
                        this._insertDescriptor(t);
                        const n = o[0];
                        i === n ||
                            pm(i, n) ||
                            this.fire('change:top', { oldDescriptor: i, newDescriptor: n, writer: e });
                    }
                    remove(t, e) {
                        const o = this._stack,
                            i = o[0];
                        this._removeDescriptor(t);
                        const n = o[0];
                        i === n ||
                            pm(i, n) ||
                            this.fire('change:top', { oldDescriptor: i, newDescriptor: n, writer: e });
                    }
                    _insertDescriptor(t) {
                        const e = this._stack,
                            o = e.findIndex((e) => e.id === t.id);
                        if (pm(t, e[o])) return;
                        o > -1 && e.splice(o, 1);
                        let i = 0;
                        for (; e[i] && bm(e[i], t); ) i++;
                        e.splice(i, 0, t);
                    }
                    _removeDescriptor(t) {
                        const e = this._stack,
                            o = e.findIndex((e) => e.id === t);
                        o > -1 && e.splice(o, 1);
                    }
                }
                function pm(t, e) {
                    return t && e && t.priority == e.priority && wm(t.classes) == wm(e.classes);
                }
                function bm(t, e) {
                    return t.priority > e.priority || (!(t.priority < e.priority) && wm(t.classes) > wm(e.classes));
                }
                function wm(t) {
                    return Array.isArray(t) ? t.sort().join(',') : t;
                }
                Kt(gm, h);
                function km(t) {
                    return !!t.is('element') && !!t.getCustomProperty('widget');
                }
                function _m(t, e, o = {}) {
                    if (!t.is('containerElement'))
                        throw new l.a('widget-to-widget-wrong-element-type', null, { element: t });
                    return (
                        e.setAttribute('contenteditable', 'false', t),
                        e.addClass('ck-widget', t),
                        e.setCustomProperty('widget', !0, t),
                        (t.getFillerOffset = Pm),
                        o.label &&
                            (function (t, e, o) {
                                o.setCustomProperty('widgetLabel', e, t);
                            })(t, o.label, e),
                        o.hasSelectionHandle &&
                            (function (t, e) {
                                const o = e.createUIElement(
                                    'div',
                                    { class: 'ck ck-widget__selection-handle' },
                                    function (t) {
                                        const e = this.toDomElement(t),
                                            o = new id();
                                        return (
                                            o.set(
                                                'content',
                                                '<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M4 0v1H1v3H0V.5A.5.5 0 0 1 .5 0H4zm8 0h3.5a.5.5 0 0 1 .5.5V4h-1V1h-3V0zM4 16H.5a.5.5 0 0 1-.5-.5V12h1v3h3v1zm8 0v-1h3v-3h1v3.5a.5.5 0 0 1-.5.5H12z"/><path fill-opacity=".256" d="M1 1h14v14H1z"/><g class="ck-icon__selected-indicator"><path d="M7 0h2v1H7V0zM0 7h1v2H0V7zm15 0h1v2h-1V7zm-8 8h2v1H7v-1z"/><path fill-opacity=".254" d="M1 1h14v14H1z"/></g></svg>',
                                            ),
                                            o.render(),
                                            e.appendChild(o.element),
                                            e
                                        );
                                    },
                                );
                                e.insert(e.createPositionAt(t, 0), o),
                                    e.addClass(['ck-widget_with-selection-handle'], t);
                            })(t, e),
                        vm(
                            t,
                            e,
                            (t, e, o) => o.addClass(Zo(e.classes), t),
                            (t, e, o) => o.removeClass(Zo(e.classes), t),
                        ),
                        t
                    );
                }
                function vm(t, e, o, i) {
                    const n = new gm();
                    n.on('change:top', (e, n) => {
                        n.oldDescriptor && i(t, n.oldDescriptor, n.writer),
                            n.newDescriptor && o(t, n.newDescriptor, n.writer);
                    }),
                        e.setCustomProperty('addHighlight', (t, e, o) => n.add(e, o), t),
                        e.setCustomProperty('removeHighlight', (t, e, o) => n.remove(e, o), t);
                }
                function ym(t) {
                    const e = t.getCustomProperty('widgetLabel');
                    return e ? ('function' == typeof e ? e() : e) : '';
                }
                function xm(t, e) {
                    return (
                        e.addClass(['ck-editor__editable', 'ck-editor__nested-editable'], t),
                        e.setAttribute('contenteditable', t.isReadOnly ? 'false' : 'true', t),
                        t.on('change:isReadOnly', (o, i, n) => {
                            e.setAttribute('contenteditable', n ? 'false' : 'true', t);
                        }),
                        t.on('change:isFocused', (o, i, n) => {
                            n
                                ? e.addClass('ck-editor__nested-editable_focused', t)
                                : e.removeClass('ck-editor__nested-editable_focused', t);
                        }),
                        t
                    );
                }
                function Cm(t, e) {
                    const o = t.getSelectedElement();
                    if (o) {
                        const i = Em(t);
                        if (i) return e.createPositionAt(o, i);
                        if (e.schema.isBlock(o)) return e.createPositionAfter(o);
                    }
                    const i = t.getSelectedBlocks().next().value;
                    if (i) {
                        if (i.isEmpty) return e.createPositionAt(i, 0);
                        const o = e.createPositionAfter(i);
                        return t.focus.isTouching(o) ? o : e.createPositionBefore(i);
                    }
                    return t.focus;
                }
                function Am(t, e) {
                    const o = t.getSelectedElement();
                    return !!o && e.isObject(o);
                }
                function Tm(t, e) {
                    const o = new us(dr.window),
                        i = o.getIntersection(t),
                        n = e.height + Yd.arrowVerticalOffset;
                    if (t.top - n > o.top || t.bottom + n < o.bottom) return null;
                    const r = i || t,
                        s = r.left + r.width / 2 - e.width / 2;
                    return { top: Math.max(t.top, 0) + Yd.arrowVerticalOffset, left: s, name: 'arrow_n' };
                }
                function Pm() {
                    return null;
                }
                function Sm(t, e, o) {
                    return t && km(t) && !o.isInline(e);
                }
                function Em(t) {
                    return t.getAttribute('widget-type-around');
                }
                o(69);
                const Rm = ['before', 'after'],
                    Im = new DOMParser().parseFromString(
                        '<svg viewBox="0 0 10 8" xmlns="http://www.w3.org/2000/svg"><path d="M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2l2 2.038"/></svg>',
                        'image/svg+xml',
                    ).firstChild;
                class Vm extends Gt {
                    static get pluginName() {
                        return 'WidgetTypeAround';
                    }
                    constructor(t) {
                        super(t), (this._currentFakeCaretModelElement = null);
                    }
                    init() {
                        const t = this.editor,
                            e = t.editing.view;
                        this.on('change:isEnabled', (o, i, n) => {
                            e.change((t) => {
                                for (const o of e.document.roots)
                                    n
                                        ? t.removeClass('ck-widget__type-around_disabled', o)
                                        : t.addClass('ck-widget__type-around_disabled', o);
                            }),
                                n ||
                                    t.model.change((t) => {
                                        t.removeSelectionAttribute('widget-type-around');
                                    });
                        }),
                            this._enableTypeAroundUIInjection(),
                            this._enableInsertingParagraphsOnButtonClick(),
                            this._enableInsertingParagraphsOnEnterKeypress(),
                            this._enableInsertingParagraphsOnTypingKeystroke(),
                            this._enableTypeAroundFakeCaretActivationUsingKeyboardArrows(),
                            this._enableDeleteIntegration(),
                            this._enableInsertContentIntegration();
                    }
                    destroy() {
                        this._currentFakeCaretModelElement = null;
                    }
                    _insertParagraph(t, e) {
                        const o = this.editor,
                            i = o.editing.view;
                        o.execute('insertParagraph', { position: o.model.createPositionAt(t, e) }),
                            i.focus(),
                            i.scrollToTheSelection();
                    }
                    _listenToIfEnabled(t, e, o, i) {
                        this.listenTo(
                            t,
                            e,
                            (...t) => {
                                this.isEnabled && o(...t);
                            },
                            i,
                        );
                    }
                    _insertParagraphAccordingToFakeCaretPosition() {
                        const t = this.editor.model.document.selection,
                            e = Em(t);
                        if (!e) return !1;
                        const o = t.getSelectedElement();
                        return this._insertParagraph(o, e), !0;
                    }
                    _enableTypeAroundUIInjection() {
                        const t = this.editor,
                            e = t.model.schema,
                            o = t.locale.t,
                            i = {
                                before: o('Insert paragraph before block'),
                                after: o('Insert paragraph after block'),
                            };
                        t.editing.downcastDispatcher.on(
                            'insert',
                            (t, o, n) => {
                                const r = n.mapper.toViewElement(o.item);
                                Sm(r, o.item, e) &&
                                    (function (t, e, o) {
                                        const i = t.createUIElement(
                                            'div',
                                            { class: 'ck ck-reset_all ck-widget__type-around' },
                                            function (t) {
                                                const o = this.toDomElement(t);
                                                return (
                                                    (function (t, e) {
                                                        for (const o of Rm) {
                                                            const i = new Bc({
                                                                tag: 'div',
                                                                attributes: {
                                                                    class: [
                                                                        'ck',
                                                                        'ck-widget__type-around__button',
                                                                        'ck-widget__type-around__button_' + o,
                                                                    ],
                                                                    title: e[o],
                                                                },
                                                                children: [t.ownerDocument.importNode(Im, !0)],
                                                            });
                                                            t.appendChild(i.render());
                                                        }
                                                    })(o, e),
                                                    (function (t) {
                                                        const e = new Bc({
                                                            tag: 'div',
                                                            attributes: {
                                                                class: ['ck', 'ck-widget__type-around__fake-caret'],
                                                            },
                                                        });
                                                        t.appendChild(e.render());
                                                    })(o),
                                                    o
                                                );
                                            },
                                        );
                                        t.insert(t.createPositionAt(o, 'end'), i);
                                    })(n.writer, i, r);
                            },
                            { priority: 'low' },
                        );
                    }
                    _enableTypeAroundFakeCaretActivationUsingKeyboardArrows() {
                        const t = this.editor,
                            e = t.model,
                            o = e.document.selection,
                            i = e.schema,
                            n = t.editing.view;
                        function r(t) {
                            return 'ck-widget_type-around_show-fake-caret_' + t;
                        }
                        this._listenToIfEnabled(
                            n.document,
                            'keydown',
                            (t, e) => {
                                Tn(e.keyCode) && this._handleArrowKeyPress(t, e);
                            },
                            { priority: a.get('high') + 10 },
                        ),
                            this._listenToIfEnabled(o, 'change:range', (e, o) => {
                                o.directChange &&
                                    t.model.change((t) => {
                                        t.removeSelectionAttribute('widget-type-around');
                                    });
                            }),
                            this._listenToIfEnabled(e.document, 'change:data', () => {
                                const e = o.getSelectedElement();
                                if (e) {
                                    if (Sm(t.editing.mapper.toViewElement(e), e, i)) return;
                                }
                                t.model.change((t) => {
                                    t.removeSelectionAttribute('widget-type-around');
                                });
                            }),
                            this._listenToIfEnabled(t.editing.downcastDispatcher, 'selection', (t, e, o) => {
                                const n = o.writer;
                                if (this._currentFakeCaretModelElement) {
                                    const t = o.mapper.toViewElement(this._currentFakeCaretModelElement);
                                    t && (n.removeClass(Rm.map(r), t), (this._currentFakeCaretModelElement = null));
                                }
                                const s = e.selection.getSelectedElement();
                                if (!s) return;
                                const a = o.mapper.toViewElement(s);
                                if (!Sm(a, s, i)) return;
                                const l = Em(e.selection);
                                l && (n.addClass(r(l), a), (this._currentFakeCaretModelElement = s));
                            }),
                            this._listenToIfEnabled(t.ui.focusTracker, 'change:isFocused', (e, o, i) => {
                                i ||
                                    t.model.change((t) => {
                                        t.removeSelectionAttribute('widget-type-around');
                                    });
                            });
                    }
                    _handleArrowKeyPress(t, e) {
                        const o = this.editor,
                            i = o.model,
                            n = i.document.selection,
                            r = i.schema,
                            s = o.editing.view,
                            a = Sn(e.keyCode, o.locale.contentLanguageDirection),
                            l = s.document.selection.getSelectedElement();
                        let c;
                        Sm(l, o.editing.mapper.toModelElement(l), r)
                            ? (c = this._handleArrowKeyPressOnSelectedWidget(a))
                            : n.isCollapsed && (c = this._handleArrowKeyPressWhenSelectionNextToAWidget(a)),
                            c && (e.preventDefault(), t.stop());
                    }
                    _handleArrowKeyPressOnSelectedWidget(t) {
                        const e = this.editor.model,
                            o = Em(e.document.selection);
                        return e.change((e) => {
                            if (!o) return e.setSelectionAttribute('widget-type-around', t ? 'after' : 'before'), !0;
                            if (!(o === (t ? 'after' : 'before')))
                                return e.removeSelectionAttribute('widget-type-around'), !0;
                            return !1;
                        });
                    }
                    _handleArrowKeyPressWhenSelectionNextToAWidget(t) {
                        const e = this.editor,
                            o = e.model,
                            i = o.schema,
                            n = e.plugins.get('Widget'),
                            r = n._getObjectElementNextToSelection(t);
                        return (
                            !!Sm(e.editing.mapper.toViewElement(r), r, i) &&
                            (o.change((e) => {
                                n._setSelectionOverElement(r),
                                    e.setSelectionAttribute('widget-type-around', t ? 'before' : 'after');
                            }),
                            !0)
                        );
                    }
                    _enableInsertingParagraphsOnButtonClick() {
                        const t = this.editor,
                            e = t.editing.view;
                        this._listenToIfEnabled(e.document, 'mousedown', (o, i) => {
                            const n = i.domTarget.closest('.ck-widget__type-around__button');
                            if (!n) return;
                            const r = (function (t) {
                                    return t.classList.contains('ck-widget__type-around__button_before')
                                        ? 'before'
                                        : 'after';
                                })(n),
                                s = (function (t, e) {
                                    const o = t.closest('.ck-widget');
                                    return e.mapDomToView(o);
                                })(n, e.domConverter),
                                a = t.editing.mapper.toModelElement(s);
                            this._insertParagraph(a, r), i.preventDefault(), o.stop();
                        });
                    }
                    _enableInsertingParagraphsOnEnterKeypress() {
                        const t = this.editor,
                            e = t.editing.view;
                        this._listenToIfEnabled(e.document, 'enter', (o, i) => {
                            const n = e.document.selection.getSelectedElement(),
                                r = t.editing.mapper.toModelElement(n),
                                s = t.model.schema;
                            let a;
                            this._insertParagraphAccordingToFakeCaretPosition()
                                ? (a = !0)
                                : Sm(n, r, s) && (this._insertParagraph(r, i.isSoft ? 'before' : 'after'), (a = !0)),
                                a && (i.preventDefault(), o.stop());
                        });
                    }
                    _enableInsertingParagraphsOnTypingKeystroke() {
                        const t = this.editor.editing.view,
                            e = [vn.enter, vn.delete, vn.backspace];
                        this._listenToIfEnabled(
                            t.document,
                            'keydown',
                            (t, o) => {
                                e.includes(o.keyCode) || of(o) || this._insertParagraphAccordingToFakeCaretPosition();
                            },
                            { priority: a.get('high') + 1 },
                        );
                    }
                    _enableDeleteIntegration() {
                        const t = this.editor,
                            e = t.editing.view,
                            o = t.model,
                            i = o.schema;
                        this._listenToIfEnabled(
                            e.document,
                            'delete',
                            (e, n) => {
                                const r = Em(o.document.selection);
                                if (!r) return;
                                const s = n.direction,
                                    a = o.document.selection.getSelectedElement(),
                                    l = 'forward' == s;
                                if (('before' === r) === l)
                                    t.execute('delete', { selection: o.createSelection(a, 'on') });
                                else {
                                    const e = i.getNearestSelectionRange(o.createPositionAt(a, r), s);
                                    if (e)
                                        if (e.isCollapsed) {
                                            const n = o.createSelection(e.start);
                                            if ((o.modifySelection(n, { direction: s }), n.focus.isEqual(e.start))) {
                                                const t = (function (t, e) {
                                                    let o = e;
                                                    for (const i of e.getAncestors({ parentFirst: !0 })) {
                                                        if (i.childCount > 1 || t.isLimit(i)) break;
                                                        o = i;
                                                    }
                                                    return o;
                                                })(i, e.start.parent);
                                                o.deleteContent(o.createSelection(t, 'on'), { doNotAutoparagraph: !0 });
                                            } else
                                                o.change((o) => {
                                                    o.setSelection(e), t.execute(l ? 'deleteForward' : 'delete');
                                                });
                                        } else
                                            o.change((o) => {
                                                o.setSelection(e), t.execute(l ? 'deleteForward' : 'delete');
                                            });
                                }
                                n.preventDefault(), e.stop();
                            },
                            { priority: a.get('high') + 1 },
                        );
                    }
                    _enableInsertContentIntegration() {
                        const t = this.editor,
                            e = this.editor.model,
                            o = e.document.selection;
                        this._listenToIfEnabled(
                            t.model,
                            'insertContent',
                            (t, [i, n]) => {
                                if (n && !n.is('documentSelection')) return;
                                const r = Em(o);
                                return r
                                    ? (t.stop(),
                                      e.change((t) => {
                                          const n = o.getSelectedElement(),
                                              s = e.createPositionAt(n, r),
                                              a = t.createSelection(s),
                                              l = e.insertContent(i, a);
                                          return t.setSelection(a), l;
                                      }))
                                    : void 0;
                            },
                            { priority: 'high' },
                        );
                    }
                }
                o(71);
                function Om(t) {
                    const e = t.model;
                    return (o, i) => {
                        const n = i.keyCode == vn.arrowup,
                            r = i.keyCode == vn.arrowdown,
                            s = i.shiftKey,
                            a = e.document.selection;
                        if (!n && !r) return;
                        const l = r;
                        if (
                            s &&
                            (function (t, e) {
                                return !t.isCollapsed && t.isBackward == e;
                            })(a, l)
                        )
                            return;
                        const c = (function (t, e, o) {
                            const i = t.model;
                            if (o) {
                                const t = e.isCollapsed ? e.focus : e.getLastPosition(),
                                    o = zm(i, t, 'forward');
                                if (!o) return null;
                                const n = i.createRange(t, o),
                                    r = Mm(i.schema, n, 'backward');
                                return r && t.isBefore(r) ? i.createRange(t, r) : null;
                            }
                            {
                                const t = e.isCollapsed ? e.focus : e.getFirstPosition(),
                                    o = zm(i, t, 'backward');
                                if (!o) return null;
                                const n = i.createRange(o, t),
                                    r = Mm(i.schema, n, 'forward');
                                return r && t.isAfter(r) ? i.createRange(r, t) : null;
                            }
                        })(t, a, l);
                        c &&
                            !c.isCollapsed &&
                            (function (t, e, o) {
                                const i = t.model,
                                    n = t.view.domConverter;
                                if (o) {
                                    const t = i.createSelection(e.start);
                                    i.modifySelection(t),
                                        t.focus.isAtEnd ||
                                            e.start.isEqual(t.focus) ||
                                            (e = i.createRange(t.focus, e.end));
                                }
                                const r = t.mapper.toViewRange(e),
                                    s = n.viewRangeToDom(r),
                                    a = us.getDomRangeRects(s);
                                let l;
                                for (const t of a)
                                    if (void 0 !== l) {
                                        if (Math.round(t.top) >= l) return !1;
                                        l = Math.max(l, Math.round(t.bottom));
                                    } else l = Math.round(t.bottom);
                                return !0;
                            })(t, c, l) &&
                            (e.change((t) => {
                                const o = l ? c.end : c.start;
                                if (s) {
                                    const i = e.createSelection(a.anchor);
                                    i.setFocus(o), t.setSelection(i);
                                } else t.setSelection(o);
                            }),
                            o.stop(),
                            i.preventDefault(),
                            i.stopPropagation());
                    };
                }
                function zm(t, e, o) {
                    const i = t.schema,
                        n = t.createRangeIn(e.root),
                        r = 'forward' == o ? 'elementStart' : 'elementEnd';
                    for (const { previousPosition: t, item: s, type: a } of n.getWalker({
                        startPosition: e,
                        direction: o,
                    })) {
                        if (i.isLimit(s) && !i.isInline(s)) return t;
                        if (a == r && i.isBlock(s)) return null;
                    }
                    return null;
                }
                function Mm(t, e, o) {
                    const i = 'backward' == o ? e.end : e.start;
                    if (t.checkChild(i, '$text')) return i;
                    for (const { nextPosition: i } of e.getWalker({ direction: o }))
                        if (t.checkChild(i, '$text')) return i;
                }
                class Nm extends Gt {
                    static get pluginName() {
                        return 'Widget';
                    }
                    static get requires() {
                        return [Vm];
                    }
                    init() {
                        const t = this.editor.editing.view,
                            e = t.document;
                        (this._previouslySelected = new Set()),
                            this.editor.editing.downcastDispatcher.on(
                                'selection',
                                (t, e, o) => {
                                    this._clearPreviouslySelectedWidgets(o.writer);
                                    const i = o.writer,
                                        n = i.document.selection,
                                        r = n.getSelectedElement();
                                    let s = null;
                                    for (const t of n.getRanges())
                                        for (const e of t) {
                                            const t = e.item;
                                            km(t) &&
                                                !Bm(t, s) &&
                                                (i.addClass('ck-widget_selected', t),
                                                this._previouslySelected.add(t),
                                                (s = t),
                                                t == r && i.setSelection(n.getRanges(), { fake: !0, label: ym(r) }));
                                        }
                                },
                                { priority: 'low' },
                            ),
                            t.addObserver(xh),
                            this.listenTo(e, 'mousedown', (...t) => this._onMousedown(...t)),
                            this.listenTo(
                                e,
                                'keydown',
                                (...t) => {
                                    this._handleSelectionChangeOnArrowKeyPress(...t);
                                },
                                { priority: 'high' },
                            ),
                            this.listenTo(
                                e,
                                'keydown',
                                (...t) => {
                                    this._preventDefaultOnArrowKeyPress(...t);
                                },
                                { priority: a.get('high') - 20 },
                            ),
                            this.listenTo(e, 'keydown', Om(this.editor.editing)),
                            this.listenTo(
                                e,
                                'delete',
                                (t, e) => {
                                    this._handleDelete('forward' == e.direction) && (e.preventDefault(), t.stop());
                                },
                                { priority: 'high' },
                            );
                    }
                    _onMousedown(t, e) {
                        const o = this.editor,
                            i = o.editing.view,
                            n = i.document;
                        let r = e.target;
                        if (
                            (function (t) {
                                for (; t; ) {
                                    if (t.is('editableElement') && !t.is('rootElement')) return !0;
                                    if (km(t)) return !1;
                                    t = t.parent;
                                }
                                return !1;
                            })(r)
                        ) {
                            if ((wn.isSafari || wn.isGecko) && e.domEvent.detail >= 3) {
                                const t = o.editing.mapper,
                                    i = r.is('attributeElement') ? r.findAncestor((t) => !t.is('attributeElement')) : r,
                                    n = t.toModelElement(i);
                                e.preventDefault(),
                                    this.editor.model.change((t) => {
                                        t.setSelection(n, 'in');
                                    });
                            }
                            return;
                        }
                        if (!km(r) && ((r = r.findAncestor(km)), !r)) return;
                        e.preventDefault(), n.isFocused || i.focus();
                        const s = o.editing.mapper.toModelElement(r);
                        this._setSelectionOverElement(s);
                    }
                    _handleSelectionChangeOnArrowKeyPress(t, e) {
                        const o = e.keyCode;
                        if (!Tn(o)) return;
                        const i = this.editor.model,
                            n = i.schema,
                            r = i.document.selection,
                            s = r.getSelectedElement(),
                            a = Sn(o, this.editor.locale.contentLanguageDirection);
                        if (s && n.isObject(s)) {
                            const o = a ? r.getLastPosition() : r.getFirstPosition(),
                                s = n.getNearestSelectionRange(o, a ? 'forward' : 'backward');
                            return void (
                                s &&
                                (i.change((t) => {
                                    t.setSelection(s);
                                }),
                                e.preventDefault(),
                                t.stop())
                            );
                        }
                        if (!r.isCollapsed) return;
                        const l = this._getObjectElementNextToSelection(a);
                        l && n.isObject(l) && (this._setSelectionOverElement(l), e.preventDefault(), t.stop());
                    }
                    _preventDefaultOnArrowKeyPress(t, e) {
                        if (!Tn(e.keyCode)) return;
                        const o = this.editor.model,
                            i = o.schema,
                            n = o.document.selection.getSelectedElement();
                        n && i.isObject(n) && (e.preventDefault(), t.stop());
                    }
                    _handleDelete(t) {
                        if (this.editor.isReadOnly) return;
                        const e = this.editor.model.document.selection;
                        if (!e.isCollapsed) return;
                        const o = this._getObjectElementNextToSelection(t);
                        return o
                            ? (this.editor.model.change((t) => {
                                  let i = e.anchor.parent;
                                  for (; i.isEmpty; ) {
                                      const e = i;
                                      (i = e.parent), t.remove(e);
                                  }
                                  this._setSelectionOverElement(o);
                              }),
                              !0)
                            : void 0;
                    }
                    _setSelectionOverElement(t) {
                        this.editor.model.change((e) => {
                            e.setSelection(e.createRangeOn(t));
                        });
                    }
                    _getObjectElementNextToSelection(t) {
                        const e = this.editor.model,
                            o = e.schema,
                            i = e.document.selection,
                            n = e.createSelection(i);
                        e.modifySelection(n, { direction: t ? 'forward' : 'backward' });
                        const r = t ? n.focus.nodeBefore : n.focus.nodeAfter;
                        return r && o.isObject(r) ? r : null;
                    }
                    _clearPreviouslySelectedWidgets(t) {
                        for (const e of this._previouslySelected) t.removeClass('ck-widget_selected', e);
                        this._previouslySelected.clear();
                    }
                }
                function Bm(t, e) {
                    return !!e && Array.from(t.getAncestors()).includes(e);
                }
                class Fm extends Gt {
                    static get requires() {
                        return [eh];
                    }
                    static get pluginName() {
                        return 'WidgetToolbarRepository';
                    }
                    init() {
                        const t = this.editor;
                        if (t.plugins.has('BalloonToolbar')) {
                            const e = t.plugins.get('BalloonToolbar');
                            this.listenTo(
                                e,
                                'show',
                                (e) => {
                                    (function (t) {
                                        const e = t.getSelectedElement();
                                        return !(!e || !km(e));
                                    })(t.editing.view.document.selection) && e.stop();
                                },
                                { priority: 'high' },
                            );
                        }
                        (this._toolbarDefinitions = new Map()),
                            (this._balloon = this.editor.plugins.get('ContextualBalloon')),
                            this.on('change:isEnabled', () => {
                                this._updateToolbarsVisibility();
                            }),
                            this.listenTo(t.ui, 'update', () => {
                                this._updateToolbarsVisibility();
                            }),
                            this.listenTo(
                                t.ui.focusTracker,
                                'change:isFocused',
                                () => {
                                    this._updateToolbarsVisibility();
                                },
                                { priority: 'low' },
                            );
                    }
                    destroy() {
                        super.destroy();
                        for (const t of this._toolbarDefinitions.values()) t.view.destroy();
                    }
                    register(
                        t,
                        { ariaLabel: e, items: o, getRelatedElement: i, balloonClassName: n = 'ck-toolbar-container' },
                    ) {
                        if (!o.length) return void Object(l.b)('widget-toolbar-no-items', { toolbarId: t });
                        const r = this.editor,
                            s = r.t,
                            a = new Td(r.locale);
                        if (((a.ariaLabel = e || s('Widget toolbar')), this._toolbarDefinitions.has(t)))
                            throw new l.a('widget-toolbar-duplicated', this, { toolbarId: t });
                        a.fillFromConfig(o, r.ui.componentFactory),
                            this._toolbarDefinitions.set(t, { view: a, getRelatedElement: i, balloonClassName: n });
                    }
                    _updateToolbarsVisibility() {
                        let t = 0,
                            e = null,
                            o = null;
                        for (const i of this._toolbarDefinitions.values()) {
                            const n = i.getRelatedElement(this.editor.editing.view.document.selection);
                            if (this.isEnabled && n)
                                if (this.editor.ui.focusTracker.isFocused) {
                                    const r = n.getAncestors().length;
                                    r > t && ((t = r), (e = n), (o = i));
                                } else this._isToolbarVisible(i) && this._hideToolbar(i);
                            else this._isToolbarInBalloon(i) && this._hideToolbar(i);
                        }
                        o && this._showToolbar(o, e);
                    }
                    _hideToolbar(t) {
                        this._balloon.remove(t.view), this.stopListening(this._balloon, 'change:visibleView');
                    }
                    _showToolbar(t, e) {
                        this._isToolbarVisible(t)
                            ? Dm(this.editor, e)
                            : this._isToolbarInBalloon(t) ||
                              (this._balloon.add({
                                  view: t.view,
                                  position: Lm(this.editor, e),
                                  balloonClassName: t.balloonClassName,
                              }),
                              this.listenTo(this._balloon, 'change:visibleView', () => {
                                  for (const t of this._toolbarDefinitions.values())
                                      if (this._isToolbarVisible(t)) {
                                          const e = t.getRelatedElement(this.editor.editing.view.document.selection);
                                          Dm(this.editor, e);
                                      }
                              }));
                    }
                    _isToolbarVisible(t) {
                        return this._balloon.visibleView === t.view;
                    }
                    _isToolbarInBalloon(t) {
                        return this._balloon.hasView(t.view);
                    }
                }
                function Dm(t, e) {
                    const o = t.plugins.get('ContextualBalloon'),
                        i = Lm(t, e);
                    o.updatePosition(i);
                }
                function Lm(t, e) {
                    const o = t.editing.view,
                        i = Yd.defaultPositions;
                    return {
                        target: o.domConverter.mapViewToDom(e),
                        positions: [
                            i.northArrowSouth,
                            i.northArrowSouthWest,
                            i.northArrowSouthEast,
                            i.southArrowNorth,
                            i.southArrowNorthWest,
                            i.southArrowNorthEast,
                            Tm,
                        ],
                    };
                }
                class Hm {
                    constructor(t) {
                        this.set('activeHandlePosition', null),
                            this.set('proposedWidthPercents', null),
                            this.set('proposedWidth', null),
                            this.set('proposedHeight', null),
                            this.set('proposedHandleHostWidth', null),
                            this.set('proposedHandleHostHeight', null),
                            (this._options = t),
                            (this._referenceCoordinates = null);
                    }
                    begin(t, e, o) {
                        const i = new us(e);
                        (this.activeHandlePosition = (function (t) {
                            const e = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];
                            for (const o of e) if (t.classList.contains('ck-widget__resizer__handle-' + o)) return o;
                        })(t)),
                            (this._referenceCoordinates = (function (t, e) {
                                const o = new us(t),
                                    i = e.split('-'),
                                    n = {
                                        x: 'right' == i[1] ? o.right : o.left,
                                        y: 'bottom' == i[0] ? o.bottom : o.top,
                                    };
                                return (
                                    (n.x += t.ownerDocument.defaultView.scrollX),
                                    (n.y += t.ownerDocument.defaultView.scrollY),
                                    n
                                );
                            })(
                                e,
                                (function (t) {
                                    const e = t.split('-'),
                                        o = { top: 'bottom', bottom: 'top', left: 'right', right: 'left' };
                                    return `${o[e[0]]}-${o[e[1]]}`;
                                })(this.activeHandlePosition),
                            )),
                            (this.originalWidth = i.width),
                            (this.originalHeight = i.height),
                            (this.aspectRatio = i.width / i.height);
                        const n = o.style.width;
                        n && n.match(/^\d+\.?\d*%$/)
                            ? (this.originalWidthPercents = parseFloat(n))
                            : (this.originalWidthPercents = (function (t, e) {
                                  const o = t.parentElement,
                                      i = parseFloat(o.ownerDocument.defaultView.getComputedStyle(o).width);
                                  return (e.width / i) * 100;
                              })(o, i));
                    }
                    update(t) {
                        (this.proposedWidth = t.width),
                            (this.proposedHeight = t.height),
                            (this.proposedWidthPercents = t.widthPercents),
                            (this.proposedHandleHostWidth = t.handleHostWidth),
                            (this.proposedHandleHostHeight = t.handleHostHeight);
                    }
                }
                Kt(Hm, Ht);
                class jm {
                    constructor(t) {
                        (this._options = t),
                            (this._domResizerWrapper = null),
                            (this._viewResizerWrapper = null),
                            this.set('isEnabled', !0),
                            this.decorate('begin'),
                            this.decorate('cancel'),
                            this.decorate('commit'),
                            this.decorate('updateSize'),
                            this.on(
                                'commit',
                                (t) => {
                                    this.state.proposedWidth ||
                                        this.state.proposedWidthPercents ||
                                        (this._cleanup(), t.stop());
                                },
                                { priority: 'high' },
                            ),
                            this.on('change:isEnabled', () => {
                                this.isEnabled && this.redraw();
                            });
                    }
                    attach() {
                        const t = this,
                            e = this._options.viewElement;
                        this._options.editor.editing.view.change((o) => {
                            const i = o.createUIElement(
                                'div',
                                { class: 'ck ck-reset_all ck-widget__resizer' },
                                function (e) {
                                    const o = this.toDomElement(e);
                                    return (
                                        t._appendHandles(o),
                                        t._appendSizeUI(o),
                                        (t._domResizerWrapper = o),
                                        t.on('change:isEnabled', (t, e, i) => {
                                            o.style.display = i ? '' : 'none';
                                        }),
                                        (o.style.display = t.isEnabled ? '' : 'none'),
                                        o
                                    );
                                },
                            );
                            o.insert(o.createPositionAt(e, 'end'), i),
                                o.addClass('ck-widget_with-resizer', e),
                                (this._viewResizerWrapper = i);
                        });
                    }
                    begin(t) {
                        (this.state = new Hm(this._options)),
                            this._sizeUI.bindToState(this._options, this.state),
                            (this._initialViewWidth = this._options.viewElement.getStyle('width')),
                            this.state.begin(t, this._getHandleHost(), this._getResizeHost());
                    }
                    updateSize(t) {
                        const e = this._proposeNewSize(t);
                        this._options.editor.editing.view.change((t) => {
                            const o = this._options.unit || '%',
                                i = ('%' === o ? e.widthPercents : e.width) + o;
                            t.setStyle('width', i, this._options.viewElement);
                        });
                        const o = this._getHandleHost(),
                            i = new us(o);
                        (e.handleHostWidth = Math.round(i.width)), (e.handleHostHeight = Math.round(i.height));
                        const n = new us(o);
                        (e.width = Math.round(n.width)),
                            (e.height = Math.round(n.height)),
                            this.redraw(i),
                            this.state.update(e);
                    }
                    commit() {
                        const t = this._options.unit || '%',
                            e = ('%' === t ? this.state.proposedWidthPercents : this.state.proposedWidth) + t;
                        this._options.editor.editing.view.change(() => {
                            this._cleanup(), this._options.onCommit(e);
                        });
                    }
                    cancel() {
                        this._cleanup();
                    }
                    destroy() {
                        this.cancel();
                    }
                    redraw(t) {
                        const e = this._domResizerWrapper;
                        if (!((o = e) && o.ownerDocument && o.ownerDocument.contains(o))) return;
                        var o;
                        const i = e.parentElement,
                            n = this._getHandleHost(),
                            r = this._viewResizerWrapper,
                            s = [r.getStyle('width'), r.getStyle('height'), r.getStyle('left'), r.getStyle('top')];
                        let a;
                        if (i.isSameNode(n)) {
                            const e = t || new us(n);
                            a = [e.width + 'px', e.height + 'px', void 0, void 0];
                        } else
                            a = [n.offsetWidth + 'px', n.offsetHeight + 'px', n.offsetLeft + 'px', n.offsetTop + 'px'];
                        'same' !== ri(s, a) &&
                            this._options.editor.editing.view.change((t) => {
                                t.setStyle({ width: a[0], height: a[1], left: a[2], top: a[3] }, r);
                            });
                    }
                    containsHandle(t) {
                        return this._domResizerWrapper.contains(t);
                    }
                    static isResizeHandle(t) {
                        return t.classList.contains('ck-widget__resizer__handle');
                    }
                    _cleanup() {
                        this._sizeUI.dismiss(), (this._sizeUI.isVisible = !1);
                        this._options.editor.editing.view.change((t) => {
                            t.setStyle('width', this._initialViewWidth, this._options.viewElement);
                        });
                    }
                    _proposeNewSize(t) {
                        const e = this.state,
                            o = { x: (i = t).pageX, y: i.pageY };
                        var i;
                        const n = !this._options.isCentered || this._options.isCentered(this),
                            r = {
                                x: e._referenceCoordinates.x - (o.x + e.originalWidth),
                                y: o.y - e.originalHeight - e._referenceCoordinates.y,
                            };
                        n &&
                            e.activeHandlePosition.endsWith('-right') &&
                            (r.x = o.x - (e._referenceCoordinates.x + e.originalWidth)),
                            n && (r.x *= 2);
                        const s = { width: Math.abs(e.originalWidth + r.x), height: Math.abs(e.originalHeight + r.y) };
                        (s.dominant = s.width / e.aspectRatio > s.height ? 'width' : 'height'), (s.max = s[s.dominant]);
                        const a = { width: s.width, height: s.height };
                        return (
                            'width' == s.dominant
                                ? (a.height = a.width / e.aspectRatio)
                                : (a.width = a.height * e.aspectRatio),
                            {
                                width: Math.round(a.width),
                                height: Math.round(a.height),
                                widthPercents: Math.min(
                                    Math.round((e.originalWidthPercents / e.originalWidth) * a.width * 100) / 100,
                                    100,
                                ),
                            }
                        );
                    }
                    _getResizeHost() {
                        const t = this._domResizerWrapper.parentElement;
                        return this._options.getResizeHost(t);
                    }
                    _getHandleHost() {
                        const t = this._domResizerWrapper.parentElement;
                        return this._options.getHandleHost(t);
                    }
                    _appendHandles(t) {
                        const e = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];
                        for (const i of e)
                            t.appendChild(
                                new Bc({
                                    tag: 'div',
                                    attributes: {
                                        class:
                                            'ck-widget__resizer__handle ' +
                                            ((o = i), 'ck-widget__resizer__handle-' + o),
                                    },
                                }).render(),
                            );
                        var o;
                    }
                    _appendSizeUI(t) {
                        const e = new Wm();
                        e.render(), (this._sizeUI = e), t.appendChild(e.element);
                    }
                }
                Kt(jm, Ht);
                class Wm extends Nc {
                    constructor() {
                        super();
                        const t = this.bindTemplate;
                        this.setTemplate({
                            tag: 'div',
                            attributes: {
                                class: [
                                    'ck',
                                    'ck-size-view',
                                    t.to('activeHandlePosition', (t) => (t ? 'ck-orientation-' + t : '')),
                                ],
                                style: { display: t.if('isVisible', 'none', (t) => !t) },
                            },
                            children: [{ text: t.to('label') }],
                        });
                    }
                    bindToState(t, e) {
                        this.bind('isVisible').to(
                            e,
                            'proposedWidth',
                            e,
                            'proposedHeight',
                            (t, e) => null !== t && null !== e,
                        ),
                            this.bind('label').to(
                                e,
                                'proposedHandleHostWidth',
                                e,
                                'proposedHandleHostHeight',
                                e,
                                'proposedWidthPercents',
                                (e, o, i) => ('px' === t.unit ? `${e}×${o}` : i + '%'),
                            ),
                            this.bind('activeHandlePosition').to(e);
                    }
                    dismiss() {
                        this.unbind(), (this.isVisible = !1);
                    }
                }
                var qm = function (t, e, o) {
                    var i = !0,
                        n = !0;
                    if ('function' != typeof t) throw new TypeError('Expected a function');
                    return (
                        w(o) && ((i = 'leading' in o ? !!o.leading : i), (n = 'trailing' in o ? !!o.trailing : n)),
                        is(t, e, { leading: i, maxWait: e, trailing: n })
                    );
                };
                o(73);
                class Um extends Gt {
                    static get pluginName() {
                        return 'WidgetResize';
                    }
                    init() {
                        this.set('visibleResizer', null),
                            this.set('_activeResizer', null),
                            (this._resizers = new Map());
                        const t = dr.window.document;
                        this.editor.model.schema.setAttributeProperties('width', { isFormatting: !0 }),
                            this.editor.editing.view.addObserver(xh),
                            (this._observer = Object.create(kr)),
                            this.listenTo(
                                this.editor.editing.view.document,
                                'mousedown',
                                this._mouseDownListener.bind(this),
                                { priority: 'high' },
                            ),
                            this._observer.listenTo(t, 'mousemove', this._mouseMoveListener.bind(this)),
                            this._observer.listenTo(t, 'mouseup', this._mouseUpListener.bind(this));
                        const e = () => {
                                this.visibleResizer && this.visibleResizer.redraw();
                            },
                            o = qm(e, 200);
                        this.on('change:visibleResizer', e),
                            this.editor.ui.on('update', o),
                            this._observer.listenTo(dr.window, 'resize', o);
                        const i = this.editor.editing.view.document.selection;
                        i.on('change', () => {
                            const t = i.getSelectedElement();
                            this.visibleResizer = this.getResizerByViewElement(t) || null;
                        });
                    }
                    destroy() {
                        this._observer.stopListening();
                        for (const t of this._resizers.values()) t.destroy();
                    }
                    attachTo(t) {
                        const e = new jm(t),
                            o = this.editor.plugins;
                        if ((e.attach(), o.has('WidgetToolbarRepository'))) {
                            const t = o.get('WidgetToolbarRepository');
                            e.on(
                                'begin',
                                () => {
                                    t.forceDisabled('resize');
                                },
                                { priority: 'lowest' },
                            ),
                                e.on(
                                    'cancel',
                                    () => {
                                        t.clearForceDisabled('resize');
                                    },
                                    { priority: 'highest' },
                                ),
                                e.on(
                                    'commit',
                                    () => {
                                        t.clearForceDisabled('resize');
                                    },
                                    { priority: 'highest' },
                                );
                        }
                        this._resizers.set(t.viewElement, e);
                        const i = this.editor.editing.view.document.selection.getSelectedElement();
                        return this.getResizerByViewElement(i) == e && (this.visibleResizer = e), e;
                    }
                    getResizerByViewElement(t) {
                        return this._resizers.get(t);
                    }
                    _getResizerByHandle(t) {
                        for (const e of this._resizers.values()) if (e.containsHandle(t)) return e;
                    }
                    _mouseDownListener(t, e) {
                        const o = e.domTarget;
                        jm.isResizeHandle(o) &&
                            ((this._activeResizer = this._getResizerByHandle(o)),
                            this._activeResizer && (this._activeResizer.begin(o), t.stop(), e.preventDefault()));
                    }
                    _mouseMoveListener(t, e) {
                        this._activeResizer && this._activeResizer.updateSize(e);
                    }
                    _mouseUpListener() {
                        this._activeResizer && (this._activeResizer.commit(), (this._activeResizer = null));
                    }
                }
                Kt(Um, Ht);
                class $m extends Yt {
                    refresh() {
                        this.isEnabled = (function (t) {
                            const e = t.schema,
                                o = t.document.selection;
                            return (
                                (function (t, e, o) {
                                    const i = (function (t, e) {
                                        const o = Cm(t, e).parent;
                                        if (o.isEmpty && !o.is('element', '$root')) return o.parent;
                                        return o;
                                    })(t, o);
                                    return e.checkChild(i, 'horizontalLine');
                                })(o, e, t) && !Am(o, e)
                            );
                        })(this.editor.model);
                    }
                    execute() {
                        const t = this.editor.model;
                        t.change((e) => {
                            const o = e.createElement('horizontalLine');
                            t.insertContent(o);
                            let i = o.nextSibling;
                            !(i && t.schema.checkChild(i, '$text')) &&
                                t.schema.checkChild(o.parent, 'paragraph') &&
                                ((i = e.createElement('paragraph')), t.insertContent(i, e.createPositionAfter(o))),
                                i && e.setSelection(i, 0);
                        });
                    }
                }
                o(75);
                class Km extends Gt {
                    static get pluginName() {
                        return 'HorizontalLineEditing';
                    }
                    init() {
                        const t = this.editor,
                            e = t.model.schema,
                            o = t.t,
                            i = t.conversion;
                        e.register('horizontalLine', { isObject: !0, allowWhere: '$block' }),
                            i.for('dataDowncast').elementToElement({
                                model: 'horizontalLine',
                                view: (t, { writer: e }) => e.createEmptyElement('hr'),
                            }),
                            i.for('editingDowncast').elementToElement({
                                model: 'horizontalLine',
                                view: (t, { writer: e }) => {
                                    const i = o('Horizontal line'),
                                        n = e.createContainerElement('div'),
                                        r = e.createEmptyElement('hr');
                                    return (
                                        e.addClass('ck-horizontal-line', n),
                                        e.setCustomProperty('hr', !0, n),
                                        e.insert(e.createPositionAt(n, 0), r),
                                        (function (t, e, o) {
                                            return e.setCustomProperty('horizontalLine', !0, t), _m(t, e, { label: o });
                                        })(n, e, i)
                                    );
                                },
                            }),
                            i.for('upcast').elementToElement({ view: 'hr', model: 'horizontalLine' }),
                            t.commands.add('horizontalLine', new $m(t));
                    }
                }
                class Gm extends Gt {
                    static get pluginName() {
                        return 'HorizontalLineUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.t;
                        t.ui.componentFactory.add('horizontalLine', (o) => {
                            const i = t.commands.get('horizontalLine'),
                                n = new rd(o);
                            return (
                                n.set({
                                    label: e('Horizontal line'),
                                    icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 9h16v2H2z"/></svg>',
                                    tooltip: !0,
                                }),
                                n.bind('isEnabled').to(i, 'isEnabled'),
                                this.listenTo(n, 'execute', () => {
                                    t.execute('horizontalLine'), t.editing.view.focus();
                                }),
                                n
                            );
                        });
                    }
                }
                class Jm extends yr {
                    observe(t) {
                        this.listenTo(
                            t,
                            'load',
                            (t, e) => {
                                const o = e.target;
                                this.checkShouldIgnoreEventFromTarget(o) || ('IMG' == o.tagName && this._fireEvents(e));
                            },
                            { useCapture: !0 },
                        );
                    }
                    _fireEvents(t) {
                        this.isEnabled && (this.document.fire('layoutChanged'), this.document.fire('imageLoaded', t));
                    }
                }
                function Ym(t) {
                    return !!t.getCustomProperty('image') && km(t);
                }
                function Xm(t) {
                    const e = t.getSelectedElement();
                    return e && Ym(e) ? e : null;
                }
                function Zm(t) {
                    return !!t && t.is('element', 'image');
                }
                function Qm(t, e = {}, o = null) {
                    t.change((i) => {
                        const n = i.createElement('image', e),
                            r = o || Cm(t.document.selection, t);
                        t.insertContent(n, r), n.parent && i.setSelection(n, 'on');
                    });
                }
                function tg(t) {
                    const e = t.schema,
                        o = t.document.selection;
                    return (
                        (function (t, e, o) {
                            const i = (function (t, e) {
                                const o = Cm(t, e).parent;
                                if (o.isEmpty && !o.is('element', '$root')) return o.parent;
                                return o;
                            })(t, o);
                            return e.checkChild(i, 'image');
                        })(o, e, t) &&
                        !Am(o, e) &&
                        (function (t) {
                            return [...t.focus.getAncestors()].every((t) => !t.is('element', 'image'));
                        })(o)
                    );
                }
                function eg(t) {
                    const e = [];
                    for (const o of t.getChildren()) e.push(o), o.is('element') && e.push(...o.getChildren());
                    return e.find((t) => t.is('element', 'img'));
                }
                function og(t) {
                    return (o) => {
                        o.on(`attribute:${t}:image`, e);
                    };
                    function e(t, e, o) {
                        if (!o.consumable.consume(e.item, t.name)) return;
                        const i = o.writer,
                            n = eg(o.mapper.toViewElement(e.item));
                        i.setAttribute(e.attributeKey, e.attributeNewValue || '', n);
                    }
                }
                class ig extends Yt {
                    refresh() {
                        this.isEnabled = tg(this.editor.model);
                    }
                    execute(t) {
                        const e = this.editor.model;
                        for (const o of Zo(t.source)) Qm(e, { src: o });
                    }
                }
                class ng extends Gt {
                    static get pluginName() {
                        return 'ImageEditing';
                    }
                    init() {
                        const t = this.editor,
                            e = t.model.schema,
                            o = t.t,
                            i = t.conversion;
                        t.editing.view.addObserver(Jm),
                            e.register('image', {
                                isObject: !0,
                                isBlock: !0,
                                allowWhere: '$block',
                                allowAttributes: ['alt', 'src', 'srcset'],
                            }),
                            i
                                .for('dataDowncast')
                                .elementToElement({ model: 'image', view: (t, { writer: e }) => rg(e) }),
                            i.for('editingDowncast').elementToElement({
                                model: 'image',
                                view: (t, { writer: e }) =>
                                    (function (t, e, o) {
                                        return (
                                            e.setCustomProperty('image', !0, t),
                                            _m(t, e, {
                                                label: function () {
                                                    const e = eg(t).getAttribute('alt');
                                                    return e ? `${e} ${o}` : o;
                                                },
                                            })
                                        );
                                    })(rg(e), e, o('image widget')),
                            }),
                            i
                                .for('downcast')
                                .add(og('src'))
                                .add(og('alt'))
                                .add(
                                    (function () {
                                        return (e) => {
                                            e.on('attribute:srcset:image', t);
                                        };
                                        function t(t, e, o) {
                                            if (!o.consumable.consume(e.item, t.name)) return;
                                            const i = o.writer,
                                                n = eg(o.mapper.toViewElement(e.item));
                                            if (null === e.attributeNewValue) {
                                                const t = e.attributeOldValue;
                                                t.data &&
                                                    (i.removeAttribute('srcset', n),
                                                    i.removeAttribute('sizes', n),
                                                    t.width && i.removeAttribute('width', n));
                                            } else {
                                                const t = e.attributeNewValue;
                                                t.data &&
                                                    (i.setAttribute('srcset', t.data, n),
                                                    i.setAttribute('sizes', '100vw', n),
                                                    t.width && i.setAttribute('width', t.width, n));
                                            }
                                        }
                                    })(),
                                ),
                            i
                                .for('upcast')
                                .elementToElement({
                                    view: { name: 'img', attributes: { src: !0 } },
                                    model: (t, { writer: e }) =>
                                        e.createElement('image', { src: t.getAttribute('src') }),
                                })
                                .attributeToAttribute({ view: { name: 'img', key: 'alt' }, model: 'alt' })
                                .attributeToAttribute({
                                    view: { name: 'img', key: 'srcset' },
                                    model: {
                                        key: 'srcset',
                                        value: (t) => {
                                            const e = { data: t.getAttribute('srcset') };
                                            return t.hasAttribute('width') && (e.width = t.getAttribute('width')), e;
                                        },
                                    },
                                })
                                .add(
                                    (function () {
                                        return (e) => {
                                            e.on('element:figure', t);
                                        };
                                        function t(t, e, o) {
                                            if (!o.consumable.test(e.viewItem, { name: !0, classes: 'image' })) return;
                                            const i = eg(e.viewItem);
                                            if (!i || !i.hasAttribute('src') || !o.consumable.test(i, { name: !0 }))
                                                return;
                                            const n = Ic(o.convertItem(i, e.modelCursor).modelRange.getItems());
                                            n && (o.convertChildren(e.viewItem, n), o.updateConversionResult(n, e));
                                        }
                                    })(),
                                );
                        const n = new ig(t);
                        t.commands.add('insertImage', n), t.commands.add('imageInsert', n);
                    }
                }
                function rg(t) {
                    const e = t.createEmptyElement('img'),
                        o = t.createContainerElement('figure', { class: 'image' });
                    return t.insert(t.createPositionAt(o, 0), e), o;
                }
                class sg extends Yt {
                    refresh() {
                        const t = this.editor.model.document.selection.getSelectedElement();
                        (this.isEnabled = Zm(t)),
                            Zm(t) && t.hasAttribute('alt') ? (this.value = t.getAttribute('alt')) : (this.value = !1);
                    }
                    execute(t) {
                        const e = this.editor.model,
                            o = e.document.selection.getSelectedElement();
                        e.change((e) => {
                            e.setAttribute('alt', t.newValue, o);
                        });
                    }
                }
                class ag extends Gt {
                    static get pluginName() {
                        return 'ImageTextAlternativeEditing';
                    }
                    init() {
                        this.editor.commands.add('imageTextAlternative', new sg(this.editor));
                    }
                }
                o(77), o(10);
                class lg extends Nc {
                    constructor(t) {
                        super(t);
                        const e = this.locale.t;
                        (this.focusTracker = new tc()),
                            (this.keystrokes = new Jl()),
                            (this.labeledInput = this._createLabeledInputView()),
                            (this.saveButtonView = this._createButton(e('Save'), sc, 'ck-button-save')),
                            (this.saveButtonView.type = 'submit'),
                            (this.cancelButtonView = this._createButton(e('Cancel'), rc, 'ck-button-cancel', 'cancel')),
                            (this._focusables = new Mc()),
                            (this._focusCycler = new hd({
                                focusables: this._focusables,
                                focusTracker: this.focusTracker,
                                keystrokeHandler: this.keystrokes,
                                actions: { focusPrevious: 'shift + tab', focusNext: 'tab' },
                            })),
                            this.setTemplate({
                                tag: 'form',
                                attributes: {
                                    class: ['ck', 'ck-text-alternative-form', 'ck-responsive-form'],
                                    tabindex: '-1',
                                },
                                children: [this.labeledInput, this.saveButtonView, this.cancelButtonView],
                            }),
                            Oc(this);
                    }
                    render() {
                        super.render(),
                            this.keystrokes.listenTo(this.element),
                            zc({ view: this }),
                            [this.labeledInput, this.saveButtonView, this.cancelButtonView].forEach((t) => {
                                this._focusables.add(t), this.focusTracker.add(t.element);
                            });
                    }
                    _createButton(t, e, o, i) {
                        const n = new rd(this.locale);
                        return (
                            n.set({ label: t, icon: e, tooltip: !0 }),
                            n.extendTemplate({ attributes: { class: o } }),
                            i && n.delegate('execute').to(this, i),
                            n
                        );
                    }
                    _createLabeledInputView() {
                        const t = this.locale.t,
                            e = new Wd(this.locale, qd);
                        return (e.label = t('Text alternative')), e;
                    }
                }
                function cg(t) {
                    const e = t.editing.view,
                        o = Yd.defaultPositions;
                    return {
                        target: e.domConverter.viewToDom(e.document.selection.getSelectedElement()),
                        positions: [
                            o.northArrowSouth,
                            o.northArrowSouthWest,
                            o.northArrowSouthEast,
                            o.southArrowNorth,
                            o.southArrowNorthWest,
                            o.southArrowNorthEast,
                        ],
                    };
                }
                class dg extends Gt {
                    static get requires() {
                        return [eh];
                    }
                    static get pluginName() {
                        return 'ImageTextAlternativeUI';
                    }
                    init() {
                        this._createButton(), this._createForm();
                    }
                    destroy() {
                        super.destroy(), this._form.destroy();
                    }
                    _createButton() {
                        const t = this.editor,
                            e = t.t;
                        t.ui.componentFactory.add('imageTextAlternative', (o) => {
                            const i = t.commands.get('imageTextAlternative'),
                                n = new rd(o);
                            return (
                                n.set({ label: e('Change image text alternative'), icon: lc, tooltip: !0 }),
                                n.bind('isEnabled').to(i, 'isEnabled'),
                                this.listenTo(n, 'execute', () => {
                                    this._showForm();
                                }),
                                n
                            );
                        });
                    }
                    _createForm() {
                        const t = this.editor,
                            e = t.editing.view.document;
                        (this._balloon = this.editor.plugins.get('ContextualBalloon')),
                            (this._form = new lg(t.locale)),
                            this._form.render(),
                            this.listenTo(this._form, 'submit', () => {
                                t.execute('imageTextAlternative', {
                                    newValue: this._form.labeledInput.fieldView.element.value,
                                }),
                                    this._hideForm(!0);
                            }),
                            this.listenTo(this._form, 'cancel', () => {
                                this._hideForm(!0);
                            }),
                            this._form.keystrokes.set('Esc', (t, e) => {
                                this._hideForm(!0), e();
                            }),
                            this.listenTo(t.ui, 'update', () => {
                                Xm(e.selection)
                                    ? this._isVisible &&
                                      (function (t) {
                                          const e = t.plugins.get('ContextualBalloon');
                                          if (Xm(t.editing.view.document.selection)) {
                                              const o = cg(t);
                                              e.updatePosition(o);
                                          }
                                      })(t)
                                    : this._hideForm(!0);
                            }),
                            Vc({
                                emitter: this._form,
                                activator: () => this._isVisible,
                                contextElements: [this._balloon.view.element],
                                callback: () => this._hideForm(),
                            });
                    }
                    _showForm() {
                        if (this._isVisible) return;
                        const t = this.editor,
                            e = t.commands.get('imageTextAlternative'),
                            o = this._form.labeledInput;
                        this._form.disableCssTransitions(),
                            this._isInBalloon || this._balloon.add({ view: this._form, position: cg(t) }),
                            (o.fieldView.value = o.fieldView.element.value = e.value || ''),
                            this._form.labeledInput.fieldView.select(),
                            this._form.enableCssTransitions();
                    }
                    _hideForm(t) {
                        this._isInBalloon &&
                            (this._form.focusTracker.isFocused && this._form.saveButtonView.focus(),
                            this._balloon.remove(this._form),
                            t && this.editor.editing.view.focus());
                    }
                    get _isVisible() {
                        return this._balloon.visibleView === this._form;
                    }
                    get _isInBalloon() {
                        return this._balloon.hasView(this._form);
                    }
                }
                class hg extends Gt {
                    static get requires() {
                        return [ag, dg];
                    }
                    static get pluginName() {
                        return 'ImageTextAlternative';
                    }
                }
                o(80);
                class ug {
                    constructor() {
                        const t = new window.FileReader();
                        (this._reader = t),
                            (this._data = void 0),
                            this.set('loaded', 0),
                            (t.onprogress = (t) => {
                                this.loaded = t.loaded;
                            });
                    }
                    get error() {
                        return this._reader.error;
                    }
                    get data() {
                        return this._data;
                    }
                    read(t) {
                        const e = this._reader;
                        return (
                            (this.total = t.size),
                            new Promise((o, i) => {
                                (e.onload = () => {
                                    const t = e.result;
                                    (this._data = t), o(t);
                                }),
                                    (e.onerror = () => {
                                        i('error');
                                    }),
                                    (e.onabort = () => {
                                        i('aborted');
                                    }),
                                    this._reader.readAsDataURL(t);
                            })
                        );
                    }
                    abort() {
                        this._reader.abort();
                    }
                }
                Kt(ug, Ht);
                class fg extends Gt {
                    static get pluginName() {
                        return 'FileRepository';
                    }
                    static get requires() {
                        return [nc];
                    }
                    init() {
                        (this.loaders = new Yo()),
                            this.loaders.on('add', () => this._updatePendingAction()),
                            this.loaders.on('remove', () => this._updatePendingAction()),
                            (this._loadersMap = new Map()),
                            (this._pendingAction = null),
                            this.set('uploaded', 0),
                            this.set('uploadTotal', null),
                            this.bind('uploadedPercent').to(this, 'uploaded', this, 'uploadTotal', (t, e) =>
                                e ? (t / e) * 100 : 0,
                            );
                    }
                    getLoader(t) {
                        return this._loadersMap.get(t) || null;
                    }
                    createLoader(t) {
                        if (!this.createUploadAdapter) return Object(l.b)('filerepository-no-upload-adapter'), null;
                        const e = new mg(Promise.resolve(t), this.createUploadAdapter);
                        return (
                            this.loaders.add(e),
                            this._loadersMap.set(t, e),
                            t instanceof Promise &&
                                e.file
                                    .then((t) => {
                                        this._loadersMap.set(t, e);
                                    })
                                    .catch(() => {}),
                            e.on('change:uploaded', () => {
                                let t = 0;
                                for (const e of this.loaders) t += e.uploaded;
                                this.uploaded = t;
                            }),
                            e.on('change:uploadTotal', () => {
                                let t = 0;
                                for (const e of this.loaders) e.uploadTotal && (t += e.uploadTotal);
                                this.uploadTotal = t;
                            }),
                            e
                        );
                    }
                    destroyLoader(t) {
                        const e = t instanceof mg ? t : this.getLoader(t);
                        e._destroy(),
                            this.loaders.remove(e),
                            this._loadersMap.forEach((t, o) => {
                                t === e && this._loadersMap.delete(o);
                            });
                    }
                    _updatePendingAction() {
                        const t = this.editor.plugins.get(nc);
                        if (this.loaders.length) {
                            if (!this._pendingAction) {
                                const e = this.editor.t,
                                    o = (t) => `${e('Upload in progress')} ${parseInt(t)}%.`;
                                (this._pendingAction = t.add(o(this.uploadedPercent))),
                                    this._pendingAction.bind('message').to(this, 'uploadedPercent', o);
                            }
                        } else t.remove(this._pendingAction), (this._pendingAction = null);
                    }
                }
                Kt(fg, Ht);
                class mg {
                    constructor(t, e) {
                        (this.id = s()),
                            (this._filePromiseWrapper = this._createFilePromiseWrapper(t)),
                            (this._adapter = e(this)),
                            (this._reader = new ug()),
                            this.set('status', 'idle'),
                            this.set('uploaded', 0),
                            this.set('uploadTotal', null),
                            this.bind('uploadedPercent').to(this, 'uploaded', this, 'uploadTotal', (t, e) =>
                                e ? (t / e) * 100 : 0,
                            ),
                            this.set('uploadResponse', null);
                    }
                    get file() {
                        return this._filePromiseWrapper
                            ? this._filePromiseWrapper.promise.then((t) => (this._filePromiseWrapper ? t : null))
                            : Promise.resolve(null);
                    }
                    get data() {
                        return this._reader.data;
                    }
                    read() {
                        if ('idle' != this.status) throw new l.a('filerepository-read-wrong-status', this);
                        return (
                            (this.status = 'reading'),
                            this.file
                                .then((t) => this._reader.read(t))
                                .then((t) => {
                                    if ('reading' !== this.status) throw this.status;
                                    return (this.status = 'idle'), t;
                                })
                                .catch((t) => {
                                    if ('aborted' === t) throw ((this.status = 'aborted'), 'aborted');
                                    throw ((this.status = 'error'), this._reader.error ? this._reader.error : t);
                                })
                        );
                    }
                    upload() {
                        if ('idle' != this.status) throw new l.a('filerepository-upload-wrong-status', this);
                        return (
                            (this.status = 'uploading'),
                            this.file
                                .then(() => this._adapter.upload())
                                .then((t) => ((this.uploadResponse = t), (this.status = 'idle'), t))
                                .catch((t) => {
                                    if ('aborted' === this.status) throw 'aborted';
                                    throw ((this.status = 'error'), t);
                                })
                        );
                    }
                    abort() {
                        const t = this.status;
                        (this.status = 'aborted'),
                            this._filePromiseWrapper.isFulfilled
                                ? 'reading' == t
                                    ? this._reader.abort()
                                    : 'uploading' == t && this._adapter.abort && this._adapter.abort()
                                : (this._filePromiseWrapper.promise.catch(() => {}),
                                  this._filePromiseWrapper.rejecter('aborted')),
                            this._destroy();
                    }
                    _destroy() {
                        (this._filePromiseWrapper = void 0),
                            (this._reader = void 0),
                            (this._adapter = void 0),
                            (this.uploadResponse = void 0);
                    }
                    _createFilePromiseWrapper(t) {
                        const e = {};
                        return (
                            (e.promise = new Promise((o, i) => {
                                (e.rejecter = i),
                                    (e.isFulfilled = !1),
                                    t
                                        .then((t) => {
                                            (e.isFulfilled = !0), o(t);
                                        })
                                        .catch((t) => {
                                            (e.isFulfilled = !0), i(t);
                                        });
                            })),
                            e
                        );
                    }
                }
                Kt(mg, Ht);
                class gg extends Nc {
                    constructor(t) {
                        super(t),
                            (this.buttonView = new rd(t)),
                            (this._fileInputView = new pg(t)),
                            this._fileInputView.bind('acceptedType').to(this),
                            this._fileInputView.bind('allowMultipleFiles').to(this),
                            this._fileInputView.delegate('done').to(this),
                            this.setTemplate({
                                tag: 'span',
                                attributes: { class: 'ck-file-dialog-button' },
                                children: [this.buttonView, this._fileInputView],
                            }),
                            this.buttonView.on('execute', () => {
                                this._fileInputView.open();
                            });
                    }
                    focus() {
                        this.buttonView.focus();
                    }
                }
                class pg extends Nc {
                    constructor(t) {
                        super(t), this.set('acceptedType'), this.set('allowMultipleFiles', !1);
                        const e = this.bindTemplate;
                        this.setTemplate({
                            tag: 'input',
                            attributes: {
                                class: ['ck-hidden'],
                                type: 'file',
                                tabindex: '-1',
                                accept: e.to('acceptedType'),
                                multiple: e.to('allowMultipleFiles'),
                            },
                            on: {
                                change: e.to(() => {
                                    this.element &&
                                        this.element.files &&
                                        this.element.files.length &&
                                        this.fire('done', this.element.files),
                                        (this.element.value = '');
                                }),
                            },
                        });
                    }
                    open() {
                        this.element.click();
                    }
                }
                function bg(t) {
                    const e = t.map((t) => t.replace('+', '\\+'));
                    return new RegExp(`^image\\/(${e.join('|')})$`);
                }
                function wg(t) {
                    return new Promise((e, o) => {
                        const i = t.getAttribute('src');
                        fetch(i)
                            .then((t) => t.blob())
                            .then((t) => {
                                const o = kg(t, i),
                                    n = o.replace('image/', ''),
                                    r = new File([t], 'image.' + n, { type: o });
                                e(r);
                            })
                            .catch((t) =>
                                t && 'TypeError' === t.name
                                    ? (function (t) {
                                          return (function (t) {
                                              return new Promise((e, o) => {
                                                  const i = dr.document.createElement('img');
                                                  i.addEventListener('load', () => {
                                                      const t = dr.document.createElement('canvas');
                                                      (t.width = i.width), (t.height = i.height);
                                                      t.getContext('2d').drawImage(i, 0, 0),
                                                          t.toBlob((t) => (t ? e(t) : o()));
                                                  }),
                                                      i.addEventListener('error', () => o()),
                                                      (i.src = t);
                                              });
                                          })(t).then((e) => {
                                              const o = kg(e, t),
                                                  i = o.replace('image/', '');
                                              return new File([e], 'image.' + i, { type: o });
                                          });
                                      })(i)
                                          .then(e)
                                          .catch(o)
                                    : o(t),
                            );
                    });
                }
                function kg(t, e) {
                    return t.type
                        ? t.type
                        : e.match(/data:(image\/\w+);base64/)
                        ? e.match(/data:(image\/\w+);base64/)[1].toLowerCase()
                        : 'image/jpeg';
                }
                class _g extends Gt {
                    static get pluginName() {
                        return 'ImageUploadUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.t,
                            o = (o) => {
                                const i = new gg(o),
                                    n = t.commands.get('uploadImage'),
                                    r = t.config.get('image.upload.types'),
                                    s = bg(r);
                                return (
                                    i.set({
                                        acceptedType: r.map((t) => 'image/' + t).join(','),
                                        allowMultipleFiles: !0,
                                    }),
                                    i.buttonView.set({ label: e('Insert image'), icon: cc, tooltip: !0 }),
                                    i.buttonView.bind('isEnabled').to(n),
                                    i.on('done', (e, o) => {
                                        const i = Array.from(o).filter((t) => s.test(t.type));
                                        i.length && t.execute('uploadImage', { file: i });
                                    }),
                                    i
                                );
                            };
                        t.ui.componentFactory.add('uploadImage', o), t.ui.componentFactory.add('imageUpload', o);
                    }
                }
                o(82), o(84), o(86);
                class vg extends Gt {
                    static get pluginName() {
                        return 'ImageUploadProgress';
                    }
                    constructor(t) {
                        super(t),
                            (this.placeholder =
                                'data:image/svg+xml;utf8,' +
                                encodeURIComponent(
                                    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 700 250"><rect rx="4"/></svg>',
                                ));
                    }
                    init() {
                        this.editor.editing.downcastDispatcher.on('attribute:uploadStatus:image', (...t) =>
                            this.uploadStatusChange(...t),
                        );
                    }
                    uploadStatusChange(t, e, o) {
                        const i = this.editor,
                            n = e.item,
                            r = n.getAttribute('uploadId');
                        if (!o.consumable.consume(e.item, t.name)) return;
                        const s = i.plugins.get(fg),
                            a = r ? e.attributeNewValue : null,
                            l = this.placeholder,
                            c = i.editing.mapper.toViewElement(n),
                            d = o.writer;
                        if ('reading' == a) return yg(c, d), void xg(l, c, d);
                        if ('uploading' == a) {
                            const t = s.loaders.get(r);
                            return (
                                yg(c, d),
                                void (t
                                    ? (Cg(c, d),
                                      (function (t, e, o, i) {
                                          const n = (function (t) {
                                              const e = t.createUIElement('div', { class: 'ck-progress-bar' });
                                              return t.setCustomProperty('progressBar', !0, e), e;
                                          })(e);
                                          e.insert(e.createPositionAt(t, 'end'), n),
                                              o.on('change:uploadedPercent', (t, e, o) => {
                                                  i.change((t) => {
                                                      t.setStyle('width', o + '%', n);
                                                  });
                                              });
                                      })(c, d, t, i.editing.view),
                                      (function (t, e, o) {
                                          if (o.data) {
                                              const i = eg(t);
                                              e.setAttribute('src', o.data, i);
                                          }
                                      })(c, d, t))
                                    : xg(l, c, d))
                            );
                        }
                        'complete' == a &&
                            s.loaders.get(r) &&
                            (function (t, e, o) {
                                const i = e.createUIElement('div', { class: 'ck-image-upload-complete-icon' });
                                e.insert(e.createPositionAt(t, 'end'), i),
                                    setTimeout(() => {
                                        o.change((t) => t.remove(t.createRangeOn(i)));
                                    }, 3e3);
                            })(c, d, i.editing.view),
                            (function (t, e) {
                                Tg(t, e, 'progressBar');
                            })(c, d),
                            Cg(c, d),
                            (function (t, e) {
                                e.removeClass('ck-appear', t);
                            })(c, d);
                    }
                }
                function yg(t, e) {
                    t.hasClass('ck-appear') || e.addClass('ck-appear', t);
                }
                function xg(t, e, o) {
                    e.hasClass('ck-image-upload-placeholder') || o.addClass('ck-image-upload-placeholder', e);
                    const i = eg(e);
                    i.getAttribute('src') !== t && o.setAttribute('src', t, i),
                        Ag(e, 'placeholder') ||
                            o.insert(
                                o.createPositionAfter(i),
                                (function (t) {
                                    const e = t.createUIElement('div', { class: 'ck-upload-placeholder-loader' });
                                    return t.setCustomProperty('placeholder', !0, e), e;
                                })(o),
                            );
                }
                function Cg(t, e) {
                    t.hasClass('ck-image-upload-placeholder') && e.removeClass('ck-image-upload-placeholder', t),
                        Tg(t, e, 'placeholder');
                }
                function Ag(t, e) {
                    for (const o of t.getChildren()) if (o.getCustomProperty(e)) return o;
                }
                function Tg(t, e, o) {
                    const i = Ag(t, o);
                    i && e.remove(e.createRangeOn(i));
                }
                class Pg extends Yt {
                    refresh() {
                        const t = this.editor.model.document.selection.getSelectedElement(),
                            e = (t && 'image' === t.name) || !1;
                        this.isEnabled = tg(this.editor.model) || e;
                    }
                    execute(t) {
                        const e = this.editor,
                            o = e.model,
                            i = e.plugins.get(fg);
                        for (const e of Zo(t.file)) Sg(o, i, e);
                    }
                }
                function Sg(t, e, o) {
                    const i = e.createLoader(o);
                    i && Qm(t, { uploadId: i.id });
                }
                class Eg extends Gt {
                    static get requires() {
                        return [fg, $d, Bu];
                    }
                    static get pluginName() {
                        return 'ImageUploadEditing';
                    }
                    constructor(t) {
                        super(t),
                            t.config.define('image', {
                                upload: { types: ['jpeg', 'png', 'gif', 'bmp', 'webp', 'tiff'] },
                            });
                    }
                    init() {
                        const t = this.editor,
                            e = t.model.document,
                            o = t.model.schema,
                            i = t.conversion,
                            n = t.plugins.get(fg),
                            r = bg(t.config.get('image.upload.types'));
                        o.extend('image', { allowAttributes: ['uploadId', 'uploadStatus'] });
                        const s = new Pg(t);
                        t.commands.add('uploadImage', s),
                            t.commands.add('imageUpload', s),
                            i
                                .for('upcast')
                                .attributeToAttribute({ view: { name: 'img', key: 'uploadId' }, model: 'uploadId' }),
                            this.listenTo(t.editing.view.document, 'clipboardInput', (e, o) => {
                                if (
                                    ((i = o.dataTransfer),
                                    Array.from(i.types).includes('text/html') && '' !== i.getData('text/html'))
                                )
                                    return;
                                var i;
                                const n = Array.from(o.dataTransfer.files).filter((t) => !!t && r.test(t.type)),
                                    s = o.targetRanges.map((e) => t.editing.mapper.toModelRange(e));
                                t.model.change((o) => {
                                    o.setSelection(s),
                                        n.length &&
                                            (e.stop(),
                                            t.model.enqueueChange('default', () => {
                                                t.execute('uploadImage', { file: n });
                                            }));
                                });
                            }),
                            this.listenTo(t.plugins.get(Bu), 'inputTransformation', (e, o) => {
                                const i = Array.from(t.editing.view.createRangeIn(o.content))
                                    .filter((t) => {
                                        return (
                                            !(!(e = t.item).is('element', 'img') || !e.getAttribute('src')) &&
                                            (e.getAttribute('src').match(/^data:image\/\w+;base64,/g) ||
                                                e.getAttribute('src').match(/^blob:/g)) &&
                                            !t.item.getAttribute('uploadProcessed')
                                        );
                                        var e;
                                    })
                                    .map((t) => ({ promise: wg(t.item), imageElement: t.item }));
                                if (!i.length) return;
                                const r = new Ch(t.editing.view.document);
                                for (const t of i) {
                                    r.setAttribute('uploadProcessed', !0, t.imageElement);
                                    const e = n.createLoader(t.promise);
                                    e &&
                                        (r.setAttribute('src', '', t.imageElement),
                                        r.setAttribute('uploadId', e.id, t.imageElement));
                                }
                            }),
                            t.editing.view.document.on('dragover', (t, e) => {
                                e.preventDefault();
                            }),
                            e.on('change', () => {
                                const o = e.differ.getChanges({ includeChangesInGraveyard: !0 });
                                for (const e of o)
                                    if ('insert' == e.type && '$text' != e.name) {
                                        const o = e.position.nodeAfter,
                                            i = '$graveyard' == e.position.root.rootName;
                                        for (const e of Rg(t, o)) {
                                            const t = e.getAttribute('uploadId');
                                            if (!t) continue;
                                            const o = n.loaders.get(t);
                                            o && (i ? o.abort() : 'idle' == o.status && this._readAndUpload(o, e));
                                        }
                                    }
                            });
                    }
                    _readAndUpload(t, e) {
                        const o = this.editor,
                            i = o.model,
                            n = o.locale.t,
                            r = o.plugins.get(fg),
                            s = o.plugins.get($d);
                        return (
                            i.enqueueChange('transparent', (t) => {
                                t.setAttribute('uploadStatus', 'reading', e);
                            }),
                            t
                                .read()
                                .then(() => {
                                    const n = t.upload();
                                    if (wn.isSafari) {
                                        const t = eg(o.editing.mapper.toViewElement(e));
                                        o.editing.view.once('render', () => {
                                            if (!t.parent) return;
                                            const e = o.editing.view.domConverter.mapViewToDom(t.parent);
                                            if (!e) return;
                                            const i = e.style.display;
                                            (e.style.display = 'none'),
                                                (e._ckHack = e.offsetHeight),
                                                (e.style.display = i);
                                        });
                                    }
                                    return (
                                        i.enqueueChange('transparent', (t) => {
                                            t.setAttribute('uploadStatus', 'uploading', e);
                                        }),
                                        n
                                    );
                                })
                                .then((t) => {
                                    i.enqueueChange('transparent', (o) => {
                                        o.setAttributes({ uploadStatus: 'complete', src: t.default }, e),
                                            this._parseAndSetSrcsetAttributeOnImage(t, e, o);
                                    }),
                                        a();
                                })
                                .catch((o) => {
                                    if ('error' !== t.status && 'aborted' !== t.status) throw o;
                                    'error' == t.status &&
                                        o &&
                                        s.showWarning(o, { title: n('Upload failed'), namespace: 'upload' }),
                                        a(),
                                        i.enqueueChange('transparent', (t) => {
                                            t.remove(e);
                                        });
                                })
                        );
                        function a() {
                            i.enqueueChange('transparent', (t) => {
                                t.removeAttribute('uploadId', e), t.removeAttribute('uploadStatus', e);
                            }),
                                r.destroyLoader(t);
                        }
                    }
                    _parseAndSetSrcsetAttributeOnImage(t, e, o) {
                        let i = 0;
                        const n = Object.keys(t)
                            .filter((t) => {
                                const e = parseInt(t, 10);
                                if (!isNaN(e)) return (i = Math.max(i, e)), !0;
                            })
                            .map((e) => `${t[e]} ${e}w`)
                            .join(', ');
                        '' != n && o.setAttribute('srcset', { data: n, width: i }, e);
                    }
                }
                function Rg(t, e) {
                    return Array.from(t.model.createRangeOn(e))
                        .filter((t) => t.item.is('element', 'image'))
                        .map((t) => t.item);
                }
                class Ig extends Gt {
                    static get pluginName() {
                        return 'ImageUpload';
                    }
                    static get requires() {
                        return [Eg, _g, vg];
                    }
                }
                o(88);
                class Vg extends Nc {
                    constructor(t, e = {}) {
                        super(t);
                        const o = this.bindTemplate;
                        this.set('class', e.class || null),
                            (this.children = this.createCollection()),
                            e.children && e.children.forEach((t) => this.children.add(t)),
                            this.set('_role', null),
                            this.set('_ariaLabelledBy', null),
                            e.labelView && this.set({ _role: 'group', _ariaLabelledBy: e.labelView.id }),
                            this.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: ['ck', 'ck-form__row', o.to('class')],
                                    role: o.to('_role'),
                                    'aria-labelledby': o.to('_ariaLabelledBy'),
                                },
                                children: this.children,
                            });
                    }
                }
                o(90);
                class Og extends Nc {
                    constructor(t, e) {
                        super(t);
                        const { insertButtonView: o, cancelButtonView: i } = this._createActionButtons(t);
                        if (
                            ((this.insertButtonView = o),
                            (this.cancelButtonView = i),
                            (this.dropdownView = this._createDropdownView(t)),
                            this.set('imageURLInputValue', ''),
                            (this.focusTracker = new tc()),
                            (this.keystrokes = new Jl()),
                            (this._focusables = new Mc()),
                            (this._focusCycler = new hd({
                                focusables: this._focusables,
                                focusTracker: this.focusTracker,
                                keystrokeHandler: this.keystrokes,
                                actions: { focusPrevious: 'shift + tab', focusNext: 'tab' },
                            })),
                            this.set('_integrations', new Yo()),
                            e)
                        )
                            for (const [t, o] of Object.entries(e))
                                'insertImageViaUrl' === t &&
                                    (o.fieldView.bind('value').to(this, 'imageURLInputValue', (t) => t || ''),
                                    o.fieldView.on('input', () => {
                                        this.imageURLInputValue = o.fieldView.element.value.trim();
                                    })),
                                    (o.name = t),
                                    this._integrations.add(o);
                        this.setTemplate({
                            tag: 'form',
                            attributes: { class: ['ck', 'ck-image-insert-form'], tabindex: '-1' },
                            children: [
                                ...this._integrations,
                                new Vg(t, {
                                    children: [this.insertButtonView, this.cancelButtonView],
                                    class: 'ck-image-insert-form__action-row',
                                }),
                            ],
                        });
                    }
                    render() {
                        super.render(), zc({ view: this });
                        const t = [...this._integrations, this.insertButtonView, this.cancelButtonView];
                        t.forEach((t) => {
                            this._focusables.add(t), this.focusTracker.add(t.element);
                        }),
                            this.keystrokes.listenTo(this.element);
                        const e = (t) => t.stopPropagation();
                        this.keystrokes.set('arrowright', e),
                            this.keystrokes.set('arrowleft', e),
                            this.keystrokes.set('arrowup', e),
                            this.keystrokes.set('arrowdown', e),
                            this.listenTo(
                                t[0].element,
                                'selectstart',
                                (t, e) => {
                                    e.stopPropagation();
                                },
                                { priority: 'high' },
                            );
                    }
                    getIntegration(t) {
                        return this._integrations.find((e) => e.name === t);
                    }
                    _createDropdownView(t) {
                        const e = t.t,
                            o = Od(t, pd),
                            i = o.buttonView,
                            n = o.panelView;
                        return (
                            i.set({ label: e('Insert image'), icon: cc, tooltip: !0 }),
                            n.extendTemplate({ attributes: { class: 'ck-image-insert__panel' } }),
                            o
                        );
                    }
                    _createActionButtons(t) {
                        const e = t.t,
                            o = new rd(t),
                            i = new rd(t);
                        return (
                            o.set({
                                label: e('Insert'),
                                icon: sc,
                                class: 'ck-button-save',
                                type: 'submit',
                                withText: !0,
                                isEnabled: this.imageURLInputValue,
                            }),
                            i.set({ label: e('Cancel'), icon: rc, class: 'ck-button-cancel', withText: !0 }),
                            o.bind('isEnabled').to(this, 'imageURLInputValue', (t) => !!t),
                            o.delegate('execute').to(this, 'submit'),
                            i.delegate('execute').to(this, 'cancel'),
                            { insertButtonView: o, cancelButtonView: i }
                        );
                    }
                    focus() {
                        this._focusCycler.focusFirst();
                    }
                }
                function zg(t) {
                    const e = t.t,
                        o = new Wd(t, qd);
                    return (
                        o.set({ label: e('Insert image via URL') }),
                        (o.fieldView.placeholder = 'https://example.com/image.png'),
                        o
                    );
                }
                class Mg extends Gt {
                    static get pluginName() {
                        return 'ImageInsertUI';
                    }
                    init() {
                        const t = this.editor,
                            e = (t) => this._createDropdownView(t);
                        t.ui.componentFactory.add('insertImage', e), t.ui.componentFactory.add('imageInsert', e);
                    }
                    _createDropdownView(t) {
                        const e = this.editor,
                            o = new Og(
                                t,
                                (function (t) {
                                    const e = t.config.get('image.insert.integrations'),
                                        o = t.plugins.get('ImageInsertUI'),
                                        i = { insertImageViaUrl: zg(t.locale) };
                                    if (!e) return i;
                                    if (e.find((t) => 'openCKFinder' === t) && t.ui.componentFactory.has('ckfinder')) {
                                        const e = t.ui.componentFactory.create('ckfinder');
                                        e.set({ withText: !0, class: 'ck-image-insert__ck-finder-button' }),
                                            e.delegate('execute').to(o, 'cancel'),
                                            (i.openCKFinder = e);
                                    }
                                    return e.reduce(
                                        (e, o) => (
                                            i[o]
                                                ? (e[o] = i[o])
                                                : t.ui.componentFactory.has(o) &&
                                                  (e[o] = t.ui.componentFactory.create(o)),
                                            e
                                        ),
                                        {},
                                    );
                                })(e),
                            ),
                            i = e.commands.get('uploadImage'),
                            n = o.dropdownView,
                            r = n.buttonView;
                        return (
                            (r.actionView = e.ui.componentFactory.create('uploadImage')),
                            r.actionView.extendTemplate({
                                attributes: { class: 'ck ck-button ck-splitbutton__action' },
                            }),
                            this._setUpDropdown(n, o, i)
                        );
                    }
                    _setUpDropdown(t, e, o) {
                        const i = this.editor,
                            n = i.t,
                            r = e.insertButtonView,
                            s = e.getIntegration('insertImageViaUrl'),
                            a = t.panelView;
                        function l() {
                            i.editing.view.focus(), (t.isOpen = !1);
                        }
                        return (
                            t.bind('isEnabled').to(o),
                            t.buttonView.once('open', () => {
                                a.children.add(e);
                            }),
                            t.on(
                                'change:isOpen',
                                () => {
                                    const o = i.model.document.selection.getSelectedElement();
                                    t.isOpen &&
                                        (e.focus(),
                                        Zm(o)
                                            ? ((e.imageURLInputValue = o.getAttribute('src')),
                                              (r.label = n('Update')),
                                              (s.label = n('Update image URL')))
                                            : ((e.imageURLInputValue = ''),
                                              (r.label = n('Insert')),
                                              (s.label = n('Insert image via URL'))));
                                },
                                { priority: 'low' },
                            ),
                            e.delegate('submit', 'cancel').to(t),
                            this.delegate('cancel').to(t),
                            t.on('submit', () => {
                                l(),
                                    (function () {
                                        const t = i.model.document.selection.getSelectedElement();
                                        Zm(t)
                                            ? i.model.change((o) => {
                                                  o.setAttribute('src', e.imageURLInputValue, t),
                                                      o.removeAttribute('srcset', t),
                                                      o.removeAttribute('sizes', t);
                                              })
                                            : i.execute('insertImage', { source: e.imageURLInputValue });
                                    })();
                            }),
                            t.on('cancel', () => {
                                l();
                            }),
                            t
                        );
                    }
                }
                class Ng extends Yt {
                    refresh() {
                        const t = this.editor.model.document.selection.getSelectedElement();
                        (this.isEnabled = Zm(t)),
                            t && t.hasAttribute('width')
                                ? (this.value = { width: t.getAttribute('width'), height: null })
                                : (this.value = null);
                    }
                    execute(t) {
                        const e = this.editor.model,
                            o = e.document.selection.getSelectedElement();
                        (this.value = { width: t.width, height: null }),
                            o &&
                                e.change((e) => {
                                    e.setAttribute('width', t.width, o);
                                });
                    }
                }
                class Bg extends Gt {
                    static get pluginName() {
                        return 'ImageResizeEditing';
                    }
                    constructor(t) {
                        super(t),
                            t.config.define('image', {
                                resizeUnit: '%',
                                resizeOptions: [
                                    { name: 'resizeImage:original', value: null, icon: 'original' },
                                    { name: 'resizeImage:25', value: '25', icon: 'small' },
                                    { name: 'resizeImage:50', value: '50', icon: 'medium' },
                                    { name: 'resizeImage:75', value: '75', icon: 'large' },
                                ],
                            });
                    }
                    init() {
                        const t = this.editor,
                            e = new Ng(t);
                        this._registerSchema(),
                            this._registerConverters(),
                            t.commands.add('resizeImage', e),
                            t.commands.add('imageResize', e);
                    }
                    _registerSchema() {
                        this.editor.model.schema.extend('image', { allowAttributes: 'width' }),
                            this.editor.model.schema.setAttributeProperties('width', { isFormatting: !0 });
                    }
                    _registerConverters() {
                        const t = this.editor;
                        t.conversion.for('downcast').add((t) =>
                            t.on('attribute:width:image', (t, e, o) => {
                                if (!o.consumable.consume(e.item, t.name)) return;
                                const i = o.writer,
                                    n = o.mapper.toViewElement(e.item);
                                null !== e.attributeNewValue
                                    ? (i.setStyle('width', e.attributeNewValue, n), i.addClass('image_resized', n))
                                    : (i.removeStyle('width', n), i.removeClass('image_resized', n));
                            }),
                        ),
                            t.conversion.for('upcast').attributeToAttribute({
                                view: { name: 'figure', styles: { width: /.+/ } },
                                model: { key: 'width', value: (t) => t.getStyle('width') },
                            });
                    }
                }
                const Fg = { small: yc, medium: xc, large: vc, original: _c };
                class Dg extends Gt {
                    static get requires() {
                        return [Bg];
                    }
                    static get pluginName() {
                        return 'ImageResizeButtons';
                    }
                    constructor(t) {
                        super(t), (this._resizeUnit = t.config.get('image.resizeUnit'));
                    }
                    init() {
                        const t = this.editor,
                            e = t.config.get('image.resizeOptions'),
                            o = t.commands.get('resizeImage');
                        this.bind('isEnabled').to(o);
                        for (const t of e) this._registerImageResizeButton(t);
                        this._registerImageResizeDropdown(e);
                    }
                    _registerImageResizeButton(t) {
                        const e = this.editor,
                            { name: o, value: i, icon: n } = t,
                            r = i ? i + this._resizeUnit : null;
                        e.ui.componentFactory.add(o, (o) => {
                            const i = new rd(o),
                                s = e.commands.get('resizeImage'),
                                a = this._getOptionLabelValue(t, !0);
                            if (!Fg[n]) throw new l.a('imageresizebuttons-missing-icon', e, t);
                            return (
                                i.set({ label: a, icon: Fg[n], tooltip: a, isToggleable: !0 }),
                                i.bind('isEnabled').to(this),
                                i.bind('isOn').to(s, 'value', Lg(r)),
                                this.listenTo(i, 'execute', () => {
                                    e.execute('resizeImage', { width: r });
                                }),
                                i
                            );
                        });
                    }
                    _registerImageResizeDropdown(t) {
                        const e = this.editor,
                            o = e.t,
                            i = t.find((t) => !t.value),
                            n = (n) => {
                                const r = e.commands.get('resizeImage'),
                                    s = Od(n, gd),
                                    a = s.buttonView;
                                return (
                                    a.set({
                                        tooltip: o('Resize image'),
                                        commandValue: i.value,
                                        icon: Fg.medium,
                                        isToggleable: !0,
                                        label: this._getOptionLabelValue(i),
                                        withText: !0,
                                        class: 'ck-resize-image-button',
                                    }),
                                    a
                                        .bind('label')
                                        .to(r, 'value', (t) => (t && t.width ? t.width : this._getOptionLabelValue(i))),
                                    s.bind('isOn').to(r),
                                    s.bind('isEnabled').to(this),
                                    Md(s, this._getResizeDropdownListItemDefinitions(t, r)),
                                    (s.listView.ariaLabel = o('Image resize list')),
                                    this.listenTo(s, 'execute', (t) => {
                                        e.execute(t.source.commandName, { width: t.source.commandValue }),
                                            e.editing.view.focus();
                                    }),
                                    s
                                );
                            };
                        e.ui.componentFactory.add('resizeImage', n), e.ui.componentFactory.add('imageResize', n);
                    }
                    _getOptionLabelValue(t, e) {
                        const o = this.editor.t;
                        return t.label
                            ? t.label
                            : e
                            ? t.value
                                ? o('Resize image to %0', t.value + this._resizeUnit)
                                : o('Resize image to the original size')
                            : t.value
                            ? t.value + this._resizeUnit
                            : o('Original');
                    }
                    _getResizeDropdownListItemDefinitions(t, e) {
                        const o = new Yo();
                        return (
                            t.map((t) => {
                                const i = t.value ? t.value + this._resizeUnit : null,
                                    n = {
                                        type: 'button',
                                        model: new Kd({
                                            commandName: 'resizeImage',
                                            commandValue: i,
                                            label: this._getOptionLabelValue(t),
                                            withText: !0,
                                            icon: null,
                                        }),
                                    };
                                n.model.bind('isOn').to(e, 'value', Lg(i)), o.add(n);
                            }),
                            o
                        );
                    }
                }
                function Lg(t) {
                    return (e) => (null === t && e === t) || (e && e.width === t);
                }
                class Hg extends Gt {
                    static get requires() {
                        return [Um];
                    }
                    static get pluginName() {
                        return 'ImageResizeHandles';
                    }
                    init() {
                        const t = this.editor.commands.get('resizeImage');
                        this.bind('isEnabled').to(t), this._setupResizerCreator();
                    }
                    _setupResizerCreator() {
                        const t = this.editor,
                            e = t.editing.view;
                        e.addObserver(Jm),
                            this.listenTo(e.document, 'imageLoaded', (o, i) => {
                                if (!i.target.matches('figure.image.ck-widget > img, figure.image.ck-widget > a > img'))
                                    return;
                                const n = t.editing.view.domConverter.domToView(i.target).findAncestor('figure');
                                let r = this.editor.plugins.get(Um).getResizerByViewElement(n);
                                if (r) return void r.redraw();
                                const s = t.editing.mapper.toModelElement(n);
                                (r = t.plugins.get(Um).attachTo({
                                    unit: t.config.get('image.resizeUnit'),
                                    modelElement: s,
                                    viewElement: n,
                                    editor: t,
                                    getHandleHost: (t) => t.querySelector('img'),
                                    getResizeHost: (t) => t,
                                    isCentered() {
                                        const t = s.getAttribute('imageStyle');
                                        return !t || 'full' == t || 'alignCenter' == t;
                                    },
                                    onCommit(e) {
                                        t.execute('resizeImage', { width: e });
                                    },
                                })),
                                    r.on('updateSize', () => {
                                        n.hasClass('image_resized') ||
                                            e.change((t) => {
                                                t.addClass('image_resized', n);
                                            });
                                    }),
                                    r.bind('isEnabled').to(this);
                            });
                    }
                }
                o(92);
                class jg {
                    constructor() {
                        this._definitions = new Set();
                    }
                    get length() {
                        return this._definitions.size;
                    }
                    add(t) {
                        Array.isArray(t) ? t.forEach((t) => this._definitions.add(t)) : this._definitions.add(t);
                    }
                    getDispatcher() {
                        return (t) => {
                            t.on(
                                'attribute:linkHref',
                                (t, e, o) => {
                                    if (!o.consumable.test(e.item, 'attribute:linkHref')) return;
                                    const i = o.writer,
                                        n = i.document.selection;
                                    for (const t of this._definitions) {
                                        const r = i.createAttributeElement('a', t.attributes, { priority: 5 });
                                        i.setCustomProperty('link', !0, r),
                                            t.callback(e.attributeNewValue)
                                                ? e.item.is('selection')
                                                    ? i.wrap(n.getFirstRange(), r)
                                                    : i.wrap(o.mapper.toViewRange(e.range), r)
                                                : i.unwrap(o.mapper.toViewRange(e.range), r);
                                    }
                                },
                                { priority: 'high' },
                            );
                        };
                    }
                    getDispatcherForLinkedImage() {
                        return (t) => {
                            t.on('attribute:linkHref:image', (t, e, o) => {
                                const i = o.mapper.toViewElement(e.item),
                                    n = Array.from(i.getChildren()).find((t) => 'a' === t.name);
                                for (const t of this._definitions) {
                                    const i = di(t.attributes);
                                    if (t.callback(e.attributeNewValue))
                                        for (const [t, e] of i)
                                            'class' === t ? o.writer.addClass(e, n) : o.writer.setAttribute(t, e, n);
                                    else
                                        for (const [t, e] of i)
                                            'class' === t ? o.writer.removeClass(e, n) : o.writer.removeAttribute(t, n);
                                }
                            });
                        };
                    }
                }
                var Wg = function (t, e, o) {
                        var i = t.length;
                        return (o = void 0 === o ? i : o), !e && o >= i ? t : Ii(t, e, o);
                    },
                    qg = RegExp('[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]');
                var Ug = function (t) {
                    return qg.test(t);
                };
                var $g = function (t) {
                        return t.split('');
                    },
                    Kg = '[\\ud800-\\udfff]',
                    Gg = '[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]',
                    Jg = '\\ud83c[\\udffb-\\udfff]',
                    Yg = '[^\\ud800-\\udfff]',
                    Xg = '(?:\\ud83c[\\udde6-\\uddff]){2}',
                    Zg = '[\\ud800-\\udbff][\\udc00-\\udfff]',
                    Qg = '(?:' + Gg + '|' + Jg + ')' + '?',
                    tp =
                        '[\\ufe0e\\ufe0f]?' +
                        Qg +
                        ('(?:\\u200d(?:' + [Yg, Xg, Zg].join('|') + ')[\\ufe0e\\ufe0f]?' + Qg + ')*'),
                    ep = '(?:' + [Yg + Gg + '?', Gg, Xg, Zg, Kg].join('|') + ')',
                    op = RegExp(Jg + '(?=' + Jg + ')|' + ep + tp, 'g');
                var ip = function (t) {
                    return t.match(op) || [];
                };
                var np = function (t) {
                    return Ug(t) ? ip(t) : $g(t);
                };
                var rp = (function (t) {
                    return function (e) {
                        e = Ti(e);
                        var o = Ug(e) ? np(e) : void 0,
                            i = o ? o[0] : e.charAt(0),
                            n = o ? Wg(o, 1).join('') : e.slice(1);
                        return i[t]() + n;
                    };
                })('toUpperCase');
                const sp = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g,
                    ap = /^(?:(?:https?|ftps?|mailto):|[^a-z]|[a-z+.-]+(?:[^a-z+.:-]|$))/i,
                    lp = /^[\S]+@((?![-_])(?:[-\w\u00a1-\uffff]{0,63}[^-_]\.))+(?:[a-z\u00a1-\uffff]{2,})$/i,
                    cp = /^((\w+:(\/{2,})?)|(\W))/i;
                function dp(t, { writer: e }) {
                    const o = e.createAttributeElement('a', { href: t }, { priority: 5 });
                    return e.setCustomProperty('link', !0, o), o;
                }
                function hp(t) {
                    return (function (t) {
                        return t.replace(sp, '').match(ap);
                    })((t = String(t)))
                        ? t
                        : '#';
                }
                function up(t, e) {
                    return !!t && t.is('element', 'image') && e.checkAttribute('image', 'linkHref');
                }
                function fp(t, e) {
                    const o = ((i = t), lp.test(i) ? 'mailto:' : e);
                    var i;
                    const n = !!o && !cp.test(t);
                    return t && n ? o + t : t;
                }
                class mp extends Yt {
                    constructor(t) {
                        super(t), (this.manualDecorators = new Yo()), (this.automaticDecorators = new jg());
                    }
                    restoreManualDecoratorStates() {
                        for (const t of this.manualDecorators) t.value = this._getDecoratorStateFromModel(t.id);
                    }
                    refresh() {
                        const t = this.editor.model,
                            e = t.document,
                            o = Ic(e.selection.getSelectedBlocks());
                        up(o, t.schema)
                            ? ((this.value = o.getAttribute('linkHref')),
                              (this.isEnabled = t.schema.checkAttribute(o, 'linkHref')))
                            : ((this.value = e.selection.getAttribute('linkHref')),
                              (this.isEnabled = t.schema.checkAttributeInSelection(e.selection, 'linkHref')));
                        for (const t of this.manualDecorators) t.value = this._getDecoratorStateFromModel(t.id);
                    }
                    execute(t, e = {}) {
                        const o = this.editor.model,
                            i = o.document.selection,
                            n = [],
                            r = [];
                        for (const t in e) e[t] ? n.push(t) : r.push(t);
                        o.change((e) => {
                            if (i.isCollapsed) {
                                const s = i.getFirstPosition();
                                if (i.hasAttribute('linkHref')) {
                                    const a = xf(s, 'linkHref', i.getAttribute('linkHref'), o);
                                    e.setAttribute('linkHref', t, a),
                                        n.forEach((t) => {
                                            e.setAttribute(t, !0, a);
                                        }),
                                        r.forEach((t) => {
                                            e.removeAttribute(t, a);
                                        }),
                                        e.setSelection(e.createPositionAfter(a.end.nodeBefore));
                                } else if ('' !== t) {
                                    const r = di(i.getAttributes());
                                    r.set('linkHref', t),
                                        n.forEach((t) => {
                                            r.set(t, !0);
                                        });
                                    const { end: a } = o.insertContent(e.createText(t, r), s);
                                    e.setSelection(a);
                                }
                                ['linkHref', ...n, ...r].forEach((t) => {
                                    e.removeSelectionAttribute(t);
                                });
                            } else {
                                const s = o.schema.getValidRanges(i.getRanges(), 'linkHref'),
                                    a = [];
                                for (const t of i.getSelectedBlocks())
                                    o.schema.checkAttribute(t, 'linkHref') && a.push(e.createRangeOn(t));
                                const l = a.slice();
                                for (const t of s) this._isRangeToUpdate(t, a) && l.push(t);
                                for (const o of l)
                                    e.setAttribute('linkHref', t, o),
                                        n.forEach((t) => {
                                            e.setAttribute(t, !0, o);
                                        }),
                                        r.forEach((t) => {
                                            e.removeAttribute(t, o);
                                        });
                            }
                        });
                    }
                    _getDecoratorStateFromModel(t) {
                        const e = this.editor.model,
                            o = e.document,
                            i = Ic(o.selection.getSelectedBlocks());
                        return up(i, e.schema) ? i.getAttribute(t) : o.selection.getAttribute(t);
                    }
                    _isRangeToUpdate(t, e) {
                        for (const o of e) if (o.containsRange(t)) return !1;
                        return !0;
                    }
                }
                class gp extends Yt {
                    refresh() {
                        const t = this.editor.model,
                            e = t.document,
                            o = Ic(e.selection.getSelectedBlocks());
                        up(o, t.schema)
                            ? (this.isEnabled = t.schema.checkAttribute(o, 'linkHref'))
                            : (this.isEnabled = t.schema.checkAttributeInSelection(e.selection, 'linkHref'));
                    }
                    execute() {
                        const t = this.editor,
                            e = this.editor.model,
                            o = e.document.selection,
                            i = t.commands.get('link');
                        e.change((t) => {
                            const n = o.isCollapsed
                                ? [xf(o.getFirstPosition(), 'linkHref', o.getAttribute('linkHref'), e)]
                                : e.schema.getValidRanges(o.getRanges(), 'linkHref');
                            for (const e of n)
                                if ((t.removeAttribute('linkHref', e), i))
                                    for (const o of i.manualDecorators) t.removeAttribute(o.id, e);
                        });
                    }
                }
                class pp {
                    constructor({ id: t, label: e, attributes: o, defaultValue: i }) {
                        (this.id = t),
                            this.set('value'),
                            (this.defaultValue = i),
                            (this.label = e),
                            (this.attributes = o);
                    }
                }
                Kt(pp, Ht);
                o(94);
                const bp = /^(https?:)?\/\//;
                class wp extends Gt {
                    static get pluginName() {
                        return 'LinkEditing';
                    }
                    static get requires() {
                        return [pf, cf, Bu];
                    }
                    constructor(t) {
                        super(t), t.config.define('link', { addTargetToExternalLinks: !1 });
                    }
                    init() {
                        const t = this.editor;
                        t.model.schema.extend('$text', { allowAttributes: 'linkHref' }),
                            t.conversion.for('dataDowncast').attributeToElement({ model: 'linkHref', view: dp }),
                            t.conversion
                                .for('editingDowncast')
                                .attributeToElement({ model: 'linkHref', view: (t, e) => dp(hp(t), e) }),
                            t.conversion.for('upcast').elementToAttribute({
                                view: { name: 'a', attributes: { href: !0 } },
                                model: { key: 'linkHref', value: (t) => t.getAttribute('href') },
                            }),
                            t.commands.add('link', new mp(t)),
                            t.commands.add('unlink', new gp(t));
                        const e = (function (t, e) {
                            const o = { 'Open in a new tab': t('Open in a new tab'), Downloadable: t('Downloadable') };
                            return e.forEach((t) => (t.label && o[t.label] && (t.label = o[t.label]), t)), e;
                        })(
                            t.t,
                            (function (t) {
                                const e = [];
                                if (t)
                                    for (const [o, i] of Object.entries(t)) {
                                        const t = Object.assign({}, i, { id: 'link' + rp(o) });
                                        e.push(t);
                                    }
                                return e;
                            })(t.config.get('link.decorators')),
                        );
                        this._enableAutomaticDecorators(e.filter((t) => 'automatic' === t.mode)),
                            this._enableManualDecorators(e.filter((t) => 'manual' === t.mode));
                        t.plugins.get(pf).registerAttribute('linkHref'),
                            (function (t, e, o, i) {
                                const n = t.editing.view,
                                    r = new Set();
                                n.document.registerPostFixer((n) => {
                                    const s = t.model.document.selection;
                                    let a = !1;
                                    if (s.hasAttribute(e)) {
                                        const l = xf(s.getFirstPosition(), e, s.getAttribute(e), t.model),
                                            c = t.editing.mapper.toViewRange(l);
                                        for (const t of c.getItems())
                                            t.is('element', o) &&
                                                !t.hasClass(i) &&
                                                (n.addClass(i, t), r.add(t), (a = !0));
                                    }
                                    return a;
                                }),
                                    t.conversion.for('editingDowncast').add((t) => {
                                        function e() {
                                            n.change((t) => {
                                                for (const e of r.values()) t.removeClass(i, e), r.delete(e);
                                            });
                                        }
                                        t.on('insert', e, { priority: 'highest' }),
                                            t.on('remove', e, { priority: 'highest' }),
                                            t.on('attribute', e, { priority: 'highest' }),
                                            t.on('selection', e, { priority: 'highest' });
                                    });
                            })(t, 'linkHref', 'a', 'ck-link_selected'),
                            this._enableInsertContentSelectionAttributesFixer(),
                            this._enableClickingAfterLink(),
                            this._enableTypingOverLink(),
                            this._handleDeleteContentAfterLink();
                    }
                    _enableAutomaticDecorators(t) {
                        const e = this.editor,
                            o = e.commands.get('link').automaticDecorators;
                        e.config.get('link.addTargetToExternalLinks') &&
                            o.add({
                                id: 'linkIsExternal',
                                mode: 'automatic',
                                callback: (t) => bp.test(t),
                                attributes: { target: '_blank', rel: 'noopener noreferrer' },
                            }),
                            o.add(t),
                            o.length && e.conversion.for('downcast').add(o.getDispatcher());
                    }
                    _enableManualDecorators(t) {
                        if (!t.length) return;
                        const e = this.editor,
                            o = e.commands.get('link').manualDecorators;
                        t.forEach((t) => {
                            e.model.schema.extend('$text', { allowAttributes: t.id }),
                                o.add(new pp(t)),
                                e.conversion.for('downcast').attributeToElement({
                                    model: t.id,
                                    view: (e, { writer: i }) => {
                                        if (e) {
                                            const e = o.get(t.id).attributes,
                                                n = i.createAttributeElement('a', e, { priority: 5 });
                                            return i.setCustomProperty('link', !0, n), n;
                                        }
                                    },
                                }),
                                e.conversion.for('upcast').elementToAttribute({
                                    view: { name: 'a', attributes: o.get(t.id).attributes },
                                    model: { key: t.id },
                                });
                        });
                    }
                    _enableInsertContentSelectionAttributesFixer() {
                        const t = this.editor,
                            e = t.model,
                            o = e.document.selection,
                            i = t.commands.get('link');
                        this.listenTo(
                            e,
                            'insertContent',
                            () => {
                                const t = o.anchor.nodeBefore,
                                    n = o.anchor.nodeAfter;
                                o.hasAttribute('linkHref') &&
                                    t &&
                                    t.hasAttribute('linkHref') &&
                                    ((n && n.hasAttribute('linkHref')) ||
                                        e.change((t) => {
                                            kp(t, i.manualDecorators);
                                        }));
                            },
                            { priority: 'low' },
                        );
                    }
                    _enableClickingAfterLink() {
                        const t = this.editor,
                            e = t.commands.get('link');
                        t.editing.view.addObserver(xh);
                        let o = !1;
                        this.listenTo(t.editing.view.document, 'mousedown', () => {
                            o = !0;
                        }),
                            this.listenTo(t.editing.view.document, 'selectionChange', () => {
                                if (!o) return;
                                o = !1;
                                const i = t.model.document.selection;
                                if (!i.isCollapsed) return;
                                if (!i.hasAttribute('linkHref')) return;
                                const n = i.getFirstPosition(),
                                    r = xf(n, 'linkHref', i.getAttribute('linkHref'), t.model);
                                (n.isTouching(r.start) || n.isTouching(r.end)) &&
                                    t.model.change((t) => {
                                        kp(t, e.manualDecorators);
                                    });
                            });
                    }
                    _enableTypingOverLink() {
                        const t = this.editor,
                            e = t.editing.view;
                        let o, i;
                        this.listenTo(
                            e.document,
                            'delete',
                            () => {
                                i = !0;
                            },
                            { priority: 'high' },
                        ),
                            this.listenTo(
                                t.model,
                                'deleteContent',
                                () => {
                                    const e = t.model.document.selection;
                                    e.isCollapsed ||
                                        (i
                                            ? (i = !1)
                                            : _p(t) &&
                                              (function (t) {
                                                  const e = t.document.selection,
                                                      o = e.getFirstPosition(),
                                                      i = e.getLastPosition(),
                                                      n = o.nodeAfter;
                                                  if (!n) return !1;
                                                  if (!n.is('$text')) return !1;
                                                  if (!n.hasAttribute('linkHref')) return !1;
                                                  const r = i.textNode || i.nodeBefore;
                                                  if (n === r) return !0;
                                                  return xf(o, 'linkHref', n.getAttribute('linkHref'), t).containsRange(
                                                      t.createRange(o, i),
                                                      !0,
                                                  );
                                              })(t.model) &&
                                              (o = e.getAttributes()));
                                },
                                { priority: 'high' },
                            ),
                            this.listenTo(
                                t.model,
                                'insertContent',
                                (e, [n]) => {
                                    (i = !1),
                                        _p(t) &&
                                            o &&
                                            (t.model.change((t) => {
                                                for (const [e, i] of o) t.setAttribute(e, i, n);
                                            }),
                                            (o = null));
                                },
                                { priority: 'high' },
                            );
                    }
                    _handleDeleteContentAfterLink() {
                        const t = this.editor,
                            e = t.model,
                            o = e.document.selection,
                            i = t.editing.view,
                            n = t.commands.get('link');
                        let r = !1,
                            s = !1;
                        this.listenTo(
                            i.document,
                            'delete',
                            (t, e) => {
                                s = e.domEvent.keyCode === vn.backspace;
                            },
                            { priority: 'high' },
                        ),
                            this.listenTo(
                                e,
                                'deleteContent',
                                () => {
                                    r = !1;
                                    const t = o.getFirstPosition(),
                                        i = o.getAttribute('linkHref');
                                    if (!i) return;
                                    const n = xf(t, 'linkHref', i, e);
                                    r = n.containsPosition(t) || n.end.isEqual(t);
                                },
                                { priority: 'high' },
                            ),
                            this.listenTo(
                                e,
                                'deleteContent',
                                () => {
                                    s &&
                                        ((s = !1),
                                        r ||
                                            t.model.enqueueChange((t) => {
                                                kp(t, n.manualDecorators);
                                            }));
                                },
                                { priority: 'low' },
                            );
                    }
                }
                function kp(t, e) {
                    t.removeSelectionAttribute('linkHref');
                    for (const o of e) t.removeSelectionAttribute(o.id);
                }
                function _p(t) {
                    return t.plugins.get('Input').isInput(t.model.change((t) => t.batch));
                }
                o(96);
                class vp extends Nc {
                    constructor(t, e) {
                        super(t);
                        const o = t.t;
                        (this.focusTracker = new tc()),
                            (this.keystrokes = new Jl()),
                            (this.urlInputView = this._createUrlInput()),
                            (this.saveButtonView = this._createButton(o('Save'), sc, 'ck-button-save')),
                            (this.saveButtonView.type = 'submit'),
                            (this.cancelButtonView = this._createButton(o('Cancel'), rc, 'ck-button-cancel', 'cancel')),
                            (this._manualDecoratorSwitches = this._createManualDecoratorSwitches(e)),
                            (this.children = this._createFormChildren(e.manualDecorators)),
                            (this._focusables = new Mc()),
                            (this._focusCycler = new hd({
                                focusables: this._focusables,
                                focusTracker: this.focusTracker,
                                keystrokeHandler: this.keystrokes,
                                actions: { focusPrevious: 'shift + tab', focusNext: 'tab' },
                            }));
                        const i = ['ck', 'ck-link-form', 'ck-responsive-form'];
                        e.manualDecorators.length && i.push('ck-link-form_layout-vertical', 'ck-vertical-form'),
                            this.setTemplate({
                                tag: 'form',
                                attributes: { class: i, tabindex: '-1' },
                                children: this.children,
                            }),
                            Oc(this);
                    }
                    getDecoratorSwitchesState() {
                        return Array.from(this._manualDecoratorSwitches).reduce(
                            (t, e) => ((t[e.name] = e.isOn), t),
                            {},
                        );
                    }
                    render() {
                        super.render(), zc({ view: this });
                        [
                            this.urlInputView,
                            ...this._manualDecoratorSwitches,
                            this.saveButtonView,
                            this.cancelButtonView,
                        ].forEach((t) => {
                            this._focusables.add(t), this.focusTracker.add(t.element);
                        }),
                            this.keystrokes.listenTo(this.element);
                    }
                    focus() {
                        this._focusCycler.focusFirst();
                    }
                    _createUrlInput() {
                        const t = this.locale.t,
                            e = new Wd(this.locale, qd);
                        return (e.label = t('Link URL')), e;
                    }
                    _createButton(t, e, o, i) {
                        const n = new rd(this.locale);
                        return (
                            n.set({ label: t, icon: e, tooltip: !0 }),
                            n.extendTemplate({ attributes: { class: o } }),
                            i && n.delegate('execute').to(this, i),
                            n
                        );
                    }
                    _createManualDecoratorSwitches(t) {
                        const e = this.createCollection();
                        for (const o of t.manualDecorators) {
                            const i = new sd(this.locale);
                            i.set({ name: o.id, label: o.label, withText: !0 }),
                                i
                                    .bind('isOn')
                                    .toMany([o, t], 'value', (t, e) =>
                                        void 0 === e && void 0 === t ? o.defaultValue : t,
                                    ),
                                i.on('execute', () => {
                                    o.set('value', !i.isOn);
                                }),
                                e.add(i);
                        }
                        return e;
                    }
                    _createFormChildren(t) {
                        const e = this.createCollection();
                        if ((e.add(this.urlInputView), t.length)) {
                            const t = new Nc();
                            t.setTemplate({
                                tag: 'ul',
                                children: this._manualDecoratorSwitches.map((t) => ({
                                    tag: 'li',
                                    children: [t],
                                    attributes: { class: ['ck', 'ck-list__item'] },
                                })),
                                attributes: { class: ['ck', 'ck-reset', 'ck-list'] },
                            }),
                                e.add(t);
                        }
                        return e.add(this.saveButtonView), e.add(this.cancelButtonView), e;
                    }
                }
                o(98);
                class yp extends Nc {
                    constructor(t) {
                        super(t);
                        const e = t.t;
                        (this.focusTracker = new tc()),
                            (this.keystrokes = new Jl()),
                            (this.previewButtonView = this._createPreviewButton()),
                            (this.unlinkButtonView = this._createButton(
                                e('Unlink'),
                                '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184zm4.919 10.562l-1.414 1.414a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.061-1.06l1.414 1.414 1.414-1.415a.75.75 0 0 1 1.061 1.061l-1.414 1.414 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414z"/></svg>',
                                'unlink',
                            )),
                            (this.editButtonView = this._createButton(e('Edit link'), Cc, 'edit')),
                            this.set('href'),
                            (this._focusables = new Mc()),
                            (this._focusCycler = new hd({
                                focusables: this._focusables,
                                focusTracker: this.focusTracker,
                                keystrokeHandler: this.keystrokes,
                                actions: { focusPrevious: 'shift + tab', focusNext: 'tab' },
                            })),
                            this.setTemplate({
                                tag: 'div',
                                attributes: { class: ['ck', 'ck-link-actions', 'ck-responsive-form'], tabindex: '-1' },
                                children: [this.previewButtonView, this.editButtonView, this.unlinkButtonView],
                            });
                    }
                    render() {
                        super.render();
                        [this.previewButtonView, this.editButtonView, this.unlinkButtonView].forEach((t) => {
                            this._focusables.add(t), this.focusTracker.add(t.element);
                        }),
                            this.keystrokes.listenTo(this.element);
                    }
                    focus() {
                        this._focusCycler.focusFirst();
                    }
                    _createButton(t, e, o) {
                        const i = new rd(this.locale);
                        return i.set({ label: t, icon: e, tooltip: !0 }), i.delegate('execute').to(this, o), i;
                    }
                    _createPreviewButton() {
                        const t = new rd(this.locale),
                            e = this.bindTemplate,
                            o = this.t;
                        return (
                            t.set({ withText: !0, tooltip: o('Open link in new tab') }),
                            t.extendTemplate({
                                attributes: {
                                    class: ['ck', 'ck-link-actions__preview'],
                                    href: e.to('href', (t) => t && hp(t)),
                                    target: '_blank',
                                    rel: 'noopener noreferrer',
                                },
                            }),
                            t.bind('label').to(this, 'href', (t) => t || o('This link has no URL')),
                            t.bind('isEnabled').to(this, 'href', (t) => !!t),
                            (t.template.tag = 'a'),
                            (t.template.eventListeners = {}),
                            t
                        );
                    }
                }
                class xp extends Gt {
                    static get requires() {
                        return [eh];
                    }
                    static get pluginName() {
                        return 'LinkUI';
                    }
                    init() {
                        const t = this.editor;
                        t.editing.view.addObserver(yh),
                            (this.actionsView = this._createActionsView()),
                            (this.formView = this._createFormView()),
                            (this._balloon = t.plugins.get(eh)),
                            this._createToolbarLinkButton(),
                            this._enableUserBalloonInteractions(),
                            t.conversion
                                .for('editingDowncast')
                                .markerToHighlight({ model: 'link-ui', view: { classes: ['ck-fake-link-selection'] } }),
                            t.conversion.for('editingDowncast').markerToElement({
                                model: 'link-ui',
                                view: {
                                    name: 'span',
                                    classes: ['ck-fake-link-selection', 'ck-fake-link-selection_collapsed'],
                                },
                            });
                    }
                    destroy() {
                        super.destroy(), this.formView.destroy();
                    }
                    _createActionsView() {
                        const t = this.editor,
                            e = new yp(t.locale),
                            o = t.commands.get('link'),
                            i = t.commands.get('unlink');
                        return (
                            e.bind('href').to(o, 'value'),
                            e.editButtonView.bind('isEnabled').to(o),
                            e.unlinkButtonView.bind('isEnabled').to(i),
                            this.listenTo(e, 'edit', () => {
                                this._addFormView();
                            }),
                            this.listenTo(e, 'unlink', () => {
                                t.execute('unlink'), this._hideUI();
                            }),
                            e.keystrokes.set('Esc', (t, e) => {
                                this._hideUI(), e();
                            }),
                            e.keystrokes.set('Ctrl+K', (t, e) => {
                                this._addFormView(), e();
                            }),
                            e
                        );
                    }
                    _createFormView() {
                        const t = this.editor,
                            e = t.commands.get('link'),
                            o = t.config.get('link.defaultProtocol'),
                            i = new vp(t.locale, e);
                        return (
                            i.urlInputView.fieldView.bind('value').to(e, 'value'),
                            i.urlInputView.bind('isReadOnly').to(e, 'isEnabled', (t) => !t),
                            i.saveButtonView.bind('isEnabled').to(e),
                            this.listenTo(i, 'submit', () => {
                                const { value: e } = i.urlInputView.fieldView.element,
                                    n = fp(e, o);
                                t.execute('link', n, i.getDecoratorSwitchesState()), this._closeFormView();
                            }),
                            this.listenTo(i, 'cancel', () => {
                                this._closeFormView();
                            }),
                            i.keystrokes.set('Esc', (t, e) => {
                                this._closeFormView(), e();
                            }),
                            i
                        );
                    }
                    _createToolbarLinkButton() {
                        const t = this.editor,
                            e = t.commands.get('link'),
                            o = t.t;
                        t.keystrokes.set('Ctrl+K', (t, o) => {
                            o(), e.isEnabled && this._showUI(!0);
                        }),
                            t.ui.componentFactory.add('link', (t) => {
                                const i = new rd(t);
                                return (
                                    (i.isEnabled = !0),
                                    (i.label = o('Link')),
                                    (i.icon =
                                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184z"/></svg>'),
                                    (i.keystroke = 'Ctrl+K'),
                                    (i.tooltip = !0),
                                    (i.isToggleable = !0),
                                    i.bind('isEnabled').to(e, 'isEnabled'),
                                    i.bind('isOn').to(e, 'value', (t) => !!t),
                                    this.listenTo(i, 'execute', () => this._showUI(!0)),
                                    i
                                );
                            });
                    }
                    _enableUserBalloonInteractions() {
                        const t = this.editor.editing.view.document;
                        this.listenTo(t, 'click', () => {
                            this._getSelectedLinkElement() && this._showUI();
                        }),
                            this.editor.keystrokes.set(
                                'Tab',
                                (t, e) => {
                                    this._areActionsVisible &&
                                        !this.actionsView.focusTracker.isFocused &&
                                        (this.actionsView.focus(), e());
                                },
                                { priority: 'high' },
                            ),
                            this.editor.keystrokes.set('Esc', (t, e) => {
                                this._isUIVisible && (this._hideUI(), e());
                            }),
                            Vc({
                                emitter: this.formView,
                                activator: () => this._isUIInPanel,
                                contextElements: [this._balloon.view.element],
                                callback: () => this._hideUI(),
                            });
                    }
                    _addActionsView() {
                        this._areActionsInPanel ||
                            this._balloon.add({ view: this.actionsView, position: this._getBalloonPositionData() });
                    }
                    _addFormView() {
                        if (this._isFormInPanel) return;
                        const t = this.editor.commands.get('link');
                        this.formView.disableCssTransitions(),
                            this._balloon.add({ view: this.formView, position: this._getBalloonPositionData() }),
                            this._balloon.visibleView === this.formView &&
                                this.formView.urlInputView.fieldView.select(),
                            this.formView.enableCssTransitions(),
                            (this.formView.urlInputView.fieldView.element.value = t.value || '');
                    }
                    _closeFormView() {
                        const t = this.editor.commands.get('link');
                        t.restoreManualDecoratorStates(), void 0 !== t.value ? this._removeFormView() : this._hideUI();
                    }
                    _removeFormView() {
                        this._isFormInPanel &&
                            (this.formView.saveButtonView.focus(),
                            this._balloon.remove(this.formView),
                            this.editor.editing.view.focus(),
                            this._hideFakeVisualSelection());
                    }
                    _showUI(t = !1) {
                        this._getSelectedLinkElement()
                            ? (this._areActionsVisible ? this._addFormView() : this._addActionsView(),
                              t && this._balloon.showStack('main'))
                            : (this._showFakeVisualSelection(),
                              this._addActionsView(),
                              t && this._balloon.showStack('main'),
                              this._addFormView()),
                            this._startUpdatingUI();
                    }
                    _hideUI() {
                        if (!this._isUIInPanel) return;
                        const t = this.editor;
                        this.stopListening(t.ui, 'update'),
                            this.stopListening(this._balloon, 'change:visibleView'),
                            t.editing.view.focus(),
                            this._removeFormView(),
                            this._balloon.remove(this.actionsView),
                            this._hideFakeVisualSelection();
                    }
                    _startUpdatingUI() {
                        const t = this.editor,
                            e = t.editing.view.document;
                        let o = this._getSelectedLinkElement(),
                            i = r();
                        const n = () => {
                            const t = this._getSelectedLinkElement(),
                                e = r();
                            (o && !t) || (!o && e !== i)
                                ? this._hideUI()
                                : this._isUIVisible && this._balloon.updatePosition(this._getBalloonPositionData()),
                                (o = t),
                                (i = e);
                        };
                        function r() {
                            return e.selection.focus
                                .getAncestors()
                                .reverse()
                                .find((t) => t.is('element'));
                        }
                        this.listenTo(t.ui, 'update', n), this.listenTo(this._balloon, 'change:visibleView', n);
                    }
                    get _isFormInPanel() {
                        return this._balloon.hasView(this.formView);
                    }
                    get _areActionsInPanel() {
                        return this._balloon.hasView(this.actionsView);
                    }
                    get _areActionsVisible() {
                        return this._balloon.visibleView === this.actionsView;
                    }
                    get _isUIInPanel() {
                        return this._isFormInPanel || this._areActionsInPanel;
                    }
                    get _isUIVisible() {
                        return this._balloon.visibleView == this.formView || this._areActionsVisible;
                    }
                    _getBalloonPositionData() {
                        const t = this.editor.editing.view,
                            e = this.editor.model,
                            o = t.document;
                        let i = null;
                        if (e.markers.has('link-ui')) {
                            const e = Array.from(this.editor.editing.mapper.markerNameToElements('link-ui')),
                                o = t.createRange(t.createPositionBefore(e[0]), t.createPositionAfter(e[e.length - 1]));
                            i = t.domConverter.viewRangeToDom(o);
                        } else {
                            const e = this._getSelectedLinkElement(),
                                n = o.selection.getFirstRange();
                            i = e ? t.domConverter.mapViewToDom(e) : t.domConverter.viewRangeToDom(n);
                        }
                        return { target: i };
                    }
                    _getSelectedLinkElement() {
                        const t = this.editor.editing.view,
                            e = t.document.selection;
                        if (e.isCollapsed) return Cp(e.getFirstPosition());
                        {
                            const o = e.getFirstRange().getTrimmed(),
                                i = Cp(o.start),
                                n = Cp(o.end);
                            return i && i == n && t.createRangeIn(i).getTrimmed().isEqual(o) ? i : null;
                        }
                    }
                    _showFakeVisualSelection() {
                        const t = this.editor.model;
                        t.change((e) => {
                            const o = t.document.selection.getFirstRange();
                            if (t.markers.has('link-ui')) e.updateMarker('link-ui', { range: o });
                            else if (o.start.isAtEnd) {
                                const i = o.start.getLastMatchingPosition(({ item: e }) => !t.schema.isContent(e), {
                                    boundaries: o,
                                });
                                e.addMarker('link-ui', {
                                    usingOperation: !1,
                                    affectsData: !1,
                                    range: e.createRange(i, o.end),
                                });
                            } else e.addMarker('link-ui', { usingOperation: !1, affectsData: !1, range: o });
                        });
                    }
                    _hideFakeVisualSelection() {
                        const t = this.editor.model;
                        t.markers.has('link-ui') &&
                            t.change((t) => {
                                t.removeMarker('link-ui');
                            });
                    }
                }
                function Cp(t) {
                    return t.getAncestors().find((t) => {
                        return (e = t).is('attributeElement') && !!e.getCustomProperty('link');
                        var e;
                    });
                }
                const Ap = new RegExp(
                    '(^|\\s)(((?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(((?!www\\.)|(www\\.))(?![-_])(?:[-\\w\\u00a1-\\uffff]{0,63}[^-_]\\.)+(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?)|((www.|(\\S+@))((?![-_])(?:[-\\w\\u00a1-\\uffff]{0,63}[^-_]\\.))+(?:[a-z\\u00a1-\\uffff]{2,})))$',
                    'i',
                );
                class Tp extends Gt {
                    static get pluginName() {
                        return 'AutoLink';
                    }
                    init() {
                        const t = this.editor.model.document.selection;
                        t.on('change:range', () => {
                            this.isEnabled = !t.anchor.parent.is('element', 'codeBlock');
                        }),
                            this._enableTypingHandling();
                    }
                    afterInit() {
                        this._enableEnterHandling(), this._enableShiftEnterHandling();
                    }
                    _enableTypingHandling() {
                        const t = this.editor,
                            e = new gf(t.model, (t) => {
                                if (
                                    !(function (t) {
                                        return t.length > 4 && ' ' === t[t.length - 1] && ' ' !== t[t.length - 2];
                                    })(t)
                                )
                                    return;
                                const e = Pp(t.substr(0, t.length - 1));
                                return e ? { url: e } : void 0;
                            }),
                            o = t.plugins.get('Input');
                        e.on('matched:data', (e, i) => {
                            const { batch: n, range: r, url: s } = i;
                            if (!o.isInput(n)) return;
                            const a = r.end.getShiftedBy(-1),
                                l = a.getShiftedBy(-s.length),
                                c = t.model.createRange(l, a);
                            this._applyAutoLink(s, c);
                        }),
                            e.bind('isEnabled').to(this);
                    }
                    _enableEnterHandling() {
                        const t = this.editor,
                            e = t.model,
                            o = t.commands.get('enter');
                        o &&
                            o.on('execute', () => {
                                const t = e.document.selection.getFirstPosition();
                                if (!t.parent.previousSibling) return;
                                const o = e.createRangeIn(t.parent.previousSibling);
                                this._checkAndApplyAutoLinkOnRange(o);
                            });
                    }
                    _enableShiftEnterHandling() {
                        const t = this.editor,
                            e = t.model,
                            o = t.commands.get('shiftEnter');
                        o &&
                            o.on('execute', () => {
                                const t = e.document.selection.getFirstPosition(),
                                    o = e.createRange(e.createPositionAt(t.parent, 0), t.getShiftedBy(-1));
                                this._checkAndApplyAutoLinkOnRange(o);
                            });
                    }
                    _checkAndApplyAutoLinkOnRange(t) {
                        const e = this.editor.model,
                            { text: o, range: i } = mf(t, e),
                            n = Pp(o);
                        if (n) {
                            const t = e.createRange(i.end.getShiftedBy(-n.length), i.end);
                            this._applyAutoLink(n, t);
                        }
                    }
                    _applyAutoLink(t, e) {
                        const o = this.editor.model;
                        this.isEnabled &&
                            (function (t, e) {
                                return e.schema.checkAttributeInSelection(e.createSelection(t), 'linkHref');
                            })(e, o) &&
                            o.enqueueChange((o) => {
                                const i = this.editor.config.get('link.defaultProtocol'),
                                    n = fp(t, i);
                                o.setAttribute('linkHref', n, e);
                            });
                    }
                }
                function Pp(t) {
                    const e = Ap.exec(t);
                    return e ? e[2] : null;
                }
                class Sp extends Yt {
                    constructor(t, e) {
                        super(t), (this.type = e);
                    }
                    refresh() {
                        (this.value = this._getValue()), (this.isEnabled = this._checkEnabled());
                    }
                    execute() {
                        const t = this.editor.model,
                            e = t.document,
                            o = Array.from(e.selection.getSelectedBlocks()).filter((e) => Rp(e, t.schema)),
                            i = !0 === this.value;
                        t.change((t) => {
                            if (i) {
                                let e = o[o.length - 1].nextSibling,
                                    i = Number.POSITIVE_INFINITY,
                                    n = [];
                                for (; e && 'listItem' == e.name && 0 !== e.getAttribute('listIndent'); ) {
                                    const t = e.getAttribute('listIndent');
                                    t < i && (i = t);
                                    const o = t - i;
                                    n.push({ element: e, listIndent: o }), (e = e.nextSibling);
                                }
                                n = n.reverse();
                                for (const e of n) t.setAttribute('listIndent', e.listIndent, e.element);
                            }
                            if (!i) {
                                let t = Number.POSITIVE_INFINITY;
                                for (const e of o)
                                    e.is('element', 'listItem') &&
                                        e.getAttribute('listIndent') < t &&
                                        (t = e.getAttribute('listIndent'));
                                (t = 0 === t ? 1 : t), Ep(o, !0, t), Ep(o, !1, t);
                            }
                            for (const e of o.reverse())
                                i && 'listItem' == e.name
                                    ? t.rename(e, 'paragraph')
                                    : i || 'listItem' == e.name
                                    ? i ||
                                      'listItem' != e.name ||
                                      e.getAttribute('listType') == this.type ||
                                      t.setAttribute('listType', this.type, e)
                                    : (t.setAttributes({ listType: this.type, listIndent: 0 }, e),
                                      t.rename(e, 'listItem'));
                            this.fire('_executeCleanup', o);
                        });
                    }
                    _getValue() {
                        const t = Ic(this.editor.model.document.selection.getSelectedBlocks());
                        return !!t && t.is('element', 'listItem') && t.getAttribute('listType') == this.type;
                    }
                    _checkEnabled() {
                        if (this.value) return !0;
                        const t = this.editor.model.document.selection,
                            e = this.editor.model.schema,
                            o = Ic(t.getSelectedBlocks());
                        return !!o && Rp(o, e);
                    }
                }
                function Ep(t, e, o) {
                    const i = e ? t[0] : t[t.length - 1];
                    if (i.is('element', 'listItem')) {
                        let n = i[e ? 'previousSibling' : 'nextSibling'],
                            r = i.getAttribute('listIndent');
                        for (; n && n.is('element', 'listItem') && n.getAttribute('listIndent') >= o; )
                            r > n.getAttribute('listIndent') && (r = n.getAttribute('listIndent')),
                                n.getAttribute('listIndent') == r && t[e ? 'unshift' : 'push'](n),
                                (n = n[e ? 'previousSibling' : 'nextSibling']);
                    }
                }
                function Rp(t, e) {
                    return e.checkChild(t.parent, 'listItem') && !e.isObject(t);
                }
                class Ip extends Yt {
                    constructor(t, e) {
                        super(t), (this._indentBy = 'forward' == e ? 1 : -1);
                    }
                    refresh() {
                        this.isEnabled = this._checkEnabled();
                    }
                    execute() {
                        const t = this.editor.model,
                            e = t.document;
                        let o = Array.from(e.selection.getSelectedBlocks());
                        t.change((t) => {
                            const e = o[o.length - 1];
                            let i = e.nextSibling;
                            for (
                                ;
                                i &&
                                'listItem' == i.name &&
                                i.getAttribute('listIndent') > e.getAttribute('listIndent');

                            )
                                o.push(i), (i = i.nextSibling);
                            this._indentBy < 0 && (o = o.reverse());
                            for (const e of o) {
                                const o = e.getAttribute('listIndent') + this._indentBy;
                                o < 0 ? t.rename(e, 'paragraph') : t.setAttribute('listIndent', o, e);
                            }
                            this.fire('_executeCleanup', o);
                        });
                    }
                    _checkEnabled() {
                        const t = Ic(this.editor.model.document.selection.getSelectedBlocks());
                        if (!t || !t.is('element', 'listItem')) return !1;
                        if (this._indentBy > 0) {
                            const e = t.getAttribute('listIndent'),
                                o = t.getAttribute('listType');
                            let i = t.previousSibling;
                            for (; i && i.is('element', 'listItem') && i.getAttribute('listIndent') >= e; ) {
                                if (i.getAttribute('listIndent') == e) return i.getAttribute('listType') == o;
                                i = i.previousSibling;
                            }
                            return !1;
                        }
                        return !0;
                    }
                }
                function Vp(t, e) {
                    const o = e.mapper,
                        i = e.writer,
                        n = 'numbered' == t.getAttribute('listType') ? 'ol' : 'ul',
                        r = (function (t) {
                            const e = t.createContainerElement('li');
                            return (e.getFillerOffset = Dp), e;
                        })(i),
                        s = i.createContainerElement(n, null);
                    return i.insert(i.createPositionAt(s, 0), r), o.bindElements(t, r), r;
                }
                function Op(t, e, o, i) {
                    const n = e.parent,
                        r = o.mapper,
                        s = o.writer;
                    let a = r.toViewPosition(i.createPositionBefore(t));
                    const l = Np(t.previousSibling, {
                            sameIndent: !0,
                            smallerIndent: !0,
                            listIndent: t.getAttribute('listIndent'),
                        }),
                        c = t.previousSibling;
                    if (l && l.getAttribute('listIndent') == t.getAttribute('listIndent')) {
                        const t = r.toViewElement(l);
                        a = s.breakContainer(s.createPositionAfter(t));
                    } else if (c && 'listItem' == c.name) {
                        a = r.toViewPosition(i.createPositionAt(c, 'end'));
                        const t = r.findMappedViewAncestor(a),
                            e = (function (t) {
                                for (const e of t.getChildren()) if ('ul' == e.name || 'ol' == e.name) return e;
                                return null;
                            })(t);
                        a = e ? s.createPositionBefore(e) : s.createPositionAt(t, 'end');
                    } else a = r.toViewPosition(i.createPositionBefore(t));
                    if (((a = Mp(a)), s.insert(a, n), c && 'listItem' == c.name)) {
                        const t = r.toViewElement(c),
                            o = s.createRange(s.createPositionAt(t, 0), a).getWalker({ ignoreElementEnd: !0 });
                        for (const t of o)
                            if (t.item.is('element', 'li')) {
                                const i = s.breakContainer(s.createPositionBefore(t.item)),
                                    n = t.item.parent,
                                    r = s.createPositionAt(e, 'end');
                                zp(s, r.nodeBefore, r.nodeAfter), s.move(s.createRangeOn(n), r), (o.position = i);
                            }
                    } else {
                        const o = n.nextSibling;
                        if (o && (o.is('element', 'ul') || o.is('element', 'ol'))) {
                            let i = null;
                            for (const e of o.getChildren()) {
                                const o = r.toModelElement(e);
                                if (!(o && o.getAttribute('listIndent') > t.getAttribute('listIndent'))) break;
                                i = e;
                            }
                            i &&
                                (s.breakContainer(s.createPositionAfter(i)),
                                s.move(s.createRangeOn(i.parent), s.createPositionAt(e, 'end')));
                        }
                    }
                    zp(s, n, n.nextSibling), zp(s, n.previousSibling, n);
                }
                function zp(t, e, o) {
                    return !e ||
                        !o ||
                        ('ul' != e.name && 'ol' != e.name) ||
                        e.name != o.name ||
                        e.getAttribute('class') !== o.getAttribute('class')
                        ? null
                        : t.mergeContainers(t.createPositionAfter(e));
                }
                function Mp(t) {
                    return t.getLastMatchingPosition((t) => t.item.is('uiElement'));
                }
                function Np(t, e) {
                    const o = !!e.sameIndent,
                        i = !!e.smallerIndent,
                        n = e.listIndent;
                    let r = t;
                    for (; r && 'listItem' == r.name; ) {
                        const t = r.getAttribute('listIndent');
                        if ((o && n == t) || (i && n > t)) return r;
                        r = 'forward' === e.direction ? r.nextSibling : r.previousSibling;
                    }
                    return null;
                }
                function Bp(t, e, o, i) {
                    t.ui.componentFactory.add(e, (n) => {
                        const r = t.commands.get(e),
                            s = new rd(n);
                        return (
                            s.set({ label: o, icon: i, tooltip: !0, isToggleable: !0 }),
                            s.bind('isOn', 'isEnabled').to(r, 'value', 'isEnabled'),
                            s.on('execute', () => {
                                t.execute(e), t.editing.view.focus();
                            }),
                            s
                        );
                    });
                }
                function Fp(t, e) {
                    const o = [],
                        i = t.parent,
                        n = { ignoreElementEnd: !0, startPosition: t, shallow: !0, direction: e },
                        r = i.getAttribute('listIndent'),
                        s = [...new Is(n)].filter((t) => t.item.is('element')).map((t) => t.item);
                    for (const t of s) {
                        if (!t.is('element', 'listItem')) break;
                        if (t.getAttribute('listIndent') < r) break;
                        if (!(t.getAttribute('listIndent') > r)) {
                            if (t.getAttribute('listType') !== i.getAttribute('listType')) break;
                            if (t.getAttribute('listStyle') !== i.getAttribute('listStyle')) break;
                            'backward' === e ? o.unshift(t) : o.push(t);
                        }
                    }
                    return o;
                }
                function Dp() {
                    const t = !this.isEmpty && ('ul' == this.getChild(0).name || 'ol' == this.getChild(0).name);
                    return this.isEmpty || t ? 0 : Qi.call(this);
                }
                function Lp(t) {
                    return (e, o, i) => {
                        const n = i.consumable;
                        if (
                            !n.test(o.item, 'insert') ||
                            !n.test(o.item, 'attribute:listType') ||
                            !n.test(o.item, 'attribute:listIndent')
                        )
                            return;
                        n.consume(o.item, 'insert'),
                            n.consume(o.item, 'attribute:listType'),
                            n.consume(o.item, 'attribute:listIndent');
                        const r = o.item;
                        Op(r, Vp(r, i), i, t);
                    };
                }
                function Hp(t, e, o) {
                    if (!o.consumable.consume(e.item, 'attribute:listType')) return;
                    const i = o.mapper.toViewElement(e.item),
                        n = o.writer;
                    n.breakContainer(n.createPositionBefore(i)), n.breakContainer(n.createPositionAfter(i));
                    const r = i.parent,
                        s = 'numbered' == e.attributeNewValue ? 'ol' : 'ul';
                    n.rename(s, r);
                }
                function jp(t, e, o) {
                    const i = o.mapper.toViewElement(e.item).parent,
                        n = o.writer;
                    zp(n, i, i.nextSibling), zp(n, i.previousSibling, i);
                    for (const t of e.item.getChildren()) o.consumable.consume(t, 'insert');
                }
                function Wp(t, e, o) {
                    if ('listItem' != e.item.name) {
                        let t = o.mapper.toViewPosition(e.range.start);
                        const i = o.writer,
                            n = [];
                        for (
                            ;
                            ('ul' == t.parent.name || 'ol' == t.parent.name) &&
                            ((t = i.breakContainer(t)), 'li' == t.parent.name);

                        ) {
                            const e = t,
                                o = i.createPositionAt(t.parent, 'end');
                            if (!e.isEqual(o)) {
                                const t = i.remove(i.createRange(e, o));
                                n.push(t);
                            }
                            t = i.createPositionAfter(t.parent);
                        }
                        if (n.length > 0) {
                            for (let e = 0; e < n.length; e++) {
                                const o = t.nodeBefore;
                                if (((t = i.insert(t, n[e]).end), e > 0)) {
                                    const e = zp(i, o, o.nextSibling);
                                    e && e.parent == o && t.offset--;
                                }
                            }
                            zp(i, t.nodeBefore, t.nodeAfter);
                        }
                    }
                }
                function qp(t, e, o) {
                    const i = o.mapper.toViewPosition(e.position),
                        n = i.nodeBefore,
                        r = i.nodeAfter;
                    zp(o.writer, n, r);
                }
                function Up(t, e, o) {
                    if (o.consumable.consume(e.viewItem, { name: !0 })) {
                        const t = o.writer,
                            i = t.createElement('listItem'),
                            n = (function (t) {
                                let e = 0,
                                    o = t.parent;
                                for (; o; ) {
                                    if (o.is('element', 'li')) e++;
                                    else {
                                        const t = o.previousSibling;
                                        t && t.is('element', 'li') && e++;
                                    }
                                    o = o.parent;
                                }
                                return e;
                            })(e.viewItem);
                        t.setAttribute('listIndent', n, i);
                        const r = e.viewItem.parent && 'ol' == e.viewItem.parent.name ? 'numbered' : 'bulleted';
                        if ((t.setAttribute('listType', r, i), !o.safeInsert(i, e.modelCursor))) return;
                        const s = (function (t, e, o) {
                            const { writer: i, schema: n } = o;
                            let r = i.createPositionAfter(t);
                            for (const s of e)
                                if ('ul' == s.name || 'ol' == s.name) r = o.convertItem(s, r).modelCursor;
                                else {
                                    const e = o.convertItem(s, i.createPositionAt(t, 'end')),
                                        a = e.modelRange.start.nodeAfter;
                                    a &&
                                        a.is('element') &&
                                        !n.checkChild(t, a.name) &&
                                        ((t = e.modelCursor.parent.is('element', 'listItem')
                                            ? e.modelCursor.parent
                                            : Yp(e.modelCursor)),
                                        (r = i.createPositionAfter(t)));
                                }
                            return r;
                        })(i, e.viewItem.getChildren(), o);
                        (e.modelRange = t.createRange(e.modelCursor, s)), o.updateConversionResult(i, e);
                    }
                }
                function $p(t, e, o) {
                    if (o.consumable.test(e.viewItem, { name: !0 })) {
                        const t = Array.from(e.viewItem.getChildren());
                        for (const e of t) {
                            !(e.is('element', 'li') || Zp(e)) && e._remove();
                        }
                    }
                }
                function Kp(t, e, o) {
                    if (o.consumable.test(e.viewItem, { name: !0 })) {
                        if (0 === e.viewItem.childCount) return;
                        const t = [...e.viewItem.getChildren()];
                        let o = !1,
                            i = !0;
                        for (const e of t)
                            o && !Zp(e) && e._remove(),
                                e.is('$text')
                                    ? (i && (e._data = e.data.replace(/^\s+/, '')),
                                      (e.nextSibling && !Zp(e.nextSibling)) || (e._data = e.data.replace(/\s+$/, '')))
                                    : Zp(e) && (o = !0),
                                (i = !1);
                    }
                }
                function Gp(t) {
                    return (e, o) => {
                        if (o.isPhantom) return;
                        const i = o.modelPosition.nodeBefore;
                        if (i && i.is('element', 'listItem')) {
                            const e = o.mapper.toViewElement(i),
                                n = e.getAncestors().find(Zp),
                                r = t.createPositionAt(e, 0).getWalker();
                            for (const t of r) {
                                if ('elementStart' == t.type && t.item.is('element', 'li')) {
                                    o.viewPosition = t.previousPosition;
                                    break;
                                }
                                if ('elementEnd' == t.type && t.item == n) {
                                    o.viewPosition = t.nextPosition;
                                    break;
                                }
                            }
                        }
                    };
                }
                function Jp(t, [e, o]) {
                    let i,
                        n = e.is('documentFragment') ? e.getChild(0) : e;
                    if (
                        ((i = o ? this.createSelection(o) : this.document.selection), n && n.is('element', 'listItem'))
                    ) {
                        const t = i.getFirstPosition();
                        let e = null;
                        if (
                            (t.parent.is('element', 'listItem')
                                ? (e = t.parent)
                                : t.nodeBefore && t.nodeBefore.is('element', 'listItem') && (e = t.nodeBefore),
                            e)
                        ) {
                            const t = e.getAttribute('listIndent');
                            if (t > 0)
                                for (; n && n.is('element', 'listItem'); )
                                    n._setAttribute('listIndent', n.getAttribute('listIndent') + t),
                                        (n = n.nextSibling);
                        }
                    }
                }
                function Yp(t) {
                    const e = new Is({ startPosition: t });
                    let o;
                    do {
                        o = e.next();
                    } while (!o.value.item.is('element', 'listItem'));
                    return o.value.item;
                }
                function Xp(t, e, o, i, n, r) {
                    const s = Np(e.nodeBefore, { sameIndent: !0, smallerIndent: !0, listIndent: t, foo: 'b' }),
                        a = n.mapper,
                        l = n.writer,
                        c = s ? s.getAttribute('listIndent') : null;
                    let d;
                    if (s)
                        if (c == t) {
                            const t = a.toViewElement(s).parent;
                            d = l.createPositionAfter(t);
                        } else {
                            const t = r.createPositionAt(s, 'end');
                            d = a.toViewPosition(t);
                        }
                    else d = o;
                    d = Mp(d);
                    for (const t of [...i.getChildren()])
                        Zp(t) &&
                            ((d = l.move(l.createRangeOn(t), d).end),
                            zp(l, t, t.nextSibling),
                            zp(l, t.previousSibling, t));
                }
                function Zp(t) {
                    return t.is('element', 'ol') || t.is('element', 'ul');
                }
                class Qp extends Gt {
                    static get pluginName() {
                        return 'ListEditing';
                    }
                    init() {
                        const t = this.editor;
                        t.model.schema.register('listItem', {
                            inheritAllFrom: '$block',
                            allowAttributes: ['listType', 'listIndent'],
                        });
                        const e = t.data,
                            o = t.editing;
                        var i;
                        t.model.document.registerPostFixer((e) =>
                            (function (t, e) {
                                const o = t.document.differ.getChanges(),
                                    i = new Map();
                                let n = !1;
                                for (const i of o)
                                    if ('insert' == i.type && 'listItem' == i.name) r(i.position);
                                    else if ('insert' == i.type && 'listItem' != i.name) {
                                        if ('$text' != i.name) {
                                            const o = i.position.nodeAfter;
                                            o.hasAttribute('listIndent') &&
                                                (e.removeAttribute('listIndent', o), (n = !0)),
                                                o.hasAttribute('listType') &&
                                                    (e.removeAttribute('listType', o), (n = !0)),
                                                o.hasAttribute('listStyle') &&
                                                    (e.removeAttribute('listStyle', o), (n = !0));
                                            for (const e of Array.from(t.createRangeIn(o)).filter((t) =>
                                                t.item.is('element', 'listItem'),
                                            ))
                                                r(e.previousPosition);
                                        }
                                        r(i.position.getShiftedBy(i.length));
                                    } else
                                        'remove' == i.type && 'listItem' == i.name
                                            ? r(i.position)
                                            : (('attribute' == i.type && 'listIndent' == i.attributeKey) ||
                                                  ('attribute' == i.type && 'listType' == i.attributeKey)) &&
                                              r(i.range.start);
                                for (const t of i.values()) s(t), a(t);
                                return n;
                                function r(t) {
                                    const e = t.nodeBefore;
                                    if (e && e.is('element', 'listItem')) {
                                        let t = e;
                                        if (i.has(t)) return;
                                        for (
                                            let e = t.previousSibling;
                                            e && e.is('element', 'listItem');
                                            e = t.previousSibling
                                        )
                                            if (((t = e), i.has(t))) return;
                                        i.set(e, t);
                                    } else {
                                        const e = t.nodeAfter;
                                        e && e.is('element', 'listItem') && i.set(e, e);
                                    }
                                }
                                function s(t) {
                                    let o = 0,
                                        i = null;
                                    for (; t && t.is('element', 'listItem'); ) {
                                        const r = t.getAttribute('listIndent');
                                        if (r > o) {
                                            let s;
                                            null === i ? ((i = r - o), (s = o)) : (i > r && (i = r), (s = r - i)),
                                                e.setAttribute('listIndent', s, t),
                                                (n = !0);
                                        } else (i = null), (o = t.getAttribute('listIndent') + 1);
                                        t = t.nextSibling;
                                    }
                                }
                                function a(t) {
                                    let o = [],
                                        i = null;
                                    for (; t && t.is('element', 'listItem'); ) {
                                        const r = t.getAttribute('listIndent');
                                        if ((i && i.getAttribute('listIndent') > r && (o = o.slice(0, r + 1)), 0 != r))
                                            if (o[r]) {
                                                const i = o[r];
                                                t.getAttribute('listType') != i &&
                                                    (e.setAttribute('listType', i, t), (n = !0));
                                            } else o[r] = t.getAttribute('listType');
                                        (i = t), (t = t.nextSibling);
                                    }
                                }
                            })(t.model, e),
                        ),
                            o.mapper.registerViewToModelLength('li', tb),
                            e.mapper.registerViewToModelLength('li', tb),
                            o.mapper.on('modelToViewPosition', Gp(o.view)),
                            o.mapper.on(
                                'viewToModelPosition',
                                ((i = t.model),
                                (t, e) => {
                                    const o = e.viewPosition,
                                        n = o.parent,
                                        r = e.mapper;
                                    if ('ul' == n.name || 'ol' == n.name) {
                                        if (o.isAtEnd) {
                                            const t = r.toModelElement(o.nodeBefore),
                                                n = r.getModelLength(o.nodeBefore);
                                            e.modelPosition = i.createPositionBefore(t).getShiftedBy(n);
                                        } else {
                                            const t = r.toModelElement(o.nodeAfter);
                                            e.modelPosition = i.createPositionBefore(t);
                                        }
                                        t.stop();
                                    } else if (
                                        'li' == n.name &&
                                        o.nodeBefore &&
                                        ('ul' == o.nodeBefore.name || 'ol' == o.nodeBefore.name)
                                    ) {
                                        const s = r.toModelElement(n);
                                        let a = 1,
                                            l = o.nodeBefore;
                                        for (; l && Zp(l); ) (a += r.getModelLength(l)), (l = l.previousSibling);
                                        (e.modelPosition = i.createPositionBefore(s).getShiftedBy(a)), t.stop();
                                    }
                                }),
                            ),
                            e.mapper.on('modelToViewPosition', Gp(o.view)),
                            t.conversion.for('editingDowncast').add((e) => {
                                e.on('insert', Wp, { priority: 'high' }),
                                    e.on('insert:listItem', Lp(t.model)),
                                    e.on('attribute:listType:listItem', Hp, { priority: 'high' }),
                                    e.on('attribute:listType:listItem', jp, { priority: 'low' }),
                                    e.on(
                                        'attribute:listIndent:listItem',
                                        (function (t) {
                                            return (e, o, i) => {
                                                if (!i.consumable.consume(o.item, 'attribute:listIndent')) return;
                                                const n = i.mapper.toViewElement(o.item),
                                                    r = i.writer;
                                                r.breakContainer(r.createPositionBefore(n)),
                                                    r.breakContainer(r.createPositionAfter(n));
                                                const s = n.parent,
                                                    a = s.previousSibling,
                                                    l = r.createRangeOn(s);
                                                r.remove(l),
                                                    a && a.nextSibling && zp(r, a, a.nextSibling),
                                                    Xp(o.attributeOldValue + 1, o.range.start, l.start, n, i, t),
                                                    Op(o.item, n, i, t);
                                                for (const t of o.item.getChildren()) i.consumable.consume(t, 'insert');
                                            };
                                        })(t.model),
                                    ),
                                    e.on(
                                        'remove:listItem',
                                        (function (t) {
                                            return (e, o, i) => {
                                                const n = i.mapper
                                                        .toViewPosition(o.position)
                                                        .getLastMatchingPosition(
                                                            (t) => !t.item.is('element', 'li'),
                                                        ).nodeAfter,
                                                    r = i.writer;
                                                r.breakContainer(r.createPositionBefore(n)),
                                                    r.breakContainer(r.createPositionAfter(n));
                                                const s = n.parent,
                                                    a = s.previousSibling,
                                                    l = r.createRangeOn(s),
                                                    c = r.remove(l);
                                                a && a.nextSibling && zp(r, a, a.nextSibling);
                                                Xp(
                                                    i.mapper.toModelElement(n).getAttribute('listIndent') + 1,
                                                    o.position,
                                                    l.start,
                                                    n,
                                                    i,
                                                    t,
                                                );
                                                for (const t of r.createRangeIn(c).getItems())
                                                    i.mapper.unbindViewElement(t);
                                                e.stop();
                                            };
                                        })(t.model),
                                    ),
                                    e.on('remove', qp, { priority: 'low' });
                            }),
                            t.conversion.for('dataDowncast').add((e) => {
                                e.on('insert', Wp, { priority: 'high' }), e.on('insert:listItem', Lp(t.model));
                            }),
                            t.conversion.for('upcast').add((t) => {
                                t.on('element:ul', $p, { priority: 'high' }),
                                    t.on('element:ol', $p, { priority: 'high' }),
                                    t.on('element:li', Kp, { priority: 'high' }),
                                    t.on('element:li', Up);
                            }),
                            t.model.on('insertContent', Jp, { priority: 'high' }),
                            t.commands.add('numberedList', new Sp(t, 'numbered')),
                            t.commands.add('bulletedList', new Sp(t, 'bulleted')),
                            t.commands.add('indentList', new Ip(t, 'forward')),
                            t.commands.add('outdentList', new Ip(t, 'backward'));
                        const n = o.view.document;
                        this.listenTo(n, 'enter', (t, e) => {
                            const o = this.editor.model.document,
                                i = o.selection.getLastPosition().parent;
                            o.selection.isCollapsed &&
                                'listItem' == i.name &&
                                i.isEmpty &&
                                (this.editor.execute('outdentList'), e.preventDefault(), t.stop());
                        }),
                            this.listenTo(
                                n,
                                'delete',
                                (t, e) => {
                                    if ('backward' !== e.direction) return;
                                    const o = this.editor.model.document.selection;
                                    if (!o.isCollapsed) return;
                                    const i = o.getFirstPosition();
                                    if (!i.isAtStart) return;
                                    const n = i.parent;
                                    if ('listItem' !== n.name) return;
                                    (n.previousSibling && 'listItem' === n.previousSibling.name) ||
                                        (this.editor.execute('outdentList'), e.preventDefault(), t.stop());
                                },
                                { priority: a.high + 10 },
                            );
                        const r = (t) => (e, o) => {
                            this.editor.commands.get(t).isEnabled && (this.editor.execute(t), o());
                        };
                        t.keystrokes.set('Tab', r('indentList')), t.keystrokes.set('Shift+Tab', r('outdentList'));
                    }
                    afterInit() {
                        const t = this.editor.commands,
                            e = t.get('indent'),
                            o = t.get('outdent');
                        e && e.registerChildCommand(t.get('indentList')),
                            o && o.registerChildCommand(t.get('outdentList'));
                    }
                }
                function tb(t) {
                    let e = 1;
                    for (const o of t.getChildren())
                        if ('ul' == o.name || 'ol' == o.name) for (const t of o.getChildren()) e += tb(t);
                    return e;
                }
                var eb =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM3.5 3v5H2V3.7H1v-1h2.5V3zM.343 17.857l2.59-3.257H2.92a.6.6 0 1 0-1.04 0H.302a2 2 0 1 1 3.995 0h-.001c-.048.405-.16.734-.333.988-.175.254-.59.692-1.244 1.312H4.3v1h-4l.043-.043zM7 14.75a.75.75 0 0 1 .75-.75h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75z"/></svg>',
                    ob =
                        '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0C1 4.784 1.777 4 2.75 4c.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75C1.784 7.5 1 6.723 1 5.75zm6 9c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0c0-.966.777-1.75 1.75-1.75.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75-.966 0-1.75-.777-1.75-1.75z"/></svg>';
                class ib extends Gt {
                    static get pluginName() {
                        return 'ListUI';
                    }
                    init() {
                        const t = this.editor.t;
                        Bp(this.editor, 'numberedList', t('Numbered List'), eb),
                            Bp(this.editor, 'bulletedList', t('Bulleted List'), ob);
                    }
                }
                class nb extends Yt {
                    constructor(t, e) {
                        super(t), (this._defaultType = e);
                    }
                    refresh() {
                        (this.value = this._getValue()), (this.isEnabled = this._checkEnabled());
                    }
                    execute(t = {}) {
                        const e = this.editor.model;
                        let o = [...e.document.selection.getSelectedBlocks()]
                            .filter((t) => t.is('element', 'listItem'))
                            .map((t) => {
                                const o = e.change((e) => e.createPositionAt(t, 0));
                                return [...Fp(o, 'backward'), ...Fp(o, 'forward')];
                            })
                            .flat();
                        (o = [...new Set(o)]),
                            o.length &&
                                e.change((e) => {
                                    for (const i of o) e.setAttribute('listStyle', t.type || this._defaultType, i);
                                });
                    }
                    _getValue() {
                        const t = this.editor.model.document.selection.getFirstPosition().parent;
                        return t && t.is('element', 'listItem') ? t.getAttribute('listStyle') : null;
                    }
                    _checkEnabled() {
                        const t = this.editor,
                            e = t.commands.get('numberedList'),
                            o = t.commands.get('bulletedList');
                        return e.isEnabled || o.isEnabled;
                    }
                }
                class rb extends Gt {
                    static get requires() {
                        return [Qp];
                    }
                    static get pluginName() {
                        return 'ListStyleEditing';
                    }
                    init() {
                        const t = this.editor,
                            e = t.model;
                        e.schema.extend('listItem', { allowAttributes: ['listStyle'] }),
                            t.commands.add('listStyle', new nb(t, 'default')),
                            this.listenTo(
                                t.commands.get('indentList'),
                                '_executeCleanup',
                                (function (t) {
                                    return (e, o) => {
                                        let i;
                                        const n = o[0],
                                            r = n.getAttribute('listIndent'),
                                            s = o.filter((t) => t.getAttribute('listIndent') === r);
                                        if (n.previousSibling.getAttribute('listIndent') + 1 === r) i = 'default';
                                        else {
                                            const t = Np(n.previousSibling, {
                                                sameIndent: !0,
                                                direction: 'backward',
                                                listIndent: r,
                                            });
                                            i = t.getAttribute('listStyle');
                                        }
                                        t.model.change((t) => {
                                            for (const e of s) t.setAttribute('listStyle', i, e);
                                        });
                                    };
                                })(t),
                            ),
                            this.listenTo(
                                t.commands.get('outdentList'),
                                '_executeCleanup',
                                (function (t) {
                                    return (e, o) => {
                                        if (!(o = o.reverse().filter((t) => t.is('element', 'listItem'))).length)
                                            return;
                                        const i = o[0].getAttribute('listIndent'),
                                            n = o[0].getAttribute('listType');
                                        let r = o[0].previousSibling;
                                        if (r.is('element', 'listItem'))
                                            for (; r.getAttribute('listIndent') !== i; ) r = r.previousSibling;
                                        else r = null;
                                        r || (r = o[o.length - 1].nextSibling),
                                            r &&
                                                r.is('element', 'listItem') &&
                                                r.getAttribute('listType') === n &&
                                                t.model.change((t) => {
                                                    const e = o.filter((t) => t.getAttribute('listIndent') === i);
                                                    for (const o of e)
                                                        t.setAttribute('listStyle', r.getAttribute('listStyle'), o);
                                                });
                                    };
                                })(t),
                            ),
                            this.listenTo(t.commands.get('bulletedList'), '_executeCleanup', lb(t)),
                            this.listenTo(t.commands.get('numberedList'), '_executeCleanup', lb(t)),
                            e.document.registerPostFixer(
                                (function (t) {
                                    return (e) => {
                                        let o = !1;
                                        const i = cb(t.model.document.differ.getChanges()).filter(
                                            (t) => 'todo' !== t.getAttribute('listType'),
                                        );
                                        if (!i.length) return o;
                                        let n = i[i.length - 1].nextSibling;
                                        if (
                                            (!n || !n.is('element', 'listItem')) &&
                                            ((n = i[i.length - 1].previousSibling), n)
                                        ) {
                                            const t = i[0].getAttribute('listIndent');
                                            for (
                                                ;
                                                n.is('element', 'listItem') &&
                                                n.getAttribute('listIndent') !== t &&
                                                ((n = n.previousSibling), n);

                                            );
                                        }
                                        for (const t of i)
                                            if (t.hasAttribute('listStyle')) {
                                                const i = t.previousSibling;
                                                ab(i, t) &&
                                                    (e.setAttribute('listStyle', i.getAttribute('listStyle'), t),
                                                    (o = !0));
                                            } else
                                                sb(n, t)
                                                    ? e.setAttribute('listStyle', n.getAttribute('listStyle'), t)
                                                    : e.setAttribute('listStyle', 'default', t),
                                                    (o = !0);
                                        return o;
                                    };
                                })(t),
                            ),
                            t.conversion.for('upcast').add((t) => {
                                t.on(
                                    'element:li',
                                    (t, e, o) => {
                                        const i = e.viewItem.parent.getStyle('list-style-type') || 'default',
                                            n = e.modelRange.start.nodeAfter || e.modelRange.end.nodeBefore;
                                        o.writer.setAttribute('listStyle', i, n);
                                    },
                                    { priority: 'low' },
                                );
                            }),
                            t.conversion.for('downcast').add((t) => {
                                t.on(
                                    'attribute:listStyle:listItem',
                                    (t, e, o) => {
                                        const i = o.writer,
                                            n = e.item,
                                            r = Np(n.previousSibling, {
                                                sameIndent: !0,
                                                listIndent: n.getAttribute('listIndent'),
                                                direction: 'backward',
                                            }),
                                            s = o.mapper.toViewElement(n);
                                        var a, l, c, d, h;
                                        (a = n),
                                            ((l = r) &&
                                                a.getAttribute('listType') === l.getAttribute('listType') &&
                                                a.getAttribute('listIndent') === l.getAttribute('listIndent') &&
                                                a.getAttribute('listStyle') === l.getAttribute('listStyle')) ||
                                                i.breakContainer(i.createPositionBefore(s)),
                                            (c = i),
                                            (d = e.attributeNewValue),
                                            (h = s.parent),
                                            d && 'default' !== d
                                                ? c.setStyle('list-style-type', d, h)
                                                : c.removeStyle('list-style-type', h);
                                    },
                                    { priority: 'low' },
                                );
                            }),
                            this._mergeListStyleAttributeWhileMergingLists();
                    }
                    afterInit() {
                        const t = this.editor;
                        t.commands.get('todoList') &&
                            t.model.document.registerPostFixer(
                                (function (t) {
                                    return (e) => {
                                        const o = cb(t.model.document.differ.getChanges()).filter(
                                            (t) => 'todo' === t.getAttribute('listType') && t.hasAttribute('listStyle'),
                                        );
                                        if (!o.length) return !1;
                                        for (const t of o) e.removeAttribute('listStyle', t);
                                        return !0;
                                    };
                                })(t),
                            );
                    }
                    _mergeListStyleAttributeWhileMergingLists() {
                        const t = this.editor.model;
                        let e;
                        this.listenTo(
                            t,
                            'deleteContent',
                            (t, [o]) => {
                                const i = o.getFirstPosition(),
                                    n = o.getLastPosition();
                                if (i.parent === n.parent) return;
                                if (!i.parent.is('element', 'listItem')) return;
                                const r = n.parent.nextSibling;
                                if (!r || !r.is('element', 'listItem')) return;
                                const s = Np(i.parent, { sameIndent: !0, listIndent: r.getAttribute('listIndent') });
                                s && s.getAttribute('listType') === r.getAttribute('listType') && (e = s);
                            },
                            { priority: 'high' },
                        ),
                            this.listenTo(
                                t,
                                'deleteContent',
                                () => {
                                    e &&
                                        (t.change((t) => {
                                            const o = Np(e.nextSibling, {
                                                    sameIndent: !0,
                                                    listIndent: e.getAttribute('listIndent'),
                                                    direction: 'forward',
                                                }),
                                                i = [o, ...Fp(t.createPositionAt(o, 0), 'forward')];
                                            for (const o of i)
                                                t.setAttribute('listStyle', e.getAttribute('listStyle'), o);
                                        }),
                                        (e = null));
                                },
                                { priority: 'low' },
                            );
                    }
                }
                function sb(t, e) {
                    if (!t) return !1;
                    const o = t.getAttribute('listStyle');
                    return !!o && 'default' !== o && t.getAttribute('listType') === e.getAttribute('listType');
                }
                function ab(t, e) {
                    if (!t || !t.is('element', 'listItem')) return !1;
                    if (e.getAttribute('listType') !== t.getAttribute('listType')) return !1;
                    const o = t.getAttribute('listIndent');
                    if (o < 1 || o !== e.getAttribute('listIndent')) return !1;
                    const i = t.getAttribute('listStyle');
                    return !(!i || i === e.getAttribute('listStyle'));
                }
                function lb(t) {
                    return (e, o) => {
                        (o = o.filter((t) => t.is('element', 'listItem'))),
                            t.model.change((t) => {
                                for (const e of o) t.removeAttribute('listStyle', e);
                            });
                    };
                }
                function cb(t) {
                    const e = [];
                    for (const o of t) {
                        const t = db(o);
                        t && t.is('element', 'listItem') && e.push(t);
                    }
                    return e;
                }
                function db(t) {
                    return 'attribute' === t.type
                        ? t.range.start.nodeAfter
                        : 'insert' === t.type
                        ? t.position.nodeAfter
                        : null;
                }
                o(100);
                class hb extends Gt {
                    static get pluginName() {
                        return 'ListStyleUI';
                    }
                    init() {
                        const t = this.editor,
                            e = t.locale.t;
                        t.ui.componentFactory.add(
                            'bulletedList',
                            ub({
                                editor: t,
                                parentCommandName: 'bulletedList',
                                buttonLabel: e('Bulleted List'),
                                buttonIcon: ob,
                                toolbarAriaLabel: e('Bulleted list styles toolbar'),
                                styleDefinitions: [
                                    {
                                        label: e('Toggle the disc list style'),
                                        tooltip: e('Disc'),
                                        type: 'disc',
                                        icon: '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M11 27a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0-9a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0-9a3 3 0 1 1 0 6 3 3 0 0 1 0-6z"/></svg>',
                                    },
                                    {
                                        label: e('Toggle the circle list style'),
                                        tooltip: e('Circle'),
                                        type: 'circle',
                                        icon: '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M11 27a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0 1a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm0-10a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0 1a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm0-10a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0 1a2 2 0 1 0 0 4 2 2 0 0 0 0-4z"/></svg>',
                                    },
                                    {
                                        label: e('Toggle the square list style'),
                                        tooltip: e('Square'),
                                        type: 'square',
                                        icon: '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M14 27v6H8v-6h6zm0-9v6H8v-6h6zm0-9v6H8V9h6z"/></svg>',
                                    },
                                ],
                            }),
                        ),
                            t.ui.componentFactory.add(
                                'numberedList',
                                ub({
                                    editor: t,
                                    parentCommandName: 'numberedList',
                                    buttonLabel: e('Numbered List'),
                                    buttonIcon: eb,
                                    toolbarAriaLabel: e('Numbered list styles toolbar'),
                                    styleDefinitions: [
                                        {
                                            label: e('Toggle the decimal list style'),
                                            tooltip: e('Decimal'),
                                            type: 'decimal',
                                            icon: '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M10.29 15V8.531H9.286c-.14.393-.4.736-.778 1.03-.378.295-.728.495-1.05.6v1.121a4.257 4.257 0 0 0 1.595-.936V15h1.235zm3.343 0v-1.235h-1.235V15h1.235zM11.3 24v-1.147H8.848c.064-.111.148-.226.252-.343.104-.117.351-.354.74-.712.39-.357.66-.631.81-.821.225-.288.39-.562.494-.824.104-.263.156-.539.156-.829 0-.51-.182-.936-.545-1.279-.363-.342-.863-.514-1.499-.514-.58 0-1.063.148-1.45.444-.387.296-.617.784-.69 1.463l1.23.124c.024-.36.112-.619.264-.774.153-.155.358-.233.616-.233.26 0 .465.074.613.222.148.148.222.36.222.635 0 .25-.085.501-.255.756-.126.185-.468.536-1.024 1.055-.692.641-1.155 1.156-1.389 1.544-.234.389-.375.8-.422 1.233H11.3zm2.333 0v-1.235h-1.235V24h1.235zM9.204 34.11c.615 0 1.129-.2 1.542-.598.413-.398.62-.88.62-1.446 0-.39-.11-.722-.332-.997a1.5 1.5 0 0 0-.886-.532c.619-.337.928-.788.928-1.353 0-.399-.151-.756-.453-1.073-.366-.386-.852-.58-1.459-.58a2.25 2.25 0 0 0-.96.2 1.617 1.617 0 0 0-.668.55c-.16.232-.28.544-.358.933l1.138.194c.032-.282.123-.495.272-.642.15-.146.33-.22.54-.22.215 0 .386.065.515.194s.193.302.193.518c0 .255-.087.46-.263.613-.176.154-.43.227-.765.218l-.136 1.006c.22-.061.409-.092.567-.092.24 0 .444.09.61.272.168.182.251.428.251.739 0 .328-.087.589-.261.782a.833.833 0 0 1-.644.29.841.841 0 0 1-.607-.242c-.167-.16-.27-.394-.307-.698l-1.196.145c.062.542.285.98.668 1.316.384.335.868.503 1.45.503zm4.43-.11v-1.235h-1.236V34h1.235z"/></svg>',
                                        },
                                        {
                                            label: e('Toggle the decimal with leading zero list style'),
                                            tooltip: e('Decimal with leading zero'),
                                            type: 'decimal-leading-zero',
                                            icon: '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M5.714 15.11c.624 0 1.11-.22 1.46-.66.421-.533.632-1.408.632-2.627 0-1.222-.21-2.096-.629-2.624-.351-.445-.839-.668-1.463-.668-.624 0-1.11.22-1.459.66-.422.533-.633 1.406-.633 2.619 0 1.236.192 2.095.576 2.577.384.482.89.723 1.516.723zm0-1.024a.614.614 0 0 1-.398-.14c-.115-.094-.211-.283-.287-.565-.077-.283-.115-.802-.115-1.558s.043-1.294.128-1.613c.064-.246.155-.417.272-.512a.617.617 0 0 1 .4-.143.61.61 0 0 1 .398.143c.116.095.211.284.288.567.076.283.114.802.114 1.558s-.043 1.292-.128 1.608c-.064.246-.155.417-.272.512a.617.617 0 0 1-.4.143zm6.078.914V8.531H10.79c-.14.393-.4.736-.778 1.03-.378.295-.728.495-1.05.6v1.121a4.257 4.257 0 0 0 1.595-.936V15h1.235zm3.344 0v-1.235h-1.235V15h1.235zm-9.422 9.11c.624 0 1.11-.22 1.46-.66.421-.533.632-1.408.632-2.627 0-1.222-.21-2.096-.629-2.624-.351-.445-.839-.668-1.463-.668-.624 0-1.11.22-1.459.66-.422.533-.633 1.406-.633 2.619 0 1.236.192 2.095.576 2.577.384.482.89.723 1.516.723zm0-1.024a.614.614 0 0 1-.398-.14c-.115-.094-.211-.283-.287-.565-.077-.283-.115-.802-.115-1.558s.043-1.294.128-1.613c.064-.246.155-.417.272-.512a.617.617 0 0 1 .4-.143.61.61 0 0 1 .398.143c.116.095.211.284.288.567.076.283.114.802.114 1.558s-.043 1.292-.128 1.608c-.064.246-.155.417-.272.512a.617.617 0 0 1-.4.143zm7.088.914v-1.147H10.35c.065-.111.149-.226.253-.343.104-.117.35-.354.74-.712.39-.357.66-.631.81-.821.225-.288.39-.562.493-.824.104-.263.156-.539.156-.829 0-.51-.181-.936-.544-1.279-.364-.342-.863-.514-1.499-.514-.58 0-1.063.148-1.45.444-.387.296-.617.784-.69 1.463l1.23.124c.024-.36.112-.619.264-.774.152-.155.357-.233.615-.233.261 0 .465.074.613.222.148.148.222.36.222.635 0 .25-.085.501-.255.756-.126.185-.467.536-1.024 1.055-.691.641-1.154 1.156-1.388 1.544-.235.389-.375.8-.422 1.233h4.328zm2.334 0v-1.235h-1.235V24h1.235zM5.714 34.11c.624 0 1.11-.22 1.46-.66.421-.533.632-1.408.632-2.627 0-1.222-.21-2.096-.629-2.624-.351-.445-.839-.668-1.463-.668-.624 0-1.11.22-1.459.66-.422.533-.633 1.406-.633 2.619 0 1.236.192 2.095.576 2.577.384.482.89.723 1.516.723zm0-1.024a.614.614 0 0 1-.398-.14c-.115-.094-.211-.283-.287-.565-.077-.283-.115-.802-.115-1.558s.043-1.294.128-1.613c.064-.246.155-.417.272-.512a.617.617 0 0 1 .4-.143.61.61 0 0 1 .398.143c.116.095.211.284.288.567.076.283.114.802.114 1.558s-.043 1.292-.128 1.608c-.064.246-.155.417-.272.512a.617.617 0 0 1-.4.143zm4.992 1.024c.616 0 1.13-.2 1.543-.598.413-.398.62-.88.62-1.446 0-.39-.111-.722-.332-.997a1.5 1.5 0 0 0-.886-.532c.618-.337.927-.788.927-1.353 0-.399-.15-.756-.452-1.073-.366-.386-.853-.58-1.46-.58a2.25 2.25 0 0 0-.96.2 1.617 1.617 0 0 0-.667.55c-.16.232-.28.544-.359.933l1.139.194c.032-.282.123-.495.272-.642.15-.146.33-.22.54-.22.214 0 .386.065.515.194s.193.302.193.518c0 .255-.088.46-.264.613-.175.154-.43.227-.764.218l-.136 1.006c.22-.061.408-.092.566-.092.24 0 .444.09.611.272.167.182.25.428.25.739 0 .328-.086.589-.26.782a.833.833 0 0 1-.644.29.841.841 0 0 1-.607-.242c-.167-.16-.27-.394-.308-.698l-1.195.145c.062.542.284.98.668 1.316.384.335.867.503 1.45.503zm4.43-.11v-1.235h-1.235V34h1.235z"/></svg>',
                                        },
                                        {
                                            label: e('Toggle the lower–roman list style'),
                                            tooltip: e('Lower–roman'),
                                            type: 'lower-roman',
                                            icon: '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M11.88 8.7V7.558h-1.234V8.7h1.234zm0 5.3V9.333h-1.234V14h1.234zm2.5 0v-1.235h-1.234V14h1.235zm-4.75 4.7v-1.142H8.395V18.7H9.63zm0 5.3v-4.667H8.395V24H9.63zm2.5-5.3v-1.142h-1.234V18.7h1.235zm0 5.3v-4.667h-1.234V24h1.235zm2.501 0v-1.235h-1.235V24h1.235zM7.38 28.7v-1.142H6.145V28.7H7.38zm0 5.3v-4.667H6.145V34H7.38zm2.5-5.3v-1.142H8.646V28.7H9.88zm0 5.3v-4.667H8.646V34H9.88zm2.5-5.3v-1.142h-1.234V28.7h1.235zm0 5.3v-4.667h-1.234V34h1.235zm2.501 0v-1.235h-1.235V34h1.235z"/></svg>',
                                        },
                                        {
                                            label: e('Toggle the upper–roman list style'),
                                            tooltip: e('Upper-roman'),
                                            type: 'upper-roman',
                                            icon: '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M11.916 15V8.558h-1.301V15h1.3zm2.465 0v-1.235h-1.235V15h1.235zM9.665 25v-6.442h-1.3V25h1.3zm2.5 0v-6.442h-1.3V25h1.3zm2.466 0v-1.235h-1.235V25h1.235zm-7.216 9v-6.442h-1.3V34h1.3zm2.5 0v-6.442h-1.3V34h1.3zm2.501 0v-6.442h-1.3V34h1.3zm2.465 0v-1.235h-1.235V34h1.235z"/></svg>',
                                        },
                                        {
                                            label: e('Toggle the lower–latin list style'),
                                            tooltip: e('Lower-latin'),
                                            type: 'lower-latin',
                                            icon: '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M9.62 14.105c.272 0 .528-.05.768-.153s.466-.257.677-.462c.009.024.023.072.044.145.047.161.086.283.119.365h1.221a2.649 2.649 0 0 1-.222-.626c-.04-.195-.059-.498-.059-.908l.013-1.441c0-.536-.055-.905-.165-1.105-.11-.201-.3-.367-.569-.497-.27-.13-.68-.195-1.23-.195-.607 0-1.064.108-1.371.325-.308.217-.525.55-.65 1.002l1.12.202c.076-.217.176-.369.299-.455.123-.086.294-.13.514-.13.325 0 .546.05.663.152.118.101.176.27.176.508v.123c-.222.093-.622.194-1.2.303-.427.082-.755.178-.982.288-.227.11-.403.268-.53.474a1.327 1.327 0 0 0-.188.706c0 .398.138.728.415.988.277.261.656.391 1.136.391zm.368-.87a.675.675 0 0 1-.492-.189.606.606 0 0 1-.193-.448c0-.176.08-.32.241-.435.106-.07.33-.142.673-.215a7.19 7.19 0 0 0 .751-.19v.247c0 .296-.016.496-.048.602a.773.773 0 0 1-.295.409 1.07 1.07 0 0 1-.637.22zm4.645.765v-1.235h-1.235V14h1.235zM10.2 25.105c.542 0 1.003-.215 1.382-.646.38-.43.57-1.044.57-1.84 0-.771-.187-1.362-.559-1.774a1.82 1.82 0 0 0-1.41-.617c-.522 0-.973.216-1.354.65v-2.32H7.594V25h1.147v-.686a1.9 1.9 0 0 0 .67.592c.26.133.523.2.79.2zm-.299-.975c-.354 0-.638-.164-.852-.492-.153-.232-.229-.59-.229-1.073 0-.468.098-.818.295-1.048a.93.93 0 0 1 .738-.345c.302 0 .55.118.743.354.193.236.29.62.29 1.154 0 .5-.096.868-.288 1.1-.192.233-.424.35-.697.35zm4.478.87v-1.235h-1.234V25h1.234zm-4.017 9.105c.6 0 1.08-.142 1.437-.426.357-.284.599-.704.725-1.261l-1.213-.207c-.061.326-.167.555-.316.688a.832.832 0 0 1-.576.2.916.916 0 0 1-.75-.343c-.185-.228-.278-.62-.278-1.173 0-.498.091-.853.274-1.066.183-.212.429-.318.736-.318.232 0 .42.061.565.184.145.123.238.306.28.55l1.216-.22c-.146-.501-.387-.874-.722-1.119-.336-.244-.788-.366-1.356-.366-.695 0-1.245.214-1.653.643-.407.43-.61 1.03-.61 1.8 0 .762.202 1.358.608 1.788.406.431.95.646 1.633.646zM14.633 34v-1.235h-1.235V34h1.235z"/></svg>',
                                        },
                                        {
                                            label: e('Toggle the upper–latin list style'),
                                            tooltip: e('Upper-latin'),
                                            type: 'upper-latin',
                                            icon: '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M7.88 15l.532-1.463h2.575L11.549 15h1.415l-2.58-6.442H9.01L6.5 15h1.38zm2.69-2.549H8.811l.87-2.39.887 2.39zM14.88 15v-1.235h-1.234V15h1.234zM9.352 25c.83-.006 1.352-.02 1.569-.044.346-.038.636-.14.872-.305.236-.166.422-.387.558-.664.137-.277.205-.562.205-.855 0-.372-.106-.695-.317-.97-.21-.276-.512-.471-.905-.585a1.51 1.51 0 0 0 .661-.567 1.5 1.5 0 0 0 .244-.83c0-.28-.066-.53-.197-.754a1.654 1.654 0 0 0-.495-.539 1.676 1.676 0 0 0-.672-.266c-.25-.042-.63-.063-1.14-.063H7.158V25h2.193zm.142-3.88H8.46v-1.49h.747c.612 0 .983.007 1.112.022.217.026.38.102.49.226.11.125.165.287.165.486a.68.68 0 0 1-.192.503.86.86 0 0 1-.525.23 11.47 11.47 0 0 1-.944.023h.18zm.17 2.795H8.46v-1.723h1.05c.592 0 .977.03 1.154.092.177.062.313.16.406.295a.84.84 0 0 1 .14.492c0 .228-.06.41-.181.547a.806.806 0 0 1-.473.257c-.126.026-.423.04-.892.04zM14.88 25v-1.235h-1.234V25h1.234zm-5.018 9.11c.691 0 1.262-.17 1.711-.512.45-.341.772-.864.965-1.567l-1.261-.4c-.109.472-.287.818-.536 1.037-.25.22-.547.33-.892.33-.47 0-.85-.173-1.143-.519-.293-.345-.44-.925-.44-1.74 0-.767.15-1.322.447-1.665.297-.343.684-.514 1.162-.514.346 0 .64.096.881.29.242.193.4.457.477.79l1.288-.307c-.147-.516-.367-.911-.66-1.187-.492-.465-1.132-.698-1.92-.698-.902 0-1.63.296-2.184.89-.554.593-.83 1.426-.83 2.498 0 1.014.275 1.813.825 2.397.551.585 1.254.877 2.11.877zM14.88 34v-1.235h-1.234V34h1.234z"/></svg>',
                                        },
                                    ],
                                }),
                            );
                    }
                }
                function ub({
                    editor: t,
                    parentCommandName: e,
                    buttonLabel: o,
                    buttonIcon: i,
                    toolbarAriaLabel: n,
                    styleDefinitions: r,
                }) {
                    const s = t.commands.get(e),
                        a = t.commands.get('listStyle');
                    return (l) => {
                        const c = Od(l, pd),
                            d = c.buttonView,
                            h = (function ({ editor: t, listStyleCommand: e, parentCommandName: o }) {
                                const i = t.locale,
                                    n = t.commands.get(o);
                                return ({ label: r, type: s, icon: a, tooltip: l }) => {
                                    const c = new rd(i);
                                    return (
                                        c.set({ label: r, icon: a, tooltip: l }),
                                        e.on('change:value', () => {
                                            c.isOn = e.value === s;
                                        }),
                                        c.on('execute', () => {
                                            n.value
                                                ? e.value !== s
                                                    ? t.execute('listStyle', { type: s })
                                                    : t.execute('listStyle', { type: e._defaultType })
                                                : t.model.change(() => {
                                                      t.execute(o), t.execute('listStyle', { type: s });
                                                  }),
                                                t.editing.view.focus();
                                        }),
                                        c
                                    );
                                };
                            })({ editor: t, parentCommandName: e, listStyleCommand: a });
                        return (
                            zd(c, r.map(h)),
                            c.bind('isEnabled').to(s),
                            (c.toolbarView.ariaLabel = n),
                            (c.class = 'ck-list-styles-dropdown'),
                            d.on('execute', () => {
                                t.execute(e), t.editing.view.focus();
                            }),
                            d.set({ label: o, icon: i, tooltip: !0, isToggleable: !0 }),
                            d.bind('isOn').to(s, 'value', (t) => !!t),
                            c
                        );
                    };
                }
                function fb(t, e, o, i, n = 1) {
                    e > n ? i.setAttribute(t, e, o) : i.removeAttribute(t, o);
                }
                function mb(t, e, o = {}) {
                    const i = t.createElement('tableCell', o);
                    return t.insertElement('paragraph', i), t.insert(i, e), i;
                }
                function gb(t, e) {
                    const o = e.parent.parent,
                        i = parseInt(o.getAttribute('headingColumns') || 0),
                        { column: n } = t.getCellLocation(e);
                    return !!i && n < i;
                }
                function pb() {
                    return (t) => {
                        t.on('element:table', (t, e, o) => {
                            const i = e.viewItem;
                            if (!o.consumable.test(i, { name: !0 })) return;
                            const {
                                    rows: n,
                                    headingRows: r,
                                    headingColumns: s,
                                } = (function (t) {
                                    const e = { headingRows: 0, headingColumns: 0 },
                                        o = [],
                                        i = [];
                                    let n;
                                    for (const r of Array.from(t.getChildren()))
                                        if ('tbody' === r.name || 'thead' === r.name || 'tfoot' === r.name) {
                                            'thead' !== r.name || n || (n = r);
                                            const t = Array.from(r.getChildren()).filter((t) => t.is('element', 'tr'));
                                            for (const r of t)
                                                if ('thead' === r.parent.name && r.parent === n)
                                                    e.headingRows++, o.push(r);
                                                else {
                                                    i.push(r);
                                                    const t = wb(r);
                                                    t > e.headingColumns && (e.headingColumns = t);
                                                }
                                        }
                                    return (e.rows = [...o, ...i]), e;
                                })(i),
                                a = {};
                            s && (a.headingColumns = s), r && (a.headingRows = r);
                            const l = o.writer.createElement('table', a);
                            if (o.safeInsert(l, e.modelCursor)) {
                                if (
                                    (o.consumable.consume(i, { name: !0 }),
                                    n.forEach((t) => o.convertItem(t, o.writer.createPositionAt(l, 'end'))),
                                    l.isEmpty)
                                ) {
                                    const t = o.writer.createElement('tableRow');
                                    o.writer.insert(t, o.writer.createPositionAt(l, 'end')),
                                        mb(o.writer, o.writer.createPositionAt(t, 'end'));
                                }
                                o.updateConversionResult(l, e);
                            }
                        });
                    };
                }
                function bb(t) {
                    return (e) => {
                        e.on(
                            'element:' + t,
                            (t, e, o) => {
                                if (e.modelRange && e.viewItem.isEmpty) {
                                    const t = e.modelRange.start.nodeAfter,
                                        i = o.writer.createPositionAt(t, 0);
                                    o.writer.insertElement('paragraph', i);
                                }
                            },
                            { priority: 'low' },
                        );
                    };
                }
                function wb(t) {
                    let e = 0,
                        o = 0;
                    const i = Array.from(t.getChildren()).filter((t) => 'th' === t.name || 'td' === t.name);
                    for (; o < i.length && 'th' === i[o].name; ) {
                        const t = i[o];
                        (e += parseInt(t.getAttribute('colspan') || 1)), o++;
                    }
                    return e;
                }
                class kb {
                    constructor(t, e = {}) {
                        (this._table = t),
                            (this._startRow = void 0 !== e.row ? e.row : e.startRow || 0),
                            (this._endRow = void 0 !== e.row ? e.row : e.endRow),
                            (this._startColumn = void 0 !== e.column ? e.column : e.startColumn || 0),
                            (this._endColumn = void 0 !== e.column ? e.column : e.endColumn),
                            (this._includeAllSlots = !!e.includeAllSlots),
                            (this._skipRows = new Set()),
                            (this._row = 0),
                            (this._column = 0),
                            (this._cellIndex = 0),
                            (this._spannedCells = new Map()),
                            (this._nextCellAtColumn = -1);
                    }
                    [Symbol.iterator]() {
                        return this;
                    }
                    next() {
                        const t = this._table.getChild(this._row);
                        if (!t || this._isOverEndRow()) return { done: !0 };
                        if (this._isOverEndColumn()) return this._advanceToNextRow();
                        let e = null;
                        const o = this._getSpanned();
                        if (o)
                            this._includeAllSlots &&
                                !this._shouldSkipSlot() &&
                                (e = this._formatOutValue(o.cell, o.row, o.column));
                        else {
                            const o = t.getChild(this._cellIndex);
                            if (!o) return this._advanceToNextRow();
                            const i = parseInt(o.getAttribute('colspan') || 1),
                                n = parseInt(o.getAttribute('rowspan') || 1);
                            (i > 1 || n > 1) && this._recordSpans(o, n, i),
                                this._shouldSkipSlot() || (e = this._formatOutValue(o)),
                                (this._nextCellAtColumn = this._column + i);
                        }
                        return (
                            this._column++,
                            this._column == this._nextCellAtColumn && this._cellIndex++,
                            e || this.next()
                        );
                    }
                    skipRow(t) {
                        this._skipRows.add(t);
                    }
                    _advanceToNextRow() {
                        return (
                            this._row++,
                            (this._column = 0),
                            (this._cellIndex = 0),
                            (this._nextCellAtColumn = -1),
                            this.next()
                        );
                    }
                    _isOverEndRow() {
                        return void 0 !== this._endRow && this._row > this._endRow;
                    }
                    _isOverEndColumn() {
                        return void 0 !== this._endColumn && this._column > this._endColumn;
                    }
                    _formatOutValue(t, e = this._row, o = this._column) {
                        return { done: !1, value: new _b(this, t, e, o) };
                    }
                    _shouldSkipSlot() {
                        const t = this._skipRows.has(this._row),
                            e = this._row < this._startRow,
                            o = this._column < this._startColumn,
                            i = void 0 !== this._endColumn && this._column > this._endColumn;
                        return t || e || o || i;
                    }
                    _getSpanned() {
                        const t = this._spannedCells.get(this._row);
                        return (t && t.get(this._column)) || null;
                    }
                    _recordSpans(t, e, o) {
                        const i = { cell: t, row: this._row, column: this._column };
                        for (let t = this._row; t < this._row + e; t++)
                            for (let e = this._column; e < this._column + o; e++)
                                (t == this._row && e == this._column) || this._markSpannedCell(t, e, i);
                    }
                    _markSpannedCell(t, e, o) {
                        this._spannedCells.has(t) || this._spannedCells.set(t, new Map());
                        this._spannedCells.get(t).set(e, o);
                    }
                }
                class _b {
                    constructor(t, e, o, i) {
                        (this.cell = e),
                            (this.row = t._row),
                            (this.column = t._column),
                            (this.cellAnchorRow = o),
                            (this.cellAnchorColumn = i),
                            (this._cellIndex = t._cellIndex),
                            (this._table = t._table);
                    }
                    get isAnchor() {
                        return this.row === this.cellAnchorRow && this.column === this.cellAnchorColumn;
                    }
                    get cellWidth() {
                        return parseInt(this.cell.getAttribute('colspan') || 1);
                    }
                    get cellHeight() {
                        return parseInt(this.cell.getAttribute('rowspan') || 1);
                    }
                    getPositionBefore() {
                        return this._table.root.document.model.createPositionAt(
                            this._table.getChild(this.row),
                            this._cellIndex,
                        );
                    }
                }
                function vb(t = {}) {
                    return (e) =>
                        e.on('insert:table', (e, o, i) => {
                            const n = o.item;
                            if (!i.consumable.consume(n, 'insert')) return;
                            i.consumable.consume(n, 'attribute:headingRows:table'),
                                i.consumable.consume(n, 'attribute:headingColumns:table');
                            const r = t && t.asWidget,
                                s = i.writer.createContainerElement('figure', { class: 'table' }),
                                a = i.writer.createContainerElement('table');
                            let l;
                            var c, d;
                            i.writer.insert(i.writer.createPositionAt(s, 0), a),
                                r &&
                                    ((c = s),
                                    (d = i.writer).setCustomProperty('table', !0, c),
                                    (l = _m(c, d, { hasSelectionHandle: !0 })));
                            const h = new kb(n),
                                u = {
                                    headingRows: n.getAttribute('headingRows') || 0,
                                    headingColumns: n.getAttribute('headingColumns') || 0,
                                },
                                f = new Map();
                            for (const e of h) {
                                const { row: o, cell: r } = e,
                                    s = n.getChild(o),
                                    l = f.get(o) || Tb(a, s, o, u, i);
                                f.set(o, l), i.consumable.consume(r, 'insert');
                                Ab(e, u, i.writer.createPositionAt(l, 'end'), i, t);
                            }
                            for (const t of n.getChildren()) {
                                const e = t.index;
                                f.has(e) || f.set(e, Tb(a, t, e, u, i));
                            }
                            const m = i.mapper.toViewPosition(o.range.start);
                            i.mapper.bindElements(n, r ? l : s), i.writer.insert(m, r ? l : s);
                        });
                }
                function yb(t, e) {
                    const { writer: o } = e;
                    if (t.parent.is('element', 'tableCell'))
                        return xb(t)
                            ? o.createContainerElement('span', { style: 'display:inline-block' })
                            : o.createContainerElement('p');
                }
                function xb(t) {
                    return 1 === t.parent.childCount && !Rb(t);
                }
                function Cb(t, e, o) {
                    const { cell: i } = t,
                        n = Pb(t, e),
                        r = o.mapper.toViewElement(i);
                    r &&
                        r.name !== n &&
                        (function (t, e, o) {
                            const i = o.writer,
                                n = o.mapper.toViewElement(t),
                                r = xm(i.createEditableElement(e, n.getAttributes()), i);
                            vm(
                                r,
                                i,
                                (t, e, o) => o.addClass(Zo(e.classes), t),
                                (t, e, o) => o.removeClass(Zo(e.classes), t),
                            ),
                                i.insert(i.createPositionAfter(n), r),
                                i.move(i.createRangeIn(n), i.createPositionAt(r, 0)),
                                i.remove(i.createRangeOn(n)),
                                o.mapper.unbindViewElement(n),
                                o.mapper.bindElements(t, r);
                        })(i, n, o);
                }
                function Ab(t, e, o, i, n) {
                    const r = n && n.asWidget,
                        s = Pb(t, e),
                        a = r ? xm(i.writer.createEditableElement(s), i.writer) : i.writer.createContainerElement(s);
                    r &&
                        vm(
                            a,
                            i.writer,
                            (t, e, o) => o.addClass(Zo(e.classes), t),
                            (t, e, o) => o.removeClass(Zo(e.classes), t),
                        );
                    const l = t.cell,
                        c = l.getChild(0),
                        d = 1 === l.childCount && 'paragraph' === c.name;
                    if ((i.writer.insert(o, a), i.mapper.bindElements(l, a), !r && d && !Rb(c))) {
                        const t = l.getChild(0);
                        i.consumable.consume(t, 'insert'), i.mapper.bindElements(t, a);
                    }
                }
                function Tb(t, e, o, i, n) {
                    n.consumable.consume(e, 'insert');
                    const r = e.isEmpty ? n.writer.createEmptyElement('tr') : n.writer.createContainerElement('tr');
                    n.mapper.bindElements(e, r);
                    const s = i.headingRows,
                        a = (function (t, e, o) {
                            const i = Sb(t, e);
                            return (
                                i ||
                                (function (t, e, o) {
                                    const i = o.writer.createContainerElement(t),
                                        n = o.writer.createPositionAt(e, 'tbody' == t ? 'end' : 0);
                                    return o.writer.insert(n, i), i;
                                })(t, e, o)
                            );
                        })(
                            (function (t, e) {
                                return t < e.headingRows ? 'thead' : 'tbody';
                            })(o, i),
                            t,
                            n,
                        ),
                        l = s > 0 && o >= s ? o - s : o,
                        c = n.writer.createPositionAt(a, l);
                    return n.writer.insert(c, r), r;
                }
                function Pb(t, e) {
                    const { row: o, column: i } = t,
                        { headingColumns: n, headingRows: r } = e;
                    if (r && r > o) return 'th';
                    return n && n > i ? 'th' : 'td';
                }
                function Sb(t, e) {
                    for (const o of e.getChildren()) if (o.name == t) return o;
                }
                function Eb(t, e, o) {
                    const i = Sb(t, e);
                    i && 0 === i.childCount && o.writer.remove(o.writer.createRangeOn(i));
                }
                function Rb(t) {
                    return !![...t.getAttributeKeys()].length;
                }
                class Ib extends Yt {
                    refresh() {
                        const t = this.editor.model,
                            e = t.document.selection,
                            o = t.schema;
                        this.isEnabled =
                            (function (t, e) {
                                const o = t.getFirstPosition().parent,
                                    i = o === o.root ? o : o.parent;
                                return e.checkChild(i, 'table');
                            })(e, o) && !Am(e, o);
                    }
                    execute(t = {}) {
                        const e = this.editor.model,
                            o = e.document.selection,
                            i = this.editor.plugins.get('TableUtils'),
                            n = Cm(o, e);
                        e.change((o) => {
                            const r = i.createTable(o, t);
                            e.insertContent(r, n), o.setSelection(o.createPositionAt(r.getNodeByPath([0, 0, 0]), 0));
                        });
                    }
                }
                function Vb(t) {
                    const e = [];
                    for (const o of Fb(t.getRanges())) {
                        const t = o.getContainedElement();
                        t && t.is('element', 'tableCell') && e.push(t);
                    }
                    return e;
                }
                function Ob(t) {
                    const e = [];
                    for (const o of t.getRanges()) {
                        const t = o.start.findAncestor('tableCell');
                        t && e.push(t);
                    }
                    return e;
                }
                function zb(t) {
                    const e = Vb(t);
                    return e.length ? e : Ob(t);
                }
                function Mb(t) {
                    return Db(t.map((t) => t.parent.index));
                }
                function Nb(t) {
                    const e = t[0].findAncestor('table');
                    return Db([...new kb(e)].filter((e) => t.includes(e.cell)).map((t) => t.column));
                }
                function Bb(t, e) {
                    if (
                        t.length < 2 ||
                        !(function (t) {
                            const e = t[0].findAncestor('table'),
                                o = Mb(t),
                                i = parseInt(e.getAttribute('headingRows') || 0);
                            if (!Hb(o, i)) return !1;
                            const n = parseInt(e.getAttribute('headingColumns') || 0);
                            return Hb(Nb(t), n);
                        })(t)
                    )
                        return !1;
                    const o = new Set(),
                        i = new Set();
                    let n = 0;
                    for (const r of t) {
                        const { row: t, column: s } = e.getCellLocation(r),
                            a = parseInt(r.getAttribute('rowspan') || 1),
                            l = parseInt(r.getAttribute('colspan') || 1);
                        o.add(t), i.add(s), a > 1 && o.add(t + a - 1), l > 1 && i.add(s + l - 1), (n += a * l);
                    }
                    return (
                        (function (t, e) {
                            const o = Array.from(t.values()),
                                i = Array.from(e.values()),
                                n = Math.max(...o),
                                r = Math.min(...o),
                                s = Math.max(...i),
                                a = Math.min(...i);
                            return (n - r + 1) * (s - a + 1);
                        })(o, i) == n
                    );
                }
                function Fb(t) {
                    return Array.from(t).sort(Lb);
                }
                function Db(t) {
                    const e = t.sort((t, e) => t - e);
                    return { first: e[0], last: e[e.length - 1] };
                }
                function Lb(t, e) {
                    const o = t.start,
                        i = e.start;
                    return o.isBefore(i) ? -1 : 1;
                }
                function Hb({ first: t, last: e }, o) {
                    return t < o === e < o;
                }
                class jb extends Yt {
                    constructor(t, e = {}) {
                        super(t), (this.order = e.order || 'below');
                    }
                    refresh() {
                        const t = this.editor.model.document.selection.getFirstPosition().findAncestor('table');
                        this.isEnabled = !!t;
                    }
                    execute() {
                        const t = this.editor,
                            e = t.model.document.selection,
                            o = t.plugins.get('TableUtils'),
                            i = 'above' === this.order,
                            n = zb(e),
                            r = Mb(n),
                            s = i ? r.first : r.last,
                            a = n[0].findAncestor('table');
                        o.insertRows(a, { at: i ? s : s + 1, copyStructureFromAbove: !i });
                    }
                }
                class Wb extends Yt {
                    constructor(t, e = {}) {
                        super(t), (this.order = e.order || 'right');
                    }
                    refresh() {
                        const t = this.editor.model.document.selection.getFirstPosition().findAncestor('table');
                        this.isEnabled = !!t;
                    }
                    execute() {
                        const t = this.editor,
                            e = t.model.document.selection,
                            o = t.plugins.get('TableUtils'),
                            i = 'left' === this.order,
                            n = zb(e),
                            r = Nb(n),
                            s = i ? r.first : r.last,
                            a = n[0].findAncestor('table');
                        o.insertColumns(a, { columns: 1, at: i ? s : s + 1 });
                    }
                }
                class qb extends Yt {
                    constructor(t, e = {}) {
                        super(t), (this.direction = e.direction || 'horizontally');
                    }
                    refresh() {
                        const t = zb(this.editor.model.document.selection);
                        this.isEnabled = 1 === t.length;
                    }
                    execute() {
                        const t = zb(this.editor.model.document.selection)[0],
                            e = 'horizontally' === this.direction,
                            o = this.editor.plugins.get('TableUtils');
                        e ? o.splitCellHorizontally(t, 2) : o.splitCellVertically(t, 2);
                    }
                }
                function Ub(t, e, o) {
                    const { startRow: i, startColumn: n, endRow: r, endColumn: s } = e,
                        a = o.createElement('table'),
                        l = r - i + 1;
                    for (let t = 0; t < l; t++) o.insertElement('tableRow', a, 'end');
                    const c = [
                        ...new kb(t, { startRow: i, endRow: r, startColumn: n, endColumn: s, includeAllSlots: !0 }),
                    ];
                    for (const {
                        row: t,
                        column: e,
                        cell: l,
                        isAnchor: d,
                        cellAnchorRow: h,
                        cellAnchorColumn: u,
                    } of c) {
                        const c = t - i,
                            f = a.getChild(c);
                        if (d) {
                            const i = o.cloneElement(l);
                            o.append(i, f), Yb(i, t, e, r, s, o);
                        } else (h < i || u < n) && mb(o, o.createPositionAt(f, 'end'));
                    }
                    return (
                        (function (t, e, o, i, n) {
                            const r = parseInt(e.getAttribute('headingRows') || 0);
                            if (r > 0) {
                                fb('headingRows', r - o, t, n, 0);
                            }
                            const s = parseInt(e.getAttribute('headingColumns') || 0);
                            if (s > 0) {
                                fb('headingColumns', s - i, t, n, 0);
                            }
                        })(a, t, i, n, o),
                        a
                    );
                }
                function $b(t, e, o = 0) {
                    const i = [],
                        n = new kb(t, { startRow: o, endRow: e - 1 });
                    for (const t of n) {
                        const { row: o, cellHeight: n } = t,
                            r = o + n - 1;
                        o < e && e <= r && i.push(t);
                    }
                    return i;
                }
                function Kb(t, e, o) {
                    const i = t.parent,
                        n = i.parent,
                        r = i.index,
                        s = e - r,
                        a = {},
                        l = parseInt(t.getAttribute('rowspan')) - s;
                    l > 1 && (a.rowspan = l);
                    const c = parseInt(t.getAttribute('colspan') || 1);
                    c > 1 && (a.colspan = c);
                    const d = r + s,
                        h = [...new kb(n, { startRow: r, endRow: d, includeAllSlots: !0 })];
                    let u,
                        f = null;
                    for (const e of h) {
                        const { row: i, column: n, cell: r } = e;
                        r === t && void 0 === u && (u = n),
                            void 0 !== u && u === n && i === d && (f = mb(o, e.getPositionBefore(), a));
                    }
                    return fb('rowspan', s, t, o), f;
                }
                function Gb(t, e) {
                    const o = [],
                        i = new kb(t);
                    for (const t of i) {
                        const { column: i, cellWidth: n } = t,
                            r = i + n - 1;
                        i < e && e <= r && o.push(t);
                    }
                    return o;
                }
                function Jb(t, e, o, i) {
                    const n = o - e,
                        r = {},
                        s = parseInt(t.getAttribute('colspan')) - n;
                    s > 1 && (r.colspan = s);
                    const a = parseInt(t.getAttribute('rowspan') || 1);
                    a > 1 && (r.rowspan = a);
                    const l = mb(i, i.createPositionAfter(t), r);
                    return fb('colspan', n, t, i), l;
                }
                function Yb(t, e, o, i, n, r) {
                    const s = parseInt(t.getAttribute('colspan') || 1),
                        a = parseInt(t.getAttribute('rowspan') || 1);
                    if (o + s - 1 > n) {
                        fb('colspan', n - o + 1, t, r, 1);
                    }
                    if (e + a - 1 > i) {
                        fb('rowspan', i - e + 1, t, r, 1);
                    }
                }
                function Xb(t, e) {
                    const o = e.getColumns(t),
                        i = new Array(o).fill(0);
                    for (const { column: e } of new kb(t)) i[e]++;
                    const n = i.reduce((t, e, o) => (e ? t : [...t, o]), []);
                    if (n.length > 0) {
                        const o = n[n.length - 1];
                        return e.removeColumns(t, { at: o }), !0;
                    }
                    return !1;
                }
                function Zb(t, e) {
                    const o = [];
                    for (let e = 0; e < t.childCount; e++) {
                        t.getChild(e).isEmpty && o.push(e);
                    }
                    if (o.length > 0) {
                        const i = o[o.length - 1];
                        return e.removeRows(t, { at: i }), !0;
                    }
                    return !1;
                }
                function Qb(t, e) {
                    Xb(t, e) || Zb(t, e);
                }
                function tw(t, e) {
                    const o = Array.from(
                        new kb(t, { startColumn: e.firstColumn, endColumn: e.lastColumn, row: e.lastRow }),
                    );
                    if (o.every(({ cellHeight: t }) => 1 === t)) return e.lastRow;
                    const i = o[0].cellHeight - 1;
                    return e.lastRow + i;
                }
                function ew(t, e) {
                    const o = Array.from(new kb(t, { startRow: e.firstRow, endRow: e.lastRow, column: e.lastColumn }));
                    if (o.every(({ cellWidth: t }) => 1 === t)) return e.lastColumn;
                    const i = o[0].cellWidth - 1;
                    return e.lastColumn + i;
                }
                class ow extends Yt {
                    constructor(t, e) {
                        super(t),
                            (this.direction = e.direction),
                            (this.isHorizontal = 'right' == this.direction || 'left' == this.direction);
                    }
                    refresh() {
                        const t = this._getMergeableCell();
                        (this.value = t), (this.isEnabled = !!t);
                    }
                    execute() {
                        const t = this.editor.model,
                            e = Ob(t.document.selection)[0],
                            o = this.value,
                            i = this.direction;
                        t.change((t) => {
                            const n = 'right' == i || 'down' == i,
                                r = n ? e : o,
                                s = n ? o : e,
                                a = s.parent;
                            !(function (t, e, o) {
                                iw(t) ||
                                    (iw(e) && o.remove(o.createRangeIn(e)),
                                    o.move(o.createRangeIn(t), o.createPositionAt(e, 'end')));
                                o.remove(t);
                            })(s, r, t);
                            const l = this.isHorizontal ? 'colspan' : 'rowspan',
                                c = parseInt(e.getAttribute(l) || 1),
                                d = parseInt(o.getAttribute(l) || 1);
                            t.setAttribute(l, c + d, r), t.setSelection(t.createRangeIn(r));
                            const h = this.editor.plugins.get('TableUtils');
                            Qb(a.findAncestor('table'), h);
                        });
                    }
                    _getMergeableCell() {
                        const t = Ob(this.editor.model.document.selection)[0];
                        if (!t) return;
                        const e = this.editor.plugins.get('TableUtils'),
                            o = this.isHorizontal
                                ? (function (t, e, o) {
                                      const i = t.parent.parent,
                                          n = 'right' == e ? t.nextSibling : t.previousSibling,
                                          r = (i.getAttribute('headingColumns') || 0) > 0;
                                      if (!n) return;
                                      const s = 'right' == e ? t : n,
                                          a = 'right' == e ? n : t,
                                          { column: l } = o.getCellLocation(s),
                                          { column: c } = o.getCellLocation(a),
                                          d = parseInt(s.getAttribute('colspan') || 1),
                                          h = gb(o, s),
                                          u = gb(o, a);
                                      if (r && h != u) return;
                                      return l + d === c ? n : void 0;
                                  })(t, this.direction, e)
                                : (function (t, e) {
                                      const o = t.parent,
                                          i = o.parent,
                                          n = i.getChildIndex(o);
                                      if (('down' == e && n === i.childCount - 1) || ('up' == e && 0 === n)) return;
                                      const r = parseInt(t.getAttribute('rowspan') || 1),
                                          s = i.getAttribute('headingRows') || 0,
                                          a = 'down' == e && n + r === s,
                                          l = 'up' == e && n === s;
                                      if (s && (a || l)) return;
                                      const c = parseInt(t.getAttribute('rowspan') || 1),
                                          d = 'down' == e ? n + c : n,
                                          h = [...new kb(i, { endRow: d })],
                                          u = h.find((e) => e.cell === t).column,
                                          f = h.find(
                                              ({ row: t, cellHeight: o, column: i }) =>
                                                  i === u && ('down' == e ? t === d : d === t + o),
                                          );
                                      return f && f.cell;
                                  })(t, this.direction);
                        if (!o) return;
                        const i = this.isHorizontal ? 'rowspan' : 'colspan',
                            n = parseInt(t.getAttribute(i) || 1);
                        return parseInt(o.getAttribute(i) || 1) === n ? o : void 0;
                    }
                }
                function iw(t) {
                    return 1 == t.childCount && t.getChild(0).is('element', 'paragraph') && t.getChild(0).isEmpty;
                }
                class nw extends Yt {
                    refresh() {
                        const t = zb(this.editor.model.document.selection),
                            e = t[0];
                        if (e) {
                            const o = e.findAncestor('table'),
                                i = this.editor.plugins.get('TableUtils').getRows(o) - 1,
                                n = Mb(t),
                                r = 0 === n.first && n.last === i;
                            this.isEnabled = !r;
                        } else this.isEnabled = !1;
                    }
                    execute() {
                        const t = this.editor.model,
                            e = zb(t.document.selection),
                            o = Mb(e),
                            i = e[0],
                            n = i.findAncestor('table'),
                            r = this.editor.plugins.get('TableUtils').getCellLocation(i).column;
                        t.change((t) => {
                            const e = o.last - o.first + 1;
                            this.editor.plugins.get('TableUtils').removeRows(n, { at: o.first, rows: e });
                            const i = (function (t, e, o) {
                                const i = t.getChild(e) || t.getChild(t.childCount - 1);
                                let n = i.getChild(0),
                                    r = 0;
                                for (const t of i.getChildren()) {
                                    if (r > o) return n;
                                    (n = t), (r += parseInt(t.getAttribute('colspan') || 1));
                                }
                                return n;
                            })(n, o.first, r);
                            t.setSelection(t.createPositionAt(i, 0));
                        });
                    }
                }
                class rw extends Yt {
                    refresh() {
                        const t = zb(this.editor.model.document.selection),
                            e = t[0];
                        if (e) {
                            const o = e.findAncestor('table'),
                                i = this.editor.plugins.get('TableUtils').getColumns(o),
                                { first: n, last: r } = Nb(t);
                            this.isEnabled = r - n < i - 1;
                        } else this.isEnabled = !1;
                    }
                    execute() {
                        const [t, e] = (function (t) {
                                const e = zb(t),
                                    o = e[0],
                                    i = e.pop(),
                                    n = [o, i];
                                return o.isBefore(i) ? n : n.reverse();
                            })(this.editor.model.document.selection),
                            o = t.parent.parent,
                            i = [...new kb(o)],
                            n = { first: i.find((e) => e.cell === t).column, last: i.find((t) => t.cell === e).column },
                            r = (function (t, e, o, i) {
                                return parseInt(o.getAttribute('colspan') || 1) > 1
                                    ? o
                                    : e.previousSibling || o.nextSibling
                                    ? o.nextSibling || e.previousSibling
                                    : i.first
                                    ? t.reverse().find(({ column: t }) => t < i.first).cell
                                    : t.reverse().find(({ column: t }) => t > i.last).cell;
                            })(i, t, e, n);
                        this.editor.model.change((t) => {
                            const e = n.last - n.first + 1;
                            this.editor.plugins.get('TableUtils').removeColumns(o, { at: n.first, columns: e }),
                                t.setSelection(t.createPositionAt(r, 0));
                        });
                    }
                }
                class sw extends Yt {
                    refresh() {
                        const t = zb(this.editor.model.document.selection),
                            e = t.length > 0;
                        (this.isEnabled = e), (this.value = e && t.every((t) => this._isInHeading(t, t.parent.parent)));
                    }
                    execute(t = {}) {
                        if (t.forceValue === this.value) return;
                        const e = this.editor.model,
                            o = zb(e.document.selection),
                            i = o[0].findAncestor('table'),
                            { first: n, last: r } = Mb(o),
                            s = this.value ? n : r + 1,
                            a = i.getAttribute('headingRows') || 0;
                        e.change((t) => {
                            if (s) {
                                const e = $b(i, s, s > a ? a : 0);
                                for (const { cell: o } of e) Kb(o, s, t);
                            }
                            fb('headingRows', s, i, t, 0);
                        });
                    }
                    _isInHeading(t, e) {
                        const o = parseInt(e.getAttribute('headingRows') || 0);
                        return !!o && t.parent.index < o;
                    }
                }
                class aw extends Yt {
                    refresh() {
                        const t = zb(this.editor.model.document.selection),
                            e = this.editor.plugins.get('TableUtils'),
                            o = t.length > 0;
                        (this.isEnabled = o), (this.value = o && t.every((t) => gb(e, t)));
                    }
                    execute(t = {}) {
                        if (t.forceValue === this.value) return;
                        const e = this.editor.model,
                            o = zb(e.document.selection),
                            i = o[0].findAncestor('table'),
                            { first: n, last: r } = Nb(o),
                            s = this.value ? n : r + 1;
                        e.change((t) => {
                            if (s) {
                                const e = Gb(i, s);
                                for (const { cell: o, column: i } of e) Jb(o, i, s, t);
                            }
                            fb('headingColumns', s, i, t, 0);
                        });
                    }
                }
                class lw extends Gt {
                    static get pluginName() {
                        return 'TableUtils';
                    }
                    init() {
                        this.decorate('insertColumns'), this.decorate('insertRows');
                    }
                    getCellLocation(t) {
                        const e = t.parent,
                            o = e.parent,
                            i = o.getChildIndex(e),
                            n = new kb(o, { row: i });
                        for (const { cell: e, row: o, column: i } of n) if (e === t) return { row: o, column: i };
                    }
                    createTable(t, e) {
                        const o = t.createElement('table');
                        return (
                            cw(t, o, 0, parseInt(e.rows) || 2, parseInt(e.columns) || 2),
                            e.headingRows && fb('headingRows', e.headingRows, o, t, 0),
                            e.headingColumns && fb('headingColumns', e.headingColumns, o, t, 0),
                            o
                        );
                    }
                    insertRows(t, e = {}) {
                        const o = this.editor.model,
                            i = e.at || 0,
                            n = e.rows || 1,
                            r = void 0 !== e.copyStructureFromAbove,
                            s = e.copyStructureFromAbove ? i - 1 : i,
                            a = this.getRows(t),
                            l = this.getColumns(t);
                        o.change((e) => {
                            const o = t.getAttribute('headingRows') || 0;
                            if ((o > i && fb('headingRows', o + n, t, e, 0), !r && (0 === i || i === a)))
                                return void cw(e, t, i, n, l);
                            const c = r ? Math.max(i, s) : i,
                                d = new kb(t, { endRow: c }),
                                h = new Array(l).fill(1);
                            for (const { row: t, column: o, cellHeight: a, cellWidth: l, cell: c } of d) {
                                const d = t + a - 1,
                                    u = t <= s && s <= d;
                                t < i && i <= d
                                    ? (e.setAttribute('rowspan', a + n, c), (h[o] = -l))
                                    : r && u && (h[o] = l);
                            }
                            for (let o = 0; o < n; o++) {
                                const o = e.createElement('tableRow');
                                e.insert(o, t, i);
                                for (let t = 0; t < h.length; t++) {
                                    const i = h[t],
                                        n = e.createPositionAt(o, 'end');
                                    i > 0 && mb(e, n, i > 1 ? { colspan: i } : null), (t += Math.abs(i) - 1);
                                }
                            }
                        });
                    }
                    insertColumns(t, e = {}) {
                        const o = this.editor.model,
                            i = e.at || 0,
                            n = e.columns || 1;
                        o.change((e) => {
                            const o = t.getAttribute('headingColumns');
                            i < o && e.setAttribute('headingColumns', o + n, t);
                            const r = this.getColumns(t);
                            if (0 === i || r === i) {
                                for (const o of t.getChildren()) dw(n, e, e.createPositionAt(o, i ? 'end' : 0));
                                return;
                            }
                            const s = new kb(t, { column: i, includeAllSlots: !0 });
                            for (const t of s) {
                                const {
                                    row: o,
                                    cell: r,
                                    cellAnchorColumn: a,
                                    cellAnchorRow: l,
                                    cellWidth: c,
                                    cellHeight: d,
                                } = t;
                                if (a < i) {
                                    e.setAttribute('colspan', c + n, r);
                                    const t = l + d - 1;
                                    for (let e = o; e <= t; e++) s.skipRow(e);
                                } else dw(n, e, t.getPositionBefore());
                            }
                        });
                    }
                    removeRows(t, e) {
                        const o = this.editor.model,
                            i = e.rows || 1,
                            n = e.at,
                            r = n + i - 1;
                        o.change((e) => {
                            const { cellsToMove: o, cellsToTrim: i } = (function (t, e, o) {
                                const i = new Map(),
                                    n = [];
                                for (const { row: r, column: s, cellHeight: a, cell: l } of new kb(t, { endRow: o })) {
                                    const t = r + a - 1;
                                    if (r >= e && r <= o && t > o) {
                                        const t = a - (o - r + 1);
                                        i.set(s, { cell: l, rowspan: t });
                                    }
                                    if (r < e && t >= e) {
                                        let i;
                                        (i = t >= o ? o - e + 1 : t - e + 1), n.push({ cell: l, rowspan: a - i });
                                    }
                                }
                                return { cellsToMove: i, cellsToTrim: n };
                            })(t, n, r);
                            if (o.size) {
                                !(function (t, e, o, i) {
                                    const n = [...new kb(t, { includeAllSlots: !0, row: e })],
                                        r = t.getChild(e);
                                    let s;
                                    for (const { column: t, cell: e, isAnchor: a } of n)
                                        if (o.has(t)) {
                                            const { cell: e, rowspan: n } = o.get(t),
                                                a = s ? i.createPositionAfter(s) : i.createPositionAt(r, 0);
                                            i.move(i.createRangeOn(e), a), fb('rowspan', n, e, i), (s = e);
                                        } else a && (s = e);
                                })(t, r + 1, o, e);
                            }
                            for (let o = r; o >= n; o--) e.remove(t.getChild(o));
                            for (const { rowspan: t, cell: o } of i) fb('rowspan', t, o, e);
                            !(function (t, e, o, i) {
                                const n = t.getAttribute('headingRows') || 0;
                                if (e < n) {
                                    fb('headingRows', o < n ? n - (o - e + 1) : e, t, i, 0);
                                }
                            })(t, n, r, e),
                                Xb(t, this) || Zb(t, this);
                        });
                    }
                    removeColumns(t, e) {
                        const o = this.editor.model,
                            i = e.at,
                            n = e.columns || 1,
                            r = e.at + n - 1;
                        o.change((e) => {
                            !(function (t, e, o) {
                                const i = t.getAttribute('headingColumns') || 0;
                                if (i && e.first < i) {
                                    const n = Math.min(i - 1, e.last) - e.first + 1;
                                    o.setAttribute('headingColumns', i - n, t);
                                }
                            })(t, { first: i, last: r }, e);
                            for (let o = r; o >= i; o--)
                                for (const { cell: i, column: n, cellWidth: r } of [...new kb(t)])
                                    n <= o && r > 1 && n + r > o ? fb('colspan', r - 1, i, e) : n === o && e.remove(i);
                            Zb(t, this) || Xb(t, this);
                        });
                    }
                    splitCellVertically(t, e = 2) {
                        const o = this.editor.model,
                            i = t.parent.parent,
                            n = parseInt(t.getAttribute('rowspan') || 1),
                            r = parseInt(t.getAttribute('colspan') || 1);
                        o.change((o) => {
                            if (r > 1) {
                                const { newCellsSpan: i, updatedSpan: s } = hw(r, e);
                                fb('colspan', s, t, o);
                                const a = {};
                                i > 1 && (a.colspan = i), n > 1 && (a.rowspan = n);
                                dw(r > e ? e - 1 : r - 1, o, o.createPositionAfter(t), a);
                            }
                            if (r < e) {
                                const s = e - r,
                                    a = [...new kb(i)],
                                    { column: l } = a.find(({ cell: e }) => e === t),
                                    c = a.filter(
                                        ({ cell: e, cellWidth: o, column: i }) =>
                                            (e !== t && i === l) || (i < l && i + o > l),
                                    );
                                for (const { cell: t, cellWidth: e } of c) o.setAttribute('colspan', e + s, t);
                                const d = {};
                                n > 1 && (d.rowspan = n), dw(s, o, o.createPositionAfter(t), d);
                                const h = i.getAttribute('headingColumns') || 0;
                                h > l && fb('headingColumns', h + s, i, o);
                            }
                        });
                    }
                    splitCellHorizontally(t, e = 2) {
                        const o = this.editor.model,
                            i = t.parent,
                            n = i.parent,
                            r = n.getChildIndex(i),
                            s = parseInt(t.getAttribute('rowspan') || 1),
                            a = parseInt(t.getAttribute('colspan') || 1);
                        o.change((o) => {
                            if (s > 1) {
                                const i = [...new kb(n, { startRow: r, endRow: r + s - 1, includeAllSlots: !0 })],
                                    { newCellsSpan: l, updatedSpan: c } = hw(s, e);
                                fb('rowspan', c, t, o);
                                const { column: d } = i.find(({ cell: e }) => e === t),
                                    h = {};
                                l > 1 && (h.rowspan = l), a > 1 && (h.colspan = a);
                                for (const t of i) {
                                    const { column: e, row: i } = t,
                                        n = e === d,
                                        s = (i + r + c) % l == 0;
                                    i >= r + c && n && s && dw(1, o, t.getPositionBefore(), h);
                                }
                            }
                            if (s < e) {
                                const i = e - s,
                                    l = [...new kb(n, { startRow: 0, endRow: r })];
                                for (const { cell: e, cellHeight: n, row: s } of l)
                                    if (e !== t && s + n > r) {
                                        const t = n + i;
                                        o.setAttribute('rowspan', t, e);
                                    }
                                const c = {};
                                a > 1 && (c.colspan = a), cw(o, n, r + 1, i, 1, c);
                                const d = n.getAttribute('headingRows') || 0;
                                d > r && fb('headingRows', d + i, n, o);
                            }
                        });
                    }
                    getColumns(t) {
                        return [...t.getChild(0).getChildren()].reduce(
                            (t, e) => t + parseInt(e.getAttribute('colspan') || 1),
                            0,
                        );
                    }
                    getRows(t) {
                        return t.childCount;
                    }
                }
                function cw(t, e, o, i, n, r = {}) {
                    for (let s = 0; s < i; s++) {
                        const i = t.createElement('tableRow');
                        t.insert(i, e, o), dw(n, t, t.createPositionAt(i, 'end'), r);
                    }
                }
                function dw(t, e, o, i = {}) {
                    for (let n = 0; n < t; n++) mb(e, o, i);
                }
                function hw(t, e) {
                    if (t < e) return { newCellsSpan: 1, updatedSpan: 1 };
                    const o = Math.floor(t / e);
                    return { newCellsSpan: o, updatedSpan: t - o * e + o };
                }
                class uw extends Yt {
                    refresh() {
                        const t = Vb(this.editor.model.document.selection);
                        this.isEnabled = Bb(t, this.editor.plugins.get(lw));
                    }
                    execute() {
                        const t = this.editor.model,
                            e = this.editor.plugins.get(lw);
                        t.change((o) => {
                            const i = Vb(t.document.selection),
                                n = i.shift(),
                                { mergeWidth: r, mergeHeight: s } = (function (t, e, o) {
                                    let i = 0,
                                        n = 0;
                                    for (const t of e) {
                                        const { row: e, column: r } = o.getCellLocation(t);
                                        (i = gw(t, r, i, 'colspan')), (n = gw(t, e, n, 'rowspan'));
                                    }
                                    const { row: r, column: s } = o.getCellLocation(t);
                                    return { mergeWidth: i - s, mergeHeight: n - r };
                                })(n, i, e);
                            fb('colspan', r, n, o), fb('rowspan', s, n, o);
                            for (const t of i) fw(t, n, o);
                            Qb(n.findAncestor('table'), e), o.setSelection(n, 'in');
                        });
                    }
                }
                function fw(t, e, o) {
                    mw(t) ||
                        (mw(e) && o.remove(o.createRangeIn(e)),
                        o.move(o.createRangeIn(t), o.createPositionAt(e, 'end'))),
                        o.remove(t);
                }
                function mw(t) {
                    return 1 == t.childCount && t.getChild(0).is('element', 'paragraph') && t.getChild(0).isEmpty;
                }
                function gw(t, e, o, i) {
                    const n = parseInt(t.getAttribute(i) || 1);
                    return Math.max(o, e + n);
                }
                class pw extends Yt {
                    refresh() {
                        const t = zb(this.editor.model.document.selection);
                        this.isEnabled = t.length > 0;
                    }
                    execute() {
                        const t = this.editor.model,
                            e = zb(t.document.selection),
                            o = Mb(e),
                            i = e[0].findAncestor('table'),
                            n = [];
                        for (let e = o.first; e <= o.last; e++)
                            for (const o of i.getChild(e).getChildren()) n.push(t.createRangeOn(o));
                        t.change((t) => {
                            t.setSelection(n);
                        });
                    }
                }
                class bw extends Yt {
                    refresh() {
                        const t = zb(this.editor.model.document.selection);
                        this.isEnabled = t.length > 0;
                    }
                    execute() {
                        const t = this.editor.model,
                            e = zb(t.document.selection),
                            o = e[0],
                            i = e.pop(),
                            n = o.findAncestor('table'),
                            r = this.editor.plugins.get('TableUtils'),
                            s = r.getCellLocation(o),
                            a = r.getCellLocation(i),
                            l = Math.min(s.column, a.column),
                            c = Math.max(s.column, a.column),
                            d = [];
                        for (const e of new kb(n, { startColumn: l, endColumn: c })) d.push(t.createRangeOn(e.cell));
                        t.change((t) => {
                            t.setSelection(d);
                        });
                    }
                }
                function ww(t) {
                    t.document.registerPostFixer((e) =>
                        (function (t, e) {
                            const o = e.document.differ.getChanges();
                            let i = !1;
                            const n = new Set();
                            for (const e of o) {
                                let o;
                                'table' == e.name && 'insert' == e.type && (o = e.position.nodeAfter),
                                    ('tableRow' != e.name && 'tableCell' != e.name) ||
                                        (o = e.position.findAncestor('table')),
                                    vw(e) && (o = e.range.start.findAncestor('table')),
                                    o && !n.has(o) && ((i = kw(o, t) || i), (i = _w(o, t) || i), n.add(o));
                            }
                            return i;
                        })(e, t),
                    );
                }
                function kw(t, e) {
                    let o = !1;
                    const i = (function (t) {
                        const e = parseInt(t.getAttribute('headingRows') || 0),
                            o = t.childCount,
                            i = [];
                        for (const { row: n, cell: r, cellHeight: s } of new kb(t)) {
                            if (s < 2) continue;
                            const t = n < e ? e : o;
                            if (n + s > t) {
                                const e = t - n;
                                i.push({ cell: r, rowspan: e });
                            }
                        }
                        return i;
                    })(t);
                    if (i.length) {
                        o = !0;
                        for (const t of i) fb('rowspan', t.rowspan, t.cell, e, 1);
                    }
                    return o;
                }
                function _w(t, e) {
                    let o = !1;
                    const i = (function (t) {
                            const e = new Array(t.childCount).fill(0);
                            for (const { row: o } of new kb(t, { includeAllSlots: !0 })) e[o]++;
                            return e;
                        })(t),
                        n = [];
                    for (const [t, e] of i.entries()) e || n.push(t);
                    if (n.length) {
                        o = !0;
                        for (const o of n.reverse()) e.remove(t.getChild(o)), i.splice(o, 1);
                    }
                    const r = i[0];
                    if (!i.every((t) => t === r)) {
                        const n = i.reduce((t, e) => (e > t ? e : t), 0);
                        for (const [r, s] of i.entries()) {
                            const i = n - s;
                            if (i) {
                                for (let o = 0; o < i; o++) mb(e, e.createPositionAt(t.getChild(r), 'end'));
                                o = !0;
                            }
                        }
                    }
                    return o;
                }
                function vw(t) {
                    const e = 'attribute' === t.type,
                        o = t.attributeKey;
                    return e && ('headingRows' === o || 'colspan' === o || 'rowspan' === o);
                }
                function yw(t) {
                    t.document.registerPostFixer((e) =>
                        (function (t, e) {
                            const o = e.document.differ.getChanges();
                            let i = !1;
                            for (const e of o)
                                'insert' == e.type && 'table' == e.name && (i = xw(e.position.nodeAfter, t) || i),
                                    'insert' == e.type &&
                                        'tableRow' == e.name &&
                                        (i = Cw(e.position.nodeAfter, t) || i),
                                    'insert' == e.type &&
                                        'tableCell' == e.name &&
                                        (i = Aw(e.position.nodeAfter, t) || i),
                                    Tw(e) && (i = Aw(e.position.parent, t) || i);
                            return i;
                        })(e, t),
                    );
                }
                function xw(t, e) {
                    let o = !1;
                    for (const i of t.getChildren()) o = Cw(i, e) || o;
                    return o;
                }
                function Cw(t, e) {
                    let o = !1;
                    for (const i of t.getChildren()) o = Aw(i, e) || o;
                    return o;
                }
                function Aw(t, e) {
                    if (0 == t.childCount) return e.insertElement('paragraph', t), !0;
                    const o = Array.from(t.getChildren()).filter((t) => t.is('$text'));
                    for (const t of o) e.wrap(e.createRangeOn(t), 'paragraph');
                    return !!o.length;
                }
                function Tw(t) {
                    return (
                        !(!t.position || !t.position.parent.is('element', 'tableCell')) &&
                        (('insert' == t.type && '$text' == t.name) || 'remove' == t.type)
                    );
                }
                function Pw(t, e) {
                    t.document.registerPostFixer(() =>
                        (function (t, e) {
                            const o = new Set();
                            for (const e of t.getChanges()) {
                                const t = 'attribute' == e.type ? e.range.start.parent : e.position.parent;
                                t.is('element', 'tableCell') && o.add(t);
                            }
                            for (const i of o.values())
                                for (const o of [...i.getChildren()].filter((t) => Sw(t, e))) t.refreshItem(o);
                            return !1;
                        })(t.document.differ, e),
                    );
                }
                function Sw(t, e) {
                    if (!t.is('element', 'paragraph')) return !1;
                    const o = e.toViewElement(t);
                    return !!o && xb(t) !== o.is('element', 'span');
                }
                function Ew(t) {
                    t.document.registerPostFixer(() =>
                        (function (t) {
                            const e = t.document.differ,
                                o = new Set();
                            for (const t of e.getChanges()) {
                                if ('attribute' != t.type) continue;
                                const e = t.range.start.nodeAfter;
                                e && e.is('element', 'table') && 'headingRows' == t.attributeKey && o.add(e);
                            }
                            if (o.size) {
                                for (const t of o.values()) e.refreshItem(t);
                                return !0;
                            }
                            return !1;
                        })(t),
                    );
                }
                o(102);
                class Rw extends Gt {
                    static get pluginName() {
                        return 'TableEditing';
                    }
                    init() {
                        const t = this.editor,
                            e = t.model,
                            o = e.schema,
                            i = t.conversion;
                        o.register('table', {
                            allowWhere: '$block',
                            allowAttributes: ['headingRows', 'headingColumns'],
                            isObject: !0,
                            isBlock: !0,
                        }),
                            o.register('tableRow', { allowIn: 'table', isLimit: !0 }),
                            o.register('tableCell', {
                                allowIn: 'tableRow',
                                allowAttributes: ['colspan', 'rowspan'],
                                isLimit: !0,
                                isSelectable: !0,
                            }),
                            o.extend('$block', { allowIn: 'tableCell' }),
                            o.addChildCheck((t, e) => {
                                if ('table' == e.name && Array.from(t.getNames()).includes('table')) return !1;
                            }),
                            i.for('upcast').add(pb()),
                            i.for('editingDowncast').add(vb({ asWidget: !0 })),
                            i.for('dataDowncast').add(vb()),
                            i.for('upcast').elementToElement({ model: 'tableRow', view: 'tr' }),
                            i.for('upcast').add((t) => {
                                t.on(
                                    'element:tr',
                                    (t, e) => {
                                        e.viewItem.isEmpty && 0 == e.modelCursor.index && t.stop();
                                    },
                                    { priority: 'high' },
                                );
                            }),
                            i.for('editingDowncast').add((t) =>
                                t.on('insert:tableRow', (t, e, o) => {
                                    const i = e.item;
                                    if (!o.consumable.consume(i, 'insert')) return;
                                    const n = i.parent,
                                        r = (function (t) {
                                            for (const e of t.getChildren()) if ('table' === e.name) return e;
                                        })(o.mapper.toViewElement(n)),
                                        s = n.getChildIndex(i),
                                        a = new kb(n, { row: s }),
                                        l = {
                                            headingRows: n.getAttribute('headingRows') || 0,
                                            headingColumns: n.getAttribute('headingColumns') || 0,
                                        },
                                        c = new Map();
                                    for (const t of a) {
                                        const e = c.get(s) || Tb(r, i, s, l, o);
                                        c.set(s, e),
                                            o.consumable.consume(t.cell, 'insert'),
                                            Ab(t, l, o.writer.createPositionAt(e, 'end'), o, { asWidget: !0 });
                                    }
                                }),
                            ),
                            i.for('editingDowncast').add((t) =>
                                t.on(
                                    'remove:tableRow',
                                    (t, e, o) => {
                                        t.stop();
                                        const i = o.writer,
                                            n = o.mapper,
                                            r = n
                                                .toViewPosition(e.position)
                                                .getLastMatchingPosition((t) => !t.item.is('element', 'tr')).nodeAfter,
                                            s = r.parent.parent,
                                            a = i.createRangeOn(r),
                                            l = i.remove(a);
                                        for (const t of i.createRangeIn(l).getItems()) n.unbindViewElement(t);
                                        Eb('thead', s, o), Eb('tbody', s, o);
                                    },
                                    { priority: 'higher' },
                                ),
                            ),
                            i.for('upcast').elementToElement({ model: 'tableCell', view: 'td' }),
                            i.for('upcast').elementToElement({ model: 'tableCell', view: 'th' }),
                            i.for('upcast').add(bb('td')),
                            i.for('upcast').add(bb('th')),
                            i.for('editingDowncast').add((t) =>
                                t.on('insert:tableCell', (t, e, o) => {
                                    const i = e.item;
                                    if (!o.consumable.consume(i, 'insert')) return;
                                    const n = i.parent,
                                        r = n.parent,
                                        s = r.getChildIndex(n),
                                        a = new kb(r, { row: s }),
                                        l = {
                                            headingRows: r.getAttribute('headingRows') || 0,
                                            headingColumns: r.getAttribute('headingColumns') || 0,
                                        };
                                    for (const t of a)
                                        if (t.cell === i) {
                                            const e = o.mapper.toViewElement(n);
                                            return void Ab(t, l, o.writer.createPositionAt(e, n.getChildIndex(i)), o, {
                                                asWidget: !0,
                                            });
                                        }
                                }),
                            ),
                            t.conversion
                                .for('editingDowncast')
                                .elementToElement({ model: 'paragraph', view: yb, converterPriority: 'high' }),
                            i.attributeToAttribute({ model: 'colspan', view: 'colspan' }),
                            i.attributeToAttribute({ model: 'rowspan', view: 'rowspan' }),
                            i.for('editingDowncast').add((t) =>
                                t.on('attribute:headingColumns:table', (t, e, o) => {
                                    const i = e.item;
                                    if (!o.consumable.consume(e.item, t.name)) return;
                                    const n = {
                                            headingRows: i.getAttribute('headingRows') || 0,
                                            headingColumns: i.getAttribute('headingColumns') || 0,
                                        },
                                        r = e.attributeOldValue,
                                        s = e.attributeNewValue,
                                        a = (r > s ? r : s) - 1;
                                    for (const t of new kb(i, { endColumn: a })) Cb(t, n, o);
                                }),
                            ),
                            t.commands.add('insertTable', new Ib(t)),
                            t.commands.add('insertTableRowAbove', new jb(t, { order: 'above' })),
                            t.commands.add('insertTableRowBelow', new jb(t, { order: 'below' })),
                            t.commands.add('insertTableColumnLeft', new Wb(t, { order: 'left' })),
                            t.commands.add('insertTableColumnRight', new Wb(t, { order: 'right' })),
                            t.commands.add('removeTableRow', new nw(t)),
                            t.commands.add('removeTableColumn', new rw(t)),
                            t.commands.add('splitTableCellVertically', new qb(t, { direction: 'vertically' })),
                            t.commands.add('splitTableCellHorizontally', new qb(t, { direction: 'horizontally' })),
                            t.commands.add('mergeTableCells', new uw(t)),
                            t.commands.add('mergeTableCellRight', new ow(t, { direction: 'right' })),
                            t.commands.add('mergeTableCellLeft', new ow(t, { direction: 'left' })),
                            t.commands.add('mergeTableCellDown', new ow(t, { direction: 'down' })),
                            t.commands.add('mergeTableCellUp', new ow(t, { direction: 'up' })),
                            t.commands.add('setTableColumnHeader', new aw(t)),
                            t.commands.add('setTableRowHeader', new sw(t)),
                            t.commands.add('selectTableRow', new pw(t)),
                            t.commands.add('selectTableColumn', new bw(t)),
                            Ew(e),
                            ww(e),
                            Pw(e, t.editing.mapper),
                            yw(e);
                    }
                    static get requires() {
                        return [lw];
                    }
                }
                o(104);
                class Iw extends Nc {
                    constructor(t) {
                        super(t);
                        const e = this.bindTemplate;
                        (this.items = this._createGridCollection()),
                            this.set('rows', 0),
                            this.set('columns', 0),
                            this.bind('label').to(this, 'columns', this, 'rows', (t, e) => `${e} × ${t}`),
                            this.setTemplate({
                                tag: 'div',
                                attributes: { class: ['ck'] },
                                children: [
                                    {
                                        tag: 'div',
                                        attributes: { class: ['ck-insert-table-dropdown__grid'] },
                                        on: { 'mouseover@.ck-insert-table-dropdown-grid-box': e.to('boxover') },
                                        children: this.items,
                                    },
                                    {
                                        tag: 'div',
                                        attributes: { class: ['ck-insert-table-dropdown__label'] },
                                        children: [{ text: e.to('label') }],
                                    },
                                ],
                                on: {
                                    mousedown: e.to((t) => {
                                        t.preventDefault();
                                    }),
                                    click: e.to(() => {
                                        this.fire('execute');
                                    }),
                                },
                            }),
                            this.on('boxover', (t, e) => {
                                const { row: o, column: i } = e.target.dataset;
                                this.set({ rows: parseInt(o), columns: parseInt(i) });
                            }),
                            this.on('change:columns', () => {
                                this._highlightGridBoxes();
                            }),
                            this.on('change:rows', () => {
                                this._highlightGridBoxes();
                            });
                    }
                    focus() {}
                    focusLast() {}
                    _highlightGridBoxes() {
                        const t = this.rows,
                            e = this.columns;
                        this.items.map((o, i) => {
                            const n = Math.floor(i / 10) < t && i % 10 < e;
                            o.set('isOn', n);
                        });
                    }
                    _createGridCollection() {
                        const t = [];
                        for (let e = 0; e < 100; e++) {
                            const o = Math.floor(e / 10),
                                i = e % 10;
                            t.push(new Vw(this.locale, o + 1, i + 1));
                        }
                        return this.createCollection(t);
                    }
                }
                class Vw extends Nc {
                    constructor(t, e, o) {
                        super(t);
                        const i = this.bindTemplate;
                        this.set('isOn', !1),
                            this.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: ['ck-insert-table-dropdown-grid-box', i.if('isOn', 'ck-on')],
                                    'data-row': e,
                                    'data-column': o,
                                },
                            });
                    }
                }
                class Ow extends Gt {
                    static get pluginName() {
                        return 'TableUI';
                    }
                    init() {
                        const t = this.editor,
                            e = this.editor.t,
                            o = 'ltr' === t.locale.contentLanguageDirection;
                        t.ui.componentFactory.add('insertTable', (o) => {
                            const i = t.commands.get('insertTable'),
                                n = Od(o);
                            let r;
                            return (
                                n.bind('isEnabled').to(i),
                                n.buttonView.set({
                                    icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M3 6v3h4V6H3zm0 4v3h4v-3H3zm0 4v3h4v-3H3zm5 3h4v-3H8v3zm5 0h4v-3h-4v3zm4-4v-3h-4v3h4zm0-4V6h-4v3h4zm1.5 8a1.5 1.5 0 0 1-1.5 1.5H3A1.5 1.5 0 0 1 1.5 17V4c.222-.863 1.068-1.5 2-1.5h13c.932 0 1.778.637 2 1.5v13zM12 13v-3H8v3h4zm0-4V6H8v3h4z"/></svg>',
                                    label: e('Insert table'),
                                    tooltip: !0,
                                }),
                                n.on('change:isOpen', () => {
                                    r ||
                                        ((r = new Iw(o)),
                                        n.panelView.children.add(r),
                                        r.delegate('execute').to(n),
                                        n.buttonView.on('open', () => {
                                            (r.rows = 0), (r.columns = 0);
                                        }),
                                        n.on('execute', () => {
                                            t.execute('insertTable', { rows: r.rows, columns: r.columns }),
                                                t.editing.view.focus();
                                        }));
                                }),
                                n
                            );
                        }),
                            t.ui.componentFactory.add('tableColumn', (t) => {
                                const i = [
                                    {
                                        type: 'switchbutton',
                                        model: {
                                            commandName: 'setTableColumnHeader',
                                            label: e('Header column'),
                                            bindIsOn: !0,
                                        },
                                    },
                                    { type: 'separator' },
                                    {
                                        type: 'button',
                                        model: {
                                            commandName: o ? 'insertTableColumnLeft' : 'insertTableColumnRight',
                                            label: e('Insert column left'),
                                        },
                                    },
                                    {
                                        type: 'button',
                                        model: {
                                            commandName: o ? 'insertTableColumnRight' : 'insertTableColumnLeft',
                                            label: e('Insert column right'),
                                        },
                                    },
                                    {
                                        type: 'button',
                                        model: { commandName: 'removeTableColumn', label: e('Delete column') },
                                    },
                                    {
                                        type: 'button',
                                        model: { commandName: 'selectTableColumn', label: e('Select column') },
                                    },
                                ];
                                return this._prepareDropdown(
                                    e('Column'),
                                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z" opacity=".6"/><path d="M18 7v1H2V7h16zm0 5v1H2v-1h16z" opacity=".6"/><path d="M14 1v18a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1zm-2 1H8v4h4V2zm0 6H8v4h4V8zm0 6H8v4h4v-4z"/></svg>',
                                    i,
                                    t,
                                );
                            }),
                            t.ui.componentFactory.add('tableRow', (t) => {
                                const o = [
                                    {
                                        type: 'switchbutton',
                                        model: {
                                            commandName: 'setTableRowHeader',
                                            label: e('Header row'),
                                            bindIsOn: !0,
                                        },
                                    },
                                    { type: 'separator' },
                                    {
                                        type: 'button',
                                        model: { commandName: 'insertTableRowAbove', label: e('Insert row above') },
                                    },
                                    {
                                        type: 'button',
                                        model: { commandName: 'insertTableRowBelow', label: e('Insert row below') },
                                    },
                                    {
                                        type: 'button',
                                        model: { commandName: 'removeTableRow', label: e('Delete row') },
                                    },
                                    {
                                        type: 'button',
                                        model: { commandName: 'selectTableRow', label: e('Select row') },
                                    },
                                ];
                                return this._prepareDropdown(
                                    e('Row'),
                                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z" opacity=".6"/><path d="M7 2h1v16H7V2zm5 0h1v16h-1V2z" opacity=".6"/><path d="M1 6h18a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1zm1 2v4h4V8H2zm6 0v4h4V8H8zm6 0v4h4V8h-4z"/></svg>',
                                    o,
                                    t,
                                );
                            }),
                            t.ui.componentFactory.add('mergeTableCells', (t) => {
                                const i = [
                                    {
                                        type: 'button',
                                        model: { commandName: 'mergeTableCellUp', label: e('Merge cell up') },
                                    },
                                    {
                                        type: 'button',
                                        model: {
                                            commandName: o ? 'mergeTableCellRight' : 'mergeTableCellLeft',
                                            label: e('Merge cell right'),
                                        },
                                    },
                                    {
                                        type: 'button',
                                        model: { commandName: 'mergeTableCellDown', label: e('Merge cell down') },
                                    },
                                    {
                                        type: 'button',
                                        model: {
                                            commandName: o ? 'mergeTableCellLeft' : 'mergeTableCellRight',
                                            label: e('Merge cell left'),
                                        },
                                    },
                                    { type: 'separator' },
                                    {
                                        type: 'button',
                                        model: {
                                            commandName: 'splitTableCellVertically',
                                            label: e('Split cell vertically'),
                                        },
                                    },
                                    {
                                        type: 'button',
                                        model: {
                                            commandName: 'splitTableCellHorizontally',
                                            label: e('Split cell horizontally'),
                                        },
                                    },
                                ];
                                return this._prepareMergeSplitButtonDropdown(
                                    e('Merge cells'),
                                    '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z" opacity=".6"/><path d="M7 2h1v16H7V2zm5 0h1v7h-1V2zm6 5v1H2V7h16zM8 12v1H2v-1h6z" opacity=".6"/><path d="M7 7h12a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1zm1 2v9h10V9H8z"/></svg>',
                                    i,
                                    t,
                                );
                            });
                    }
                    _prepareDropdown(t, e, o, i) {
                        const n = this.editor,
                            r = Od(i),
                            s = this._fillDropdownWithListOptions(r, o);
                        return (
                            r.buttonView.set({ label: t, icon: e, tooltip: !0 }),
                            r.bind('isEnabled').toMany(s, 'isEnabled', (...t) => t.some((t) => t)),
                            this.listenTo(r, 'execute', (t) => {
                                n.execute(t.source.commandName), n.editing.view.focus();
                            }),
                            r
                        );
                    }
                    _prepareMergeSplitButtonDropdown(t, e, o, i) {
                        const n = this.editor,
                            r = Od(i, pd);
                        return (
                            this._fillDropdownWithListOptions(r, o),
                            r.buttonView.set({ label: t, icon: e, tooltip: !0, isEnabled: !0 }),
                            this.listenTo(r.buttonView, 'execute', () => {
                                n.execute('mergeTableCells'), n.editing.view.focus();
                            }),
                            this.listenTo(r, 'execute', (t) => {
                                n.execute(t.source.commandName), n.editing.view.focus();
                            }),
                            r
                        );
                    }
                    _fillDropdownWithListOptions(t, e) {
                        const o = this.editor,
                            i = [],
                            n = new Yo();
                        for (const t of e) zw(t, o, i, n);
                        return Md(t, n, o.ui.componentFactory), i;
                    }
                }
                function zw(t, e, o, i) {
                    const n = (t.model = new Kd(t.model)),
                        { commandName: r, bindIsOn: s } = t.model;
                    if ('button' === t.type || 'switchbutton' === t.type) {
                        const t = e.commands.get(r);
                        o.push(t),
                            n.set({ commandName: r }),
                            n.bind('isEnabled').to(t),
                            s && n.bind('isOn').to(t, 'value');
                    }
                    n.set({ withText: !0 }), i.add(t);
                }
                o(106);
                class Mw extends Gt {
                    static get pluginName() {
                        return 'TableSelection';
                    }
                    static get requires() {
                        return [lw];
                    }
                    init() {
                        const t = this.editor.model;
                        this.listenTo(t, 'deleteContent', (t, e) => this._handleDeleteContent(t, e), {
                            priority: 'high',
                        }),
                            this._defineSelectionConverter(),
                            this._enablePluginDisabling();
                    }
                    getSelectedTableCells() {
                        const t = Vb(this.editor.model.document.selection);
                        return 0 == t.length ? null : t;
                    }
                    getSelectionAsFragment() {
                        const t = this.getSelectedTableCells();
                        return t
                            ? this.editor.model.change((e) => {
                                  const o = e.createDocumentFragment(),
                                      i = this.editor.plugins.get('TableUtils'),
                                      { first: n, last: r } = Nb(t),
                                      { first: s, last: a } = Mb(t),
                                      l = t[0].findAncestor('table');
                                  let c = a,
                                      d = r;
                                  if (Bb(t, i)) {
                                      const t = { firstColumn: n, lastColumn: r, firstRow: s, lastRow: a };
                                      (c = tw(l, t)), (d = ew(l, t));
                                  }
                                  const h = Ub(l, { startRow: s, startColumn: n, endRow: c, endColumn: d }, e);
                                  return e.insert(h, o, 0), o;
                              })
                            : null;
                    }
                    setCellSelection(t, e) {
                        const o = this._getCellsToSelect(t, e);
                        this.editor.model.change((t) => {
                            t.setSelection(
                                o.cells.map((e) => t.createRangeOn(e)),
                                { backward: o.backward },
                            );
                        });
                    }
                    getFocusCell() {
                        const t = [...this.editor.model.document.selection.getRanges()].pop().getContainedElement();
                        return t && t.is('element', 'tableCell') ? t : null;
                    }
                    getAnchorCell() {
                        const t = Ic(this.editor.model.document.selection.getRanges()).getContainedElement();
                        return t && t.is('element', 'tableCell') ? t : null;
                    }
                    _defineSelectionConverter() {
                        const t = this.editor,
                            e = new Set();
                        t.conversion.for('editingDowncast').add((t) =>
                            t.on(
                                'selection',
                                (t, o, i) => {
                                    const n = i.writer;
                                    !(function (t) {
                                        for (const o of e) t.removeClass('ck-editor__editable_selected', o);
                                        e.clear();
                                    })(n);
                                    const r = this.getSelectedTableCells();
                                    if (!r) return;
                                    for (const t of r) {
                                        const o = i.mapper.toViewElement(t);
                                        n.addClass('ck-editor__editable_selected', o), e.add(o);
                                    }
                                    const s = i.mapper.toViewElement(r[r.length - 1]);
                                    n.setSelection(s, 0);
                                },
                                { priority: 'lowest' },
                            ),
                        );
                    }
                    _enablePluginDisabling() {
                        const t = this.editor;
                        this.on('change:isEnabled', () => {
                            if (!this.isEnabled) {
                                const e = this.getSelectedTableCells();
                                if (!e) return;
                                t.model.change((o) => {
                                    const i = o.createPositionAt(e[0], 0),
                                        n = t.model.schema.getNearestSelectionRange(i);
                                    o.setSelection(n);
                                });
                            }
                        });
                    }
                    _handleDeleteContent(t, e) {
                        const [o, i] = e,
                            n = this.editor.model,
                            r = !i || 'backward' == i.direction,
                            s = Vb(o);
                        s.length &&
                            (t.stop(),
                            n.change((t) => {
                                const e = s[r ? s.length - 1 : 0];
                                n.change((t) => {
                                    for (const e of s) n.deleteContent(t.createSelection(e, 'in'));
                                });
                                const i = n.schema.getNearestSelectionRange(t.createPositionAt(e, 0));
                                o.is('documentSelection') ? t.setSelection(i) : o.setTo(i);
                            }));
                    }
                    _getCellsToSelect(t, e) {
                        const o = this.editor.plugins.get('TableUtils'),
                            i = o.getCellLocation(t),
                            n = o.getCellLocation(e),
                            r = Math.min(i.row, n.row),
                            s = Math.max(i.row, n.row),
                            a = Math.min(i.column, n.column),
                            l = Math.max(i.column, n.column),
                            c = new Array(s - r + 1).fill(null).map(() => []),
                            d = { startRow: r, endRow: s, startColumn: a, endColumn: l };
                        for (const { row: e, cell: o } of new kb(t.findAncestor('table'), d)) c[e - r].push(o);
                        const h = n.row < i.row,
                            u = n.column < i.column;
                        return (
                            h && c.reverse(), u && c.forEach((t) => t.reverse()), { cells: c.flat(), backward: h || u }
                        );
                    }
                }
                class Nw extends Gt {
                    static get pluginName() {
                        return 'TableClipboard';
                    }
                    static get requires() {
                        return [Mw, lw];
                    }
                    init() {
                        const t = this.editor,
                            e = t.editing.view.document;
                        this.listenTo(e, 'copy', (t, e) => this._onCopyCut(t, e)),
                            this.listenTo(e, 'cut', (t, e) => this._onCopyCut(t, e)),
                            this.listenTo(t.model, 'insertContent', (t, e) => this._onInsertContent(t, ...e), {
                                priority: 'high',
                            }),
                            this.decorate('_replaceTableSlotCell');
                    }
                    _onCopyCut(t, e) {
                        const o = this.editor.plugins.get(Mw);
                        if (!o.getSelectedTableCells()) return;
                        if ('cut' == t.name && this.editor.isReadOnly) return;
                        e.preventDefault(), t.stop();
                        const i = this.editor.data,
                            n = this.editor.editing.view.document,
                            r = i.toView(o.getSelectionAsFragment());
                        n.fire('clipboardOutput', { dataTransfer: e.dataTransfer, content: r, method: t.name });
                    }
                    _onInsertContent(t, e, o) {
                        if (o && !o.is('documentSelection')) return;
                        const i = this.editor.model,
                            n = this.editor.plugins.get(lw);
                        let r = (function (t, e) {
                            if (!t.is('documentFragment') && !t.is('element')) return null;
                            if (t.is('element', 'table')) return t;
                            if (1 == t.childCount && t.getChild(0).is('element', 'table')) return t.getChild(0);
                            const o = e.createRangeIn(t);
                            for (const t of o.getItems())
                                if (t.is('element', 'table')) {
                                    const i = e.createRange(o.start, e.createPositionBefore(t));
                                    if (e.hasContent(i, { ignoreWhitespaces: !0 })) return null;
                                    const n = e.createRange(e.createPositionAfter(t), o.end);
                                    return e.hasContent(n, { ignoreWhitespaces: !0 }) ? null : t;
                                }
                            return null;
                        })(e, i);
                        if (!r) return;
                        const s = zb(i.document.selection);
                        s.length
                            ? (t.stop(),
                              i.change((t) => {
                                  const e = { width: n.getColumns(r), height: n.getRows(r) },
                                      o = (function (t, e, o, i) {
                                          const n = t[0].findAncestor('table'),
                                              r = Nb(t),
                                              s = Mb(t),
                                              a = {
                                                  firstColumn: r.first,
                                                  lastColumn: r.last,
                                                  firstRow: s.first,
                                                  lastRow: s.last,
                                              },
                                              l = 1 === t.length;
                                          l &&
                                              ((a.lastRow += e.height - 1),
                                              (a.lastColumn += e.width - 1),
                                              (function (t, e, o, i) {
                                                  const n = i.getColumns(t),
                                                      r = i.getRows(t);
                                                  o > n && i.insertColumns(t, { at: n, columns: o - n });
                                                  e > r && i.insertRows(t, { at: r, rows: e - r });
                                              })(n, a.lastRow + 1, a.lastColumn + 1, i));
                                          l || !Bb(t, i)
                                              ? (function (t, e, o) {
                                                    const {
                                                            firstRow: i,
                                                            lastRow: n,
                                                            firstColumn: r,
                                                            lastColumn: s,
                                                        } = e,
                                                        a = { first: i, last: n },
                                                        l = { first: r, last: s };
                                                    Fw(t, r, a, o),
                                                        Fw(t, s + 1, a, o),
                                                        Bw(t, i, l, o),
                                                        Bw(t, n + 1, l, o, i);
                                                })(n, a, o)
                                              : ((a.lastRow = tw(n, a)), (a.lastColumn = ew(n, a)));
                                          return a;
                                      })(s, e, t, n),
                                      i = o.lastRow - o.firstRow + 1,
                                      a = o.lastColumn - o.firstColumn + 1,
                                      l = {
                                          startRow: 0,
                                          startColumn: 0,
                                          endRow: Math.min(i, e.height) - 1,
                                          endColumn: Math.min(a, e.width) - 1,
                                      };
                                  r = Ub(r, l, t);
                                  const c = s[0].findAncestor('table'),
                                      d = this._replaceSelectedCellsWithPasted(r, e, c, o, t);
                                  if (this.editor.plugins.get('TableSelection').isEnabled) {
                                      const e = Fb(d.map((e) => t.createRangeOn(e)));
                                      t.setSelection(e);
                                  } else t.setSelection(d[0], 0);
                              }))
                            : Qb(r, n);
                    }
                    _replaceSelectedCellsWithPasted(t, e, o, i, n) {
                        const { width: r, height: s } = e,
                            a = (function (t, e, o) {
                                const i = new Array(o).fill(null).map(() => new Array(e).fill(null));
                                for (const { column: e, row: o, cell: n } of new kb(t)) i[o][e] = n;
                                return i;
                            })(t, r, s),
                            l = [
                                ...new kb(o, {
                                    startRow: i.firstRow,
                                    endRow: i.lastRow,
                                    startColumn: i.firstColumn,
                                    endColumn: i.lastColumn,
                                    includeAllSlots: !0,
                                }),
                            ],
                            c = [];
                        let d;
                        for (const t of l) {
                            const { row: e, column: o } = t;
                            o === i.firstColumn && (d = t.getPositionBefore());
                            const l = e - i.firstRow,
                                h = o - i.firstColumn,
                                u = a[l % s][h % r],
                                f = u ? n.cloneElement(u) : null,
                                m = this._replaceTableSlotCell(t, f, d, n);
                            m && (Yb(m, e, o, i.lastRow, i.lastColumn, n), c.push(m), (d = n.createPositionAfter(m)));
                        }
                        const h = parseInt(o.getAttribute('headingRows') || 0),
                            u = parseInt(o.getAttribute('headingColumns') || 0),
                            f = i.firstRow < h && h <= i.lastRow,
                            m = i.firstColumn < u && u <= i.lastColumn;
                        if (f) {
                            const t = Bw(o, h, { first: i.firstColumn, last: i.lastColumn }, n, i.firstRow);
                            c.push(...t);
                        }
                        if (m) {
                            const t = Fw(o, u, { first: i.firstRow, last: i.lastRow }, n);
                            c.push(...t);
                        }
                        return c;
                    }
                    _replaceTableSlotCell(t, e, o, i) {
                        const { cell: n, isAnchor: r } = t;
                        return r && i.remove(n), e ? (i.insert(e, o), e) : null;
                    }
                }
                function Bw(t, e, o, i, n = 0) {
                    if (e < 1) return;
                    return $b(t, e, n)
                        .filter(({ column: t, cellWidth: e }) => Dw(t, e, o))
                        .map(({ cell: t }) => Kb(t, e, i));
                }
                function Fw(t, e, o, i) {
                    if (e < 1) return;
                    return Gb(t, e)
                        .filter(({ row: t, cellHeight: e }) => Dw(t, e, o))
                        .map(({ cell: t, column: o }) => Jb(t, o, e, i));
                }
                function Dw(t, e, o) {
                    const i = t + e - 1,
                        { first: n, last: r } = o;
                    return (t >= n && t <= r) || (t < n && i >= n);
                }
                class Lw extends Gt {
                    static get pluginName() {
                        return 'TableKeyboard';
                    }
                    static get requires() {
                        return [Mw];
                    }
                    init() {
                        const t = this.editor.editing.view.document;
                        this.editor.keystrokes.set('Tab', (...t) => this._handleTabOnSelectedTable(...t), {
                            priority: 'low',
                        }),
                            this.editor.keystrokes.set('Tab', this._getTabHandler(!0), { priority: 'low' }),
                            this.editor.keystrokes.set('Shift+Tab', this._getTabHandler(!1), { priority: 'low' }),
                            this.listenTo(t, 'keydown', (...t) => this._onKeydown(...t), {
                                priority: a.get('high') - 10,
                            });
                    }
                    _handleTabOnSelectedTable(t, e) {
                        const o = this.editor,
                            i = o.model.document.selection.getSelectedElement();
                        i &&
                            i.is('element', 'table') &&
                            (e(),
                            o.model.change((t) => {
                                t.setSelection(t.createRangeIn(i.getChild(0).getChild(0)));
                            }));
                    }
                    _getTabHandler(t) {
                        const e = this.editor;
                        return (o, i) => {
                            let n = Ob(e.model.document.selection)[0];
                            if ((n || (n = this.editor.plugins.get('TableSelection').getFocusCell()), !n)) return;
                            i();
                            const r = n.parent,
                                s = r.parent,
                                a = s.getChildIndex(r),
                                l = r.getChildIndex(n),
                                c = 0 === l;
                            if (!t && c && 0 === a)
                                return void e.model.change((t) => {
                                    t.setSelection(t.createRangeOn(s));
                                });
                            const d = l === r.childCount - 1,
                                h = a === s.childCount - 1;
                            if (t && h && d && (e.execute('insertTableRowBelow'), a === s.childCount - 1))
                                return void e.model.change((t) => {
                                    t.setSelection(t.createRangeOn(s));
                                });
                            let u;
                            if (t && d) {
                                const t = s.getChild(a + 1);
                                u = t.getChild(0);
                            } else if (!t && c) {
                                const t = s.getChild(a - 1);
                                u = t.getChild(t.childCount - 1);
                            } else u = r.getChild(l + (t ? 1 : -1));
                            e.model.change((t) => {
                                t.setSelection(t.createRangeIn(u));
                            });
                        };
                    }
                    _onKeydown(t, e) {
                        const o = this.editor,
                            i = e.keyCode;
                        if (!Tn(i)) return;
                        const n = Pn(i, o.locale.contentLanguageDirection);
                        this._handleArrowKeys(n, e.shiftKey) && (e.preventDefault(), e.stopPropagation(), t.stop());
                    }
                    _handleArrowKeys(t, e) {
                        const o = this.editor.model.document.selection,
                            i = ['right', 'down'].includes(t),
                            n = Vb(o);
                        if (n.length) {
                            let o;
                            return (
                                (o = e
                                    ? this.editor.plugins.get('TableSelection').getFocusCell()
                                    : i
                                    ? n[n.length - 1]
                                    : n[0]),
                                this._navigateFromCellInDirection(o, t, e),
                                !0
                            );
                        }
                        const r = o.focus.findAncestor('tableCell');
                        return (
                            !!r &&
                            !(e && !o.isCollapsed && o.isBackward == i) &&
                            !!this._isSelectionAtCellEdge(o, r, i) &&
                            (this._navigateFromCellInDirection(r, t, e), !0)
                        );
                    }
                    _isSelectionAtCellEdge(t, e, o) {
                        const i = this.editor.model,
                            n = this.editor.model.schema,
                            r = o ? t.getLastPosition() : t.getFirstPosition();
                        if (!n.getLimitElement(r).is('element', 'tableCell')) {
                            return i.createPositionAt(e, o ? 'end' : 0).isTouching(r);
                        }
                        const s = i.createSelection(r);
                        return i.modifySelection(s, { direction: o ? 'forward' : 'backward' }), r.isEqual(s.focus);
                    }
                    _navigateFromCellInDirection(t, e, o = !1) {
                        const i = this.editor.model,
                            n = t.findAncestor('table'),
                            r = [...new kb(n, { includeAllSlots: !0 })],
                            { row: s, column: a } = r[r.length - 1],
                            l = r.find(({ cell: e }) => e == t);
                        let { row: c, column: d } = l;
                        switch (e) {
                            case 'left':
                                d--;
                                break;
                            case 'up':
                                c--;
                                break;
                            case 'right':
                                d += l.cellWidth;
                                break;
                            case 'down':
                                c += l.cellHeight;
                        }
                        if (c < 0 || c > s || (d < 0 && c <= 0) || (d > a && c >= s))
                            return void i.change((t) => {
                                t.setSelection(t.createRangeOn(n));
                            });
                        d < 0 ? ((d = o ? 0 : a), c--) : d > a && ((d = o ? a : 0), c++);
                        const h = r.find((t) => t.row == c && t.column == d).cell,
                            u = ['right', 'down'].includes(e),
                            f = this.editor.plugins.get('TableSelection');
                        if (o && f.isEnabled) {
                            const e = f.getAnchorCell() || t;
                            f.setCellSelection(e, h);
                        } else {
                            const t = i.createPositionAt(h, u ? 0 : 'end');
                            i.change((e) => {
                                e.setSelection(t);
                            });
                        }
                    }
                }
                class Hw extends Wr {
                    constructor(t) {
                        super(t), (this.domEventType = ['mousemove', 'mouseup', 'mouseleave']);
                    }
                    onDomEvent(t) {
                        this.fire(t.type, t);
                    }
                }
                class jw extends Gt {
                    static get pluginName() {
                        return 'TableMouse';
                    }
                    static get requires() {
                        return [Mw];
                    }
                    init() {
                        this.editor.editing.view.addObserver(Hw),
                            this._enableShiftClickSelection(),
                            this._enableMouseDragSelection();
                    }
                    _enableShiftClickSelection() {
                        const t = this.editor;
                        let e = !1;
                        const o = t.plugins.get(Mw);
                        this.listenTo(t.editing.view.document, 'mousedown', (i, n) => {
                            if (!this.isEnabled || !o.isEnabled) return;
                            if (!n.domEvent.shiftKey) return;
                            const r = o.getAnchorCell() || Ob(t.model.document.selection)[0];
                            if (!r) return;
                            const s = this._getModelTableCellFromDomEvent(n);
                            s && Ww(r, s) && ((e = !0), o.setCellSelection(r, s), n.preventDefault());
                        }),
                            this.listenTo(t.editing.view.document, 'mouseup', () => {
                                e = !1;
                            }),
                            this.listenTo(
                                t.editing.view.document,
                                'selectionChange',
                                (t) => {
                                    e && t.stop();
                                },
                                { priority: 'highest' },
                            );
                    }
                    _enableMouseDragSelection() {
                        const t = this.editor;
                        let e,
                            o,
                            i = !1,
                            n = !1;
                        const r = t.plugins.get(Mw);
                        this.listenTo(t.editing.view.document, 'mousedown', (t, o) => {
                            this.isEnabled &&
                                r.isEnabled &&
                                (o.domEvent.shiftKey ||
                                    o.domEvent.ctrlKey ||
                                    o.domEvent.altKey ||
                                    (e = this._getModelTableCellFromDomEvent(o)));
                        }),
                            this.listenTo(t.editing.view.document, 'mousemove', (t, s) => {
                                if (!s.domEvent.buttons) return;
                                if (!e) return;
                                const a = this._getModelTableCellFromDomEvent(s);
                                a && Ww(e, a) && ((o = a), i || o == e || (i = !0)),
                                    i && ((n = !0), r.setCellSelection(e, o), s.preventDefault());
                            }),
                            this.listenTo(t.editing.view.document, 'mouseup', () => {
                                (i = !1), (n = !1), (e = null), (o = null);
                            }),
                            this.listenTo(
                                t.editing.view.document,
                                'selectionChange',
                                (t) => {
                                    n && t.stop();
                                },
                                { priority: 'highest' },
                            );
                    }
                    _getModelTableCellFromDomEvent(t) {
                        const e = t.target,
                            o = this.editor.editing.view.createPositionAt(e, 0);
                        return this.editor.editing.mapper
                            .toModelPosition(o)
                            .parent.findAncestor('tableCell', { includeSelf: !0 });
                    }
                }
                function Ww(t, e) {
                    return t.parent.parent == e.parent.parent;
                }
                o(108);
                o(110);
                class qw extends Nc {
                    constructor(t, e) {
                        super(t);
                        const o = this.bindTemplate;
                        this.set('value', ''),
                            this.set('id'),
                            this.set('isReadOnly', !1),
                            this.set('hasError', !1),
                            this.set('isFocused', !1),
                            this.set('isEmpty', !0),
                            this.set('ariaDescribedById'),
                            (this.options = e),
                            (this._dropdownView = this._createDropdownView(t)),
                            (this._inputView = this._createInputTextView(t)),
                            (this._stillTyping = !1),
                            this.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: ['ck', 'ck-input-color', o.if('hasError', 'ck-error')],
                                    id: o.to('id'),
                                    'aria-invalid': o.if('hasError', !0),
                                    'aria-describedby': o.to('ariaDescribedById'),
                                },
                                children: [this._dropdownView, this._inputView],
                            }),
                            this.on('change:value', (t, e, o) => this._setInputValue(o));
                    }
                    focus() {
                        this._inputView.focus();
                    }
                    _createDropdownView() {
                        const t = this.locale,
                            e = t.t,
                            o = this.bindTemplate,
                            i = this._createColorGrid(t),
                            n = Od(t),
                            r = new Nc(),
                            s = this._createRemoveColorButton(t);
                        return (
                            r.setTemplate({
                                tag: 'span',
                                attributes: {
                                    class: ['ck', 'ck-input-color__button__preview'],
                                    style: { backgroundColor: o.to('value') },
                                },
                                children: [
                                    {
                                        tag: 'span',
                                        attributes: {
                                            class: [
                                                'ck',
                                                'ck-input-color__button__preview__no-color-indicator',
                                                o.if('value', 'ck-hidden', (t) => '' != t),
                                            ],
                                        },
                                    },
                                ],
                            }),
                            n.buttonView.extendTemplate({ attributes: { class: 'ck-input-color__button' } }),
                            n.buttonView.children.add(r),
                            (n.buttonView.tooltip = e('Color picker')),
                            (n.panelPosition = 'rtl' === t.uiLanguageDirection ? 'se' : 'sw'),
                            n.panelView.children.add(s),
                            n.panelView.children.add(i),
                            n.bind('isEnabled').to(this, 'isReadOnly', (t) => !t),
                            n
                        );
                    }
                    _createInputTextView() {
                        const t = this.locale,
                            e = new jd(t);
                        return (
                            e.extendTemplate({ on: { blur: e.bindTemplate.to('blur') } }),
                            (e.value = this.value),
                            e.bind('isReadOnly', 'hasError').to(this),
                            this.bind('isFocused', 'isEmpty').to(e),
                            e.on('input', () => {
                                const t = e.element.value,
                                    o = this.options.colorDefinitions.find((e) => t === e.label);
                                (this._stillTyping = !0), (this.value = (o && o.color) || t);
                            }),
                            e.on('blur', () => {
                                (this._stillTyping = !1), this._setInputValue(e.element.value);
                            }),
                            e.delegate('input').to(this),
                            e
                        );
                    }
                    _createRemoveColorButton() {
                        const t = this.locale,
                            e = t.t,
                            o = new rd(t);
                        return (
                            (o.class = 'ck-input-color__remove-color'),
                            (o.withText = !0),
                            (o.icon = ac),
                            (o.label = e('Remove color')),
                            o.on('execute', () => {
                                (this.value = ''), (this._dropdownView.isOpen = !1), this.fire('input');
                            }),
                            o
                        );
                    }
                    _createColorGrid(t) {
                        const e = new fd(t, {
                            colorDefinitions: this.options.colorDefinitions,
                            columns: this.options.columns,
                        });
                        return (
                            e.on('execute', (t, e) => {
                                (this.value = e.value), (this._dropdownView.isOpen = !1), this.fire('input');
                            }),
                            e.bind('selectedColor').to(this, 'value'),
                            e
                        );
                    }
                    _setInputValue(t) {
                        if (!this._stillTyping) {
                            const e = Uw(t),
                                o = this.options.colorDefinitions.find((t) => e === Uw(t.color));
                            this._inputView.value = o ? o.label : t || '';
                        }
                    }
                }
                function Uw(t) {
                    return t
                        .replace(/([(,])\s+/g, '$1')
                        .replace(/^\s+|\s+(?=[),\s]|$)/g, '')
                        .replace(/,|\s/g, ' ');
                }
                const $w = (t) => '' === t;
                function Kw(t) {
                    return {
                        none: t('None'),
                        solid: t('Solid'),
                        dotted: t('Dotted'),
                        dashed: t('Dashed'),
                        double: t('Double'),
                        groove: t('Groove'),
                        ridge: t('Ridge'),
                        inset: t('Inset'),
                        outset: t('Outset'),
                    };
                }
                function Gw(t) {
                    return t('The color is invalid. Try "#FF0000" or "rgb(255,0,0)" or "red".');
                }
                function Jw(t) {
                    return t('The value is invalid. Try "10px" or "2em" or simply "2".');
                }
                function Yw(t) {
                    return (t = t.trim()), $w(t) || Ih(t);
                }
                function Xw(t) {
                    return (t = t.trim()), $w(t) || ik(t) || Mh(t) || ((e = t), Nh.test(e));
                    var e;
                }
                function Zw(t) {
                    return (t = t.trim()), $w(t) || ik(t) || Mh(t);
                }
                function Qw(t) {
                    const e = new Yo(),
                        o = Kw(t.t);
                    for (const i in o) {
                        const n = {
                            type: 'button',
                            model: new Kd({ _borderStyleValue: 'none' === i ? '' : i, label: o[i], withText: !0 }),
                        };
                        'none' === i
                            ? n.model.bind('isOn').to(t, 'borderStyle', (t) => !t)
                            : n.model.bind('isOn').to(t, 'borderStyle', (t) => t === i),
                            e.add(n);
                    }
                    return e;
                }
                function tk({ view: t, icons: e, toolbar: o, labels: i, propertyName: n, nameToValue: r }) {
                    for (const s in i) {
                        const a = new rd(t.locale);
                        a.set({ label: i[s], icon: e[s], tooltip: i[s] }),
                            a.bind('isOn').to(t, n, (t) => t === r(s)),
                            a.on('execute', () => {
                                t[n] = r(s);
                            }),
                            o.items.add(a);
                    }
                }
                const ek = [
                    { color: 'hsl(0, 0%, 0%)', label: 'Black' },
                    { color: 'hsl(0, 0%, 30%)', label: 'Dim grey' },
                    { color: 'hsl(0, 0%, 60%)', label: 'Grey' },
                    { color: 'hsl(0, 0%, 90%)', label: 'Light grey' },
                    { color: 'hsl(0, 0%, 100%)', label: 'White', hasBorder: !0 },
                    { color: 'hsl(0, 75%, 60%)', label: 'Red' },
                    { color: 'hsl(30, 75%, 60%)', label: 'Orange' },
                    { color: 'hsl(60, 75%, 60%)', label: 'Yellow' },
                    { color: 'hsl(90, 75%, 60%)', label: 'Light green' },
                    { color: 'hsl(120, 75%, 60%)', label: 'Green' },
                    { color: 'hsl(150, 75%, 60%)', label: 'Aquamarine' },
                    { color: 'hsl(180, 75%, 60%)', label: 'Turquoise' },
                    { color: 'hsl(210, 75%, 60%)', label: 'Light blue' },
                    { color: 'hsl(240, 75%, 60%)', label: 'Blue' },
                    { color: 'hsl(270, 75%, 60%)', label: 'Purple' },
                ];
                function ok(t) {
                    return (e, o, i) => {
                        const n = new qw(e.locale, {
                            colorDefinitions:
                                ((r = t.colorConfig),
                                r.map((t) => ({
                                    color: t.model,
                                    label: t.label,
                                    options: { hasBorder: t.hasBorder },
                                }))),
                            columns: t.columns,
                        });
                        var r;
                        return (
                            n.set({ id: o, ariaDescribedById: i }),
                            n.bind('isReadOnly').to(e, 'isEnabled', (t) => !t),
                            n.bind('hasError').to(e, 'errorText', (t) => !!t),
                            n.on('input', () => {
                                e.errorText = null;
                            }),
                            e.bind('isEmpty', 'isFocused').to(n),
                            n
                        );
                    };
                }
                function ik(t) {
                    const e = parseFloat(t);
                    return !Number.isNaN(e) && t === String(e);
                }
                o(112);
                class nk extends Nc {
                    constructor(t, e = {}) {
                        super(t);
                        const o = this.bindTemplate;
                        this.set('class', e.class || null),
                            (this.children = this.createCollection()),
                            e.children && e.children.forEach((t) => this.children.add(t)),
                            this.set('_role', null),
                            this.set('_ariaLabelledBy', null),
                            e.labelView && this.set({ _role: 'group', _ariaLabelledBy: e.labelView.id }),
                            this.setTemplate({
                                tag: 'div',
                                attributes: {
                                    class: ['ck', 'ck-form__row', o.to('class')],
                                    role: o.to('_role'),
                                    'aria-labelledby': o.to('_ariaLabelledBy'),
                                },
                                children: this.children,
                            });
                    }
                }
                o(13), o(14), o(116);
                const rk = { left: fc, center: mc, right: gc, justify: pc, top: uc, middle: hc, bottom: dc };
                class sk extends Nc {
                    constructor(t, e) {
                        super(t),
                            this.set({
                                borderStyle: '',
                                borderWidth: '',
                                borderColor: '',
                                padding: '',
                                backgroundColor: '',
                                width: '',
                                height: '',
                                horizontalAlignment: '',
                                verticalAlignment: '',
                            }),
                            (this.options = e);
                        const {
                                borderStyleDropdown: o,
                                borderWidthInput: i,
                                borderColorInput: n,
                                borderRowLabel: r,
                            } = this._createBorderFields(),
                            { backgroundRowLabel: s, backgroundInput: a } = this._createBackgroundFields(),
                            {
                                widthInput: l,
                                operatorLabel: c,
                                heightInput: d,
                                dimensionsLabel: h,
                            } = this._createDimensionFields(),
                            {
                                horizontalAlignmentToolbar: u,
                                verticalAlignmentToolbar: f,
                                alignmentLabel: m,
                            } = this._createAlignmentFields();
                        (this.focusTracker = new tc()),
                            (this.keystrokes = new Jl()),
                            (this.children = this.createCollection()),
                            (this.borderStyleDropdown = o),
                            (this.borderWidthInput = i),
                            (this.borderColorInput = n),
                            (this.backgroundInput = a),
                            (this.paddingInput = this._createPaddingField()),
                            (this.widthInput = l),
                            (this.heightInput = d),
                            (this.horizontalAlignmentToolbar = u),
                            (this.verticalAlignmentToolbar = f);
                        const { saveButtonView: g, cancelButtonView: p } = this._createActionButtons();
                        (this.saveButtonView = g),
                            (this.cancelButtonView = p),
                            (this._focusables = new Mc()),
                            (this._focusCycler = new hd({
                                focusables: this._focusables,
                                focusTracker: this.focusTracker,
                                keystrokeHandler: this.keystrokes,
                                actions: { focusPrevious: 'shift + tab', focusNext: 'tab' },
                            })),
                            this.children.add(new Hd(t, { label: this.t('Cell properties') })),
                            this.children.add(
                                new nk(t, { labelView: r, children: [r, o, n, i], class: 'ck-table-form__border-row' }),
                            ),
                            this.children.add(
                                new nk(t, { labelView: s, children: [s, a], class: 'ck-table-form__background-row' }),
                            ),
                            this.children.add(
                                new nk(t, {
                                    children: [
                                        new nk(t, {
                                            labelView: h,
                                            children: [h, l, c, d],
                                            class: 'ck-table-form__dimensions-row',
                                        }),
                                        new nk(t, {
                                            children: [this.paddingInput],
                                            class: 'ck-table-cell-properties-form__padding-row',
                                        }),
                                    ],
                                }),
                            ),
                            this.children.add(
                                new nk(t, {
                                    labelView: m,
                                    children: [m, u, f],
                                    class: 'ck-table-cell-properties-form__alignment-row',
                                }),
                            ),
                            this.children.add(
                                new nk(t, {
                                    children: [this.saveButtonView, this.cancelButtonView],
                                    class: 'ck-table-form__action-row',
                                }),
                            ),
                            this.setTemplate({
                                tag: 'form',
                                attributes: {
                                    class: ['ck', 'ck-form', 'ck-table-form', 'ck-table-cell-properties-form'],
                                    tabindex: '-1',
                                },
                                children: this.children,
                            });
                    }
                    render() {
                        super.render(),
                            zc({ view: this }),
                            [
                                this.borderStyleDropdown,
                                this.borderColorInput,
                                this.borderWidthInput,
                                this.backgroundInput,
                                this.widthInput,
                                this.heightInput,
                                this.paddingInput,
                                this.horizontalAlignmentToolbar,
                                this.verticalAlignmentToolbar,
                                this.saveButtonView,
                                this.cancelButtonView,
                            ].forEach((t) => {
                                this._focusables.add(t), this.focusTracker.add(t.element);
                            }),
                            this.keystrokes.listenTo(this.element);
                    }
                    focus() {
                        this._focusCycler.focusFirst();
                    }
                    _createBorderFields() {
                        const t = ok({ colorConfig: this.options.borderColors, columns: 5 }),
                            e = this.locale,
                            o = this.t,
                            i = new Bd(e);
                        i.text = o('Border');
                        const n = Kw(o),
                            r = new Wd(e, Ud);
                        r.set({ label: o('Style'), class: 'ck-table-form__border-style' }),
                            r.fieldView.buttonView.set({ isOn: !1, withText: !0, tooltip: o('Style') }),
                            r.fieldView.buttonView.bind('label').to(this, 'borderStyle', (t) => n[t || 'none']),
                            r.fieldView.on('execute', (t) => {
                                this.borderStyle = t.source._borderStyleValue;
                            }),
                            r.bind('isEmpty').to(this, 'borderStyle', (t) => !t),
                            Md(r.fieldView, Qw(this));
                        const s = new Wd(e, qd);
                        s.set({ label: o('Width'), class: 'ck-table-form__border-width' }),
                            s.fieldView.bind('value').to(this, 'borderWidth'),
                            s.bind('isEnabled').to(this, 'borderStyle', ak),
                            s.fieldView.on('input', () => {
                                this.borderWidth = s.fieldView.element.value;
                            });
                        const a = new Wd(e, t);
                        return (
                            a.set({ label: o('Color'), class: 'ck-table-form__border-color' }),
                            a.fieldView.bind('value').to(this, 'borderColor'),
                            a.bind('isEnabled').to(this, 'borderStyle', ak),
                            a.fieldView.on('input', () => {
                                this.borderColor = a.fieldView.value;
                            }),
                            this.on('change:borderStyle', (t, e, o) => {
                                ak(o) || ((this.borderColor = ''), (this.borderWidth = ''));
                            }),
                            { borderRowLabel: i, borderStyleDropdown: r, borderColorInput: a, borderWidthInput: s }
                        );
                    }
                    _createBackgroundFields() {
                        const t = this.locale,
                            e = this.t,
                            o = new Bd(t);
                        o.text = e('Background');
                        const i = ok({ colorConfig: this.options.backgroundColors, columns: 5 }),
                            n = new Wd(t, i);
                        return (
                            n.set({ label: e('Color'), class: 'ck-table-cell-properties-form__background' }),
                            n.fieldView.bind('value').to(this, 'backgroundColor'),
                            n.fieldView.on('input', () => {
                                this.backgroundColor = n.fieldView.value;
                            }),
                            { backgroundRowLabel: o, backgroundInput: n }
                        );
                    }
                    _createDimensionFields() {
                        const t = this.locale,
                            e = this.t,
                            o = new Bd(t);
                        o.text = e('Dimensions');
                        const i = new Wd(t, qd);
                        i.set({ label: e('Width'), class: 'ck-table-form__dimensions-row__width' }),
                            i.fieldView.bind('value').to(this, 'width'),
                            i.fieldView.on('input', () => {
                                this.width = i.fieldView.element.value;
                            });
                        const n = new Nc(t);
                        n.setTemplate({
                            tag: 'span',
                            attributes: { class: ['ck-table-form__dimension-operator'] },
                            children: [{ text: '×' }],
                        });
                        const r = new Wd(t, qd);
                        return (
                            r.set({ label: e('Height'), class: 'ck-table-form__dimensions-row__height' }),
                            r.fieldView.bind('value').to(this, 'height'),
                            r.fieldView.on('input', () => {
                                this.height = r.fieldView.element.value;
                            }),
                            { dimensionsLabel: o, widthInput: i, operatorLabel: n, heightInput: r }
                        );
                    }
                    _createPaddingField() {
                        const t = this.locale,
                            e = this.t,
                            o = new Wd(t, qd);
                        return (
                            o.set({ label: e('Padding'), class: 'ck-table-cell-properties-form__padding' }),
                            o.fieldView.bind('value').to(this, 'padding'),
                            o.fieldView.on('input', () => {
                                this.padding = o.fieldView.element.value;
                            }),
                            o
                        );
                    }
                    _createAlignmentFields() {
                        const t = this.locale,
                            e = this.t,
                            o = new Bd(t);
                        o.text = e('Table cell text alignment');
                        const i = new Td(t),
                            n = 'rtl' === this.locale.contentLanguageDirection;
                        i.set({ isCompact: !0, ariaLabel: e('Horizontal text alignment toolbar') }),
                            tk({
                                view: this,
                                icons: rk,
                                toolbar: i,
                                labels: this._horizontalAlignmentLabels,
                                propertyName: 'horizontalAlignment',
                                nameToValue: (t) => (t === (n ? 'right' : 'left') ? '' : t),
                            });
                        const r = new Td(t);
                        return (
                            r.set({ isCompact: !0, ariaLabel: e('Vertical text alignment toolbar') }),
                            tk({
                                view: this,
                                icons: rk,
                                toolbar: r,
                                labels: this._verticalAlignmentLabels,
                                propertyName: 'verticalAlignment',
                                nameToValue: (t) => ('middle' === t ? '' : t),
                            }),
                            { horizontalAlignmentToolbar: i, verticalAlignmentToolbar: r, alignmentLabel: o }
                        );
                    }
                    _createActionButtons() {
                        const t = this.locale,
                            e = this.t,
                            o = new rd(t),
                            i = new rd(t),
                            n = [this.borderWidthInput, this.borderColorInput, this.backgroundInput, this.paddingInput];
                        return (
                            o.set({
                                label: e('Save'),
                                icon: sc,
                                class: 'ck-button-save',
                                type: 'submit',
                                withText: !0,
                            }),
                            o.bind('isEnabled').toMany(n, 'errorText', (...t) => t.every((t) => !t)),
                            i.set({
                                label: e('Cancel'),
                                icon: rc,
                                class: 'ck-button-cancel',
                                type: 'cancel',
                                withText: !0,
                            }),
                            i.delegate('execute').to(this, 'cancel'),
                            { saveButtonView: o, cancelButtonView: i }
                        );
                    }
                    get _horizontalAlignmentLabels() {
                        const t = this.locale,
                            e = this.t,
                            o = e('Align cell text to the left'),
                            i = e('Align cell text to the center'),
                            n = e('Align cell text to the right'),
                            r = e('Justify cell text');
                        return 'rtl' === t.uiLanguageDirection
                            ? { right: n, center: i, left: o, justify: r }
                            : { left: o, center: i, right: n, justify: r };
                    }
                    get _verticalAlignmentLabels() {
                        const t = this.t;
                        return {
                            top: t('Align cell text to the top'),
                            middle: t('Align cell text to the middle'),
                            bottom: t('Align cell text to the bottom'),
                        };
                    }
                }
                function ak(t) {
                    return !!t;
                }
                function lk(t) {
                    const e = t.getSelectedElement();
                    return e && dk(e) ? e : null;
                }
                function ck(t) {
                    const e = (function (t, e) {
                        let o = e.parent;
                        for (; o; ) {
                            if (o.name === t) return o;
                            o = o.parent;
                        }
                    })('table', t.getFirstPosition());
                    return e && dk(e.parent) ? e.parent : null;
                }
                function dk(t) {
                    return !!t.getCustomProperty('table') && km(t);
                }
                const hk = Yd.defaultPositions,
                    uk = [
                        hk.northArrowSouth,
                        hk.northArrowSouthWest,
                        hk.northArrowSouthEast,
                        hk.southArrowNorth,
                        hk.southArrowNorthWest,
                        hk.southArrowNorthEast,
                    ],
                    fk = [...uk, Tm];
                function mk(t, e) {
                    const o = t.plugins.get('ContextualBalloon');
                    if (ck(t.editing.view.document.selection)) {
                        let i;
                        (i = 'cell' === e ? pk(t) : gk(t)), o.updatePosition(i);
                    }
                }
                function gk(t) {
                    const e = t.model.document.selection.getFirstPosition().findAncestor('table'),
                        o = t.editing.mapper.toViewElement(e);
                    return { target: t.editing.view.domConverter.viewToDom(o), positions: fk };
                }
                function pk(t) {
                    const e = t.editing.mapper,
                        o = t.editing.view.domConverter,
                        i = t.model.document.selection;
                    if (i.rangeCount > 1)
                        return {
                            target: () =>
                                (function (t, e) {
                                    const o = e.editing.mapper,
                                        i = e.editing.view.domConverter,
                                        n = Array.from(t).map((t) => {
                                            const e = bk(t.start),
                                                n = o.toViewElement(e);
                                            return new us(i.viewToDom(n));
                                        });
                                    return us.getBoundingRect(n);
                                })(i.getRanges(), t),
                            positions: uk,
                        };
                    const n = bk(i.getFirstPosition()),
                        r = e.toViewElement(n);
                    return { target: o.viewToDom(r), positions: uk };
                }
                function bk(t) {
                    return t.nodeAfter && t.nodeAfter.is('element', 'tableCell')
                        ? t.nodeAfter
                        : t.findAncestor('tableCell');
                }
                const wk = {
                    borderStyle: 'tableCellBorderStyle',
                    borderColor: 'tableCellBorderColor',
                    borderWidth: 'tableCellBorderWidth',
                    width: 'tableCellWidth',
                    height: 'tableCellHeight',
                    padding: 'tableCellPadding',
                    backgroundColor: 'tableCellBackgroundColor',
                    horizontalAlignment: 'tableCellHorizontalAlignment',
                    verticalAlignment: 'tableCellVerticalAlignment',
                };
                class kk extends Gt {
                    static get requires() {
                        return [eh];
                    }
                    static get pluginName() {
                        return 'TableCellPropertiesUI';
                    }
                    constructor(t) {
                        super(t),
                            t.config.define('table.tableCellProperties', { borderColors: ek, backgroundColors: ek });
                    }
                    init() {
                        const t = this.editor,
                            e = t.t;
                        (this._balloon = t.plugins.get(eh)),
                            (this.view = this._createPropertiesView()),
                            (this._undoStepBatch = null),
                            t.ui.componentFactory.add('tableCellProperties', (o) => {
                                const i = new rd(o);
                                i.set({
                                    label: e('Cell properties'),
                                    icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.105 18l-.17 1H2.5A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1h15A1.5 1.5 0 0 1 19 2.5v9.975l-.85-.124-.15-.302V8h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5h3.105zM2 12h5V8H2v4zm10-4H8v4h4V8zM2 2v5h5V2H2zm0 16h5v-5H2v5zM13 7h5V2h-5v5zM8 2v5h4V2H8z" opacity=".6"/><path d="M15.5 11.5l1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM13 6a1 1 0 0 1 1 1v3.172a2.047 2.047 0 0 0-.293.443l-.858 1.736-1.916.28-.151.027A1.976 1.976 0 0 0 9.315 14H7a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h6zm-1 2H8v4h4V8z"/></svg>',
                                    tooltip: !0,
                                }),
                                    this.listenTo(i, 'execute', () => this._showView());
                                const n = Object.values(wk).map((e) => t.commands.get(e));
                                return i.bind('isEnabled').toMany(n, 'isEnabled', (...t) => t.some((t) => t)), i;
                            });
                    }
                    destroy() {
                        super.destroy(), this.view.destroy();
                    }
                    _createPropertiesView() {
                        const t = this.editor,
                            e = t.editing.view.document,
                            o = t.config.get('table.tableCellProperties'),
                            i = ld(o.borderColors),
                            n = ad(t.locale, i),
                            r = ld(o.backgroundColors),
                            s = ad(t.locale, r),
                            a = new sk(t.locale, { borderColors: n, backgroundColors: s }),
                            l = t.t;
                        a.render(),
                            this.listenTo(a, 'submit', () => {
                                this._hideView();
                            }),
                            this.listenTo(a, 'cancel', () => {
                                this._undoStepBatch.operations.length && t.execute('undo', this._undoStepBatch),
                                    this._hideView();
                            }),
                            a.keystrokes.set('Esc', (t, e) => {
                                this._hideView(), e();
                            }),
                            this.listenTo(t.ui, 'update', () => {
                                ck(e.selection) ? this._isViewVisible && mk(t, 'cell') : this._hideView();
                            }),
                            Vc({
                                emitter: a,
                                activator: () => this._isViewInBalloon,
                                contextElements: [this._balloon.view.element],
                                callback: () => this._hideView(),
                            });
                        const c = Gw(l),
                            d = Jw(l);
                        return (
                            a.on('change:borderStyle', this._getPropertyChangeCallback('tableCellBorderStyle')),
                            a.on(
                                'change:borderColor',
                                this._getValidatedPropertyChangeCallback({
                                    viewField: a.borderColorInput,
                                    commandName: 'tableCellBorderColor',
                                    errorText: c,
                                    validator: Yw,
                                }),
                            ),
                            a.on(
                                'change:borderWidth',
                                this._getValidatedPropertyChangeCallback({
                                    viewField: a.borderWidthInput,
                                    commandName: 'tableCellBorderWidth',
                                    errorText: d,
                                    validator: Zw,
                                }),
                            ),
                            a.on(
                                'change:padding',
                                this._getValidatedPropertyChangeCallback({
                                    viewField: a.paddingInput,
                                    commandName: 'tableCellPadding',
                                    errorText: d,
                                    validator: Xw,
                                }),
                            ),
                            a.on(
                                'change:width',
                                this._getValidatedPropertyChangeCallback({
                                    viewField: a.widthInput,
                                    commandName: 'tableCellWidth',
                                    errorText: d,
                                    validator: Xw,
                                }),
                            ),
                            a.on(
                                'change:height',
                                this._getValidatedPropertyChangeCallback({
                                    viewField: a.heightInput,
                                    commandName: 'tableCellHeight',
                                    errorText: d,
                                    validator: Xw,
                                }),
                            ),
                            a.on(
                                'change:backgroundColor',
                                this._getValidatedPropertyChangeCallback({
                                    viewField: a.backgroundInput,
                                    commandName: 'tableCellBackgroundColor',
                                    errorText: c,
                                    validator: Yw,
                                }),
                            ),
                            a.on(
                                'change:horizontalAlignment',
                                this._getPropertyChangeCallback('tableCellHorizontalAlignment'),
                            ),
                            a.on(
                                'change:verticalAlignment',
                                this._getPropertyChangeCallback('tableCellVerticalAlignment'),
                            ),
                            a
                        );
                    }
                    _fillViewFormFromCommandValues() {
                        const t = this.editor.commands;
                        Object.entries(wk)
                            .map(([e, o]) => [e, t.get(o).value || ''])
                            .forEach(([t, e]) => this.view.set(t, e));
                    }
                    _showView() {
                        const t = this.editor;
                        this._fillViewFormFromCommandValues(),
                            this._balloon.add({ view: this.view, position: pk(t) }),
                            (this._undoStepBatch = t.model.createBatch()),
                            this.view.focus();
                    }
                    _hideView() {
                        if (!this._isViewInBalloon) return;
                        const t = this.editor;
                        this.stopListening(t.ui, 'update'),
                            this.view.saveButtonView.focus(),
                            this._balloon.remove(this.view),
                            this.editor.editing.view.focus();
                    }
                    get _isViewVisible() {
                        return this._balloon.visibleView === this.view;
                    }
                    get _isViewInBalloon() {
                        return this._balloon.hasView(this.view);
                    }
                    _getPropertyChangeCallback(t) {
                        return (e, o, i) => {
                            this.editor.execute(t, { value: i, batch: this._undoStepBatch });
                        };
                    }
                    _getValidatedPropertyChangeCallback({ commandName: t, viewField: e, validator: o, errorText: i }) {
                        const n = is(() => {
                            e.errorText = i;
                        }, 500);
                        return (i, r, s) => {
                            n.cancel(),
                                o(s)
                                    ? (this.editor.execute(t, { value: s, batch: this._undoStepBatch }),
                                      (e.errorText = null))
                                    : n();
                        };
                    }
                }
                function _k(t, e, o, i) {
                    t.for('upcast').attributeToAttribute({
                        view: { styles: { [i]: /[\s\S]+/ } },
                        model: { name: e, key: o, value: (t) => t.getNormalizedStyle(i) },
                    });
                }
                function vk(t, e) {
                    t.for('upcast').add((t) =>
                        t.on('element:' + e, (t, e, o) => {
                            if (!e.modelRange) return;
                            const i = ['border-top', 'border-right', 'border-bottom', 'border-left'].filter((t) =>
                                e.viewItem.hasStyle(t),
                            );
                            if (!i.length) return;
                            const n = { styles: i };
                            if (!o.consumable.test(e.viewItem, n)) return;
                            const r = [...e.modelRange.getItems({ shallow: !0 })].pop();
                            o.consumable.consume(e.viewItem, n),
                                o.writer.setAttribute('borderStyle', e.viewItem.getNormalizedStyle('border-style'), r),
                                o.writer.setAttribute('borderColor', e.viewItem.getNormalizedStyle('border-color'), r),
                                o.writer.setAttribute('borderWidth', e.viewItem.getNormalizedStyle('border-width'), r);
                        }),
                    );
                }
                function yk(t, e, o, i) {
                    t.for('downcast').attributeToAttribute({
                        model: { name: e, key: o },
                        view: (t) => ({ key: 'style', value: { [i]: t } }),
                    });
                }
                function xk(t, e, o) {
                    t.for('downcast').add((t) =>
                        t.on(`attribute:${e}:table`, (t, e, i) => {
                            const { item: n, attributeNewValue: r } = e,
                                { mapper: s, writer: a } = i;
                            if (!i.consumable.consume(e.item, t.name)) return;
                            const l = [...s.toViewElement(n).getChildren()].find((t) => t.is('element', 'table'));
                            r ? a.setStyle(o, r, l) : a.removeStyle(o, l);
                        }),
                    );
                }
                class Ck extends Yt {
                    constructor(t, e) {
                        super(t), (this.attributeName = e);
                    }
                    refresh() {
                        const t = zb(this.editor.model.document.selection);
                        (this.isEnabled = !!t.length), (this.value = this._getSingleValue(t));
                    }
                    execute(t = {}) {
                        const { value: e, batch: o } = t,
                            i = this.editor.model,
                            n = zb(i.document.selection),
                            r = this._getValueToSet(e);
                        i.enqueueChange(o || 'default', (t) => {
                            r
                                ? n.forEach((e) => t.setAttribute(this.attributeName, r, e))
                                : n.forEach((e) => t.removeAttribute(this.attributeName, e));
                        });
                    }
                    _getAttribute(t) {
                        if (t) return t.getAttribute(this.attributeName);
                    }
                    _getValueToSet(t) {
                        return t;
                    }
                    _getSingleValue(t) {
                        const e = this._getAttribute(t[0]);
                        return t.every((t) => this._getAttribute(t) === e) ? e : void 0;
                    }
                }
                function Ak(t) {
                    if (!t || !w(t)) return t;
                    const { top: e, right: o, bottom: i, left: n } = t;
                    return e == o && o == i && i == n ? e : void 0;
                }
                function Tk(t, e) {
                    const o = parseFloat(t);
                    return Number.isNaN(o) || String(o) !== String(t) ? t : `${o}${e}`;
                }
                class Pk extends Ck {
                    constructor(t) {
                        super(t, 'padding');
                    }
                    _getAttribute(t) {
                        if (t) return Ak(t.getAttribute(this.attributeName));
                    }
                    _getValueToSet(t) {
                        return Tk(t, 'px');
                    }
                }
                class Sk extends Ck {
                    constructor(t) {
                        super(t, 'width');
                    }
                    _getValueToSet(t) {
                        return Tk(t, 'px');
                    }
                }
                class Ek extends Ck {
                    constructor(t) {
                        super(t, 'height');
                    }
                    _getValueToSet(t) {
                        return Tk(t, 'px');
                    }
                }
                class Rk extends Ck {
                    constructor(t) {
                        super(t, 'backgroundColor');
                    }
                }
                class Ik extends Ck {
                    constructor(t) {
                        super(t, 'verticalAlignment');
                    }
                }
                class Vk extends Ck {
                    constructor(t) {
                        super(t, 'horizontalAlignment');
                    }
                }
                class Ok extends Ck {
                    constructor(t) {
                        super(t, 'borderStyle');
                    }
                    _getAttribute(t) {
                        if (t) return Ak(t.getAttribute(this.attributeName));
                    }
                }
                class zk extends Ck {
                    constructor(t) {
                        super(t, 'borderColor');
                    }
                    _getAttribute(t) {
                        if (t) return Ak(t.getAttribute(this.attributeName));
                    }
                }
                class Mk extends Ck {
                    constructor(t) {
                        super(t, 'borderWidth');
                    }
                    _getAttribute(t) {
                        if (t) return Ak(t.getAttribute(this.attributeName));
                    }
                    _getValueToSet(t) {
                        return Tk(t, 'px');
                    }
                }
                const Nk = /^(top|bottom)$/;
                class Bk extends Gt {
                    static get pluginName() {
                        return 'TableCellPropertiesEditing';
                    }
                    static get requires() {
                        return [Rw];
                    }
                    init() {
                        const t = this.editor,
                            e = t.model.schema,
                            o = t.conversion,
                            i = t.locale;
                        t.data.addStyleProcessorRules(Xh),
                            (function (t, e) {
                                t.extend('tableCell', {
                                    allowAttributes: ['borderWidth', 'borderColor', 'borderStyle'],
                                }),
                                    vk(e, 'td'),
                                    vk(e, 'th'),
                                    yk(e, 'tableCell', 'borderStyle', 'border-style'),
                                    yk(e, 'tableCell', 'borderColor', 'border-color'),
                                    yk(e, 'tableCell', 'borderWidth', 'border-width');
                            })(e, o),
                            t.commands.add('tableCellBorderStyle', new Ok(t)),
                            t.commands.add('tableCellBorderColor', new zk(t)),
                            t.commands.add('tableCellBorderWidth', new Mk(t)),
                            (function (t, e, o) {
                                t.extend('tableCell', { allowAttributes: ['horizontalAlignment'] });
                                const i = ['rtl' == o.contentLanguageDirection ? 'left' : 'right', 'center', 'justify'];
                                e.attributeToAttribute({
                                    model: { name: 'tableCell', key: 'horizontalAlignment', values: i },
                                    view: i.reduce(
                                        (t, e) => ({ ...t, [e]: { key: 'style', value: { 'text-align': e } } }),
                                        {},
                                    ),
                                });
                            })(e, o, i),
                            t.commands.add('tableCellHorizontalAlignment', new Vk(t)),
                            Fk(e, o, 'width', 'width'),
                            t.commands.add('tableCellWidth', new Sk(t)),
                            Fk(e, o, 'height', 'height'),
                            t.commands.add('tableCellHeight', new Ek(t)),
                            t.data.addStyleProcessorRules(cu),
                            Fk(e, o, 'padding', 'padding'),
                            t.commands.add('tableCellPadding', new Pk(t)),
                            t.data.addStyleProcessorRules(Jh),
                            Fk(e, o, 'backgroundColor', 'background-color'),
                            t.commands.add('tableCellBackgroundColor', new Rk(t)),
                            (function (t, e) {
                                t.extend('tableCell', { allowAttributes: ['verticalAlignment'] }),
                                    e.attributeToAttribute({
                                        model: {
                                            name: 'tableCell',
                                            key: 'verticalAlignment',
                                            values: ['top', 'bottom'],
                                        },
                                        view: {
                                            top: { key: 'style', value: { 'vertical-align': 'top' } },
                                            bottom: { key: 'style', value: { 'vertical-align': 'bottom' } },
                                        },
                                    }),
                                    e.for('upcast').attributeToAttribute({
                                        view: { attributes: { valign: Nk } },
                                        model: {
                                            name: 'tableCell',
                                            key: 'verticalAlignment',
                                            value: (t) => t.getAttribute('valign'),
                                        },
                                    });
                            })(e, o),
                            t.commands.add('tableCellVerticalAlignment', new Ik(t));
                    }
                }
                function Fk(t, e, o, i) {
                    t.extend('tableCell', { allowAttributes: [o] }), _k(e, 'tableCell', o, i), yk(e, 'tableCell', o, i);
                }
                class Dk extends Yt {
                    constructor(t, e) {
                        super(t), (this.attributeName = e);
                    }
                    refresh() {
                        const t = this.editor.model.document.selection.getFirstPosition().findAncestor('table');
                        (this.isEnabled = !!t), (this.value = this._getValue(t));
                    }
                    execute(t = {}) {
                        const e = this.editor.model,
                            o = e.document.selection,
                            { value: i, batch: n } = t,
                            r = o.getFirstPosition().findAncestor('table'),
                            s = this._getValueToSet(i);
                        e.enqueueChange(n || 'default', (t) => {
                            s ? t.setAttribute(this.attributeName, s, r) : t.removeAttribute(this.attributeName, r);
                        });
                    }
                    _getValue(t) {
                        if (t) return t.getAttribute(this.attributeName);
                    }
                    _getValueToSet(t) {
                        return t;
                    }
                }
                class Lk extends Dk {
                    constructor(t) {
                        super(t, 'backgroundColor');
                    }
                }
                class Hk extends Dk {
                    constructor(t) {
                        super(t, 'borderColor');
                    }
                    _getValue(t) {
                        if (t) return Ak(t.getAttribute(this.attributeName));
                    }
                }
                class jk extends Dk {
                    constructor(t) {
                        super(t, 'borderStyle');
                    }
                    _getValue(t) {
                        if (t) return Ak(t.getAttribute(this.attributeName));
                    }
                }
                class Wk extends Dk {
                    constructor(t) {
                        super(t, 'borderWidth');
                    }
                    _getValue(t) {
                        if (t) return Ak(t.getAttribute(this.attributeName));
                    }
                    _getValueToSet(t) {
                        return Tk(t, 'px');
                    }
                }
                class qk extends Dk {
                    constructor(t) {
                        super(t, 'width');
                    }
                    _getValueToSet(t) {
                        return Tk(t, 'px');
                    }
                }
                class Uk extends Dk {
                    constructor(t) {
                        super(t, 'height');
                    }
                    _getValueToSet(t) {
                        return Tk(t, 'px');
                    }
                }
                class $k extends Dk {
                    constructor(t) {
                        super(t, 'alignment');
                    }
                }
                const Kk = /^(left|right)$/;
                class Gk extends Gt {
                    static get pluginName() {
                        return 'TablePropertiesEditing';
                    }
                    static get requires() {
                        return [Rw];
                    }
                    init() {
                        const t = this.editor,
                            e = t.model.schema,
                            o = t.conversion;
                        t.data.addStyleProcessorRules(Xh),
                            (function (t, e) {
                                t.extend('table', { allowAttributes: ['borderWidth', 'borderColor', 'borderStyle'] }),
                                    vk(e, 'table'),
                                    xk(e, 'borderColor', 'border-color'),
                                    xk(e, 'borderStyle', 'border-style'),
                                    xk(e, 'borderWidth', 'border-width');
                            })(e, o),
                            t.commands.add('tableBorderColor', new Hk(t)),
                            t.commands.add('tableBorderStyle', new jk(t)),
                            t.commands.add('tableBorderWidth', new Wk(t)),
                            (function (t, e) {
                                t.extend('table', { allowAttributes: ['alignment'] }),
                                    e.attributeToAttribute({
                                        model: { name: 'table', key: 'alignment', values: ['left', 'right'] },
                                        view: {
                                            left: { key: 'style', value: { float: 'left' } },
                                            right: { key: 'style', value: { float: 'right' } },
                                        },
                                        converterPriority: 'high',
                                    }),
                                    e.for('upcast').attributeToAttribute({
                                        view: { attributes: { align: Kk } },
                                        model: {
                                            name: 'table',
                                            key: 'alignment',
                                            value: (t) => t.getAttribute('align'),
                                        },
                                    });
                            })(e, o),
                            t.commands.add('tableAlignment', new $k(t)),
                            Jk(e, o, 'width', 'width'),
                            t.commands.add('tableWidth', new qk(t)),
                            Jk(e, o, 'height', 'height'),
                            t.commands.add('tableHeight', new Uk(t)),
                            t.data.addStyleProcessorRules(Jh),
                            (function (t, e, o, i) {
                                t.extend('table', { allowAttributes: [o] }), _k(e, 'table', o, i), xk(e, o, i);
                            })(e, o, 'backgroundColor', 'background-color'),
                            t.commands.add('tableBackgroundColor', new Lk(t));
                    }
                }
                function Jk(t, e, o, i) {
                    t.extend('table', { allowAttributes: [o] }), _k(e, 'table', o, i), yk(e, 'table', o, i);
                }
                o(118);
                const Yk = { left: bc, center: wc, right: kc };
                class Xk extends Nc {
                    constructor(t, e) {
                        super(t),
                            this.set({
                                borderStyle: '',
                                borderWidth: '',
                                borderColor: '',
                                backgroundColor: '',
                                width: '',
                                height: '',
                                alignment: '',
                            }),
                            (this.options = e);
                        const {
                                borderStyleDropdown: o,
                                borderWidthInput: i,
                                borderColorInput: n,
                                borderRowLabel: r,
                            } = this._createBorderFields(),
                            { backgroundRowLabel: s, backgroundInput: a } = this._createBackgroundFields(),
                            {
                                widthInput: l,
                                operatorLabel: c,
                                heightInput: d,
                                dimensionsLabel: h,
                            } = this._createDimensionFields(),
                            { alignmentToolbar: u, alignmentLabel: f } = this._createAlignmentFields();
                        (this.focusTracker = new tc()),
                            (this.keystrokes = new Jl()),
                            (this.children = this.createCollection()),
                            (this.borderStyleDropdown = o),
                            (this.borderWidthInput = i),
                            (this.borderColorInput = n),
                            (this.backgroundInput = a),
                            (this.widthInput = l),
                            (this.heightInput = d),
                            (this.alignmentToolbar = u);
                        const { saveButtonView: m, cancelButtonView: g } = this._createActionButtons();
                        (this.saveButtonView = m),
                            (this.cancelButtonView = g),
                            (this._focusables = new Mc()),
                            (this._focusCycler = new hd({
                                focusables: this._focusables,
                                focusTracker: this.focusTracker,
                                keystrokeHandler: this.keystrokes,
                                actions: { focusPrevious: 'shift + tab', focusNext: 'tab' },
                            })),
                            this.children.add(new Hd(t, { label: this.t('Table properties') })),
                            this.children.add(
                                new nk(t, { labelView: r, children: [r, o, n, i], class: 'ck-table-form__border-row' }),
                            ),
                            this.children.add(
                                new nk(t, { labelView: s, children: [s, a], class: 'ck-table-form__background-row' }),
                            ),
                            this.children.add(
                                new nk(t, {
                                    children: [
                                        new nk(t, {
                                            labelView: h,
                                            children: [h, l, c, d],
                                            class: 'ck-table-form__dimensions-row',
                                        }),
                                        new nk(t, {
                                            labelView: f,
                                            children: [f, u],
                                            class: 'ck-table-properties-form__alignment-row',
                                        }),
                                    ],
                                }),
                            ),
                            this.children.add(
                                new nk(t, {
                                    children: [this.saveButtonView, this.cancelButtonView],
                                    class: 'ck-table-form__action-row',
                                }),
                            ),
                            this.setTemplate({
                                tag: 'form',
                                attributes: {
                                    class: ['ck', 'ck-form', 'ck-table-form', 'ck-table-properties-form'],
                                    tabindex: '-1',
                                },
                                children: this.children,
                            });
                    }
                    render() {
                        super.render(),
                            zc({ view: this }),
                            [
                                this.borderStyleDropdown,
                                this.borderColorInput,
                                this.borderWidthInput,
                                this.backgroundInput,
                                this.widthInput,
                                this.heightInput,
                                this.alignmentToolbar,
                                this.saveButtonView,
                                this.cancelButtonView,
                            ].forEach((t) => {
                                this._focusables.add(t), this.focusTracker.add(t.element);
                            }),
                            this.keystrokes.listenTo(this.element);
                    }
                    focus() {
                        this._focusCycler.focusFirst();
                    }
                    _createBorderFields() {
                        const t = ok({ colorConfig: this.options.borderColors, columns: 5 }),
                            e = this.locale,
                            o = this.t,
                            i = new Bd(e);
                        i.text = o('Border');
                        const n = Kw(this.t),
                            r = new Wd(e, Ud);
                        r.set({ label: o('Style'), class: 'ck-table-form__border-style' }),
                            r.fieldView.buttonView.set({ isOn: !1, withText: !0, tooltip: o('Style') }),
                            r.fieldView.buttonView.bind('label').to(this, 'borderStyle', (t) => n[t || 'none']),
                            r.fieldView.on('execute', (t) => {
                                this.borderStyle = t.source._borderStyleValue;
                            }),
                            r.bind('isEmpty').to(this, 'borderStyle', (t) => !t),
                            Md(r.fieldView, Qw(this));
                        const s = new Wd(e, qd);
                        s.set({ label: o('Width'), class: 'ck-table-form__border-width' }),
                            s.fieldView.bind('value').to(this, 'borderWidth'),
                            s.bind('isEnabled').to(this, 'borderStyle', Zk),
                            s.fieldView.on('input', () => {
                                this.borderWidth = s.fieldView.element.value;
                            });
                        const a = new Wd(e, t);
                        return (
                            a.set({ label: o('Color'), class: 'ck-table-form__border-color' }),
                            a.fieldView.bind('value').to(this, 'borderColor'),
                            a.bind('isEnabled').to(this, 'borderStyle', Zk),
                            a.fieldView.on('input', () => {
                                this.borderColor = a.fieldView.value;
                            }),
                            this.on('change:borderStyle', (t, e, o) => {
                                Zk(o) || ((this.borderColor = ''), (this.borderWidth = ''));
                            }),
                            { borderRowLabel: i, borderStyleDropdown: r, borderColorInput: a, borderWidthInput: s }
                        );
                    }
                    _createBackgroundFields() {
                        const t = this.locale,
                            e = this.t,
                            o = new Bd(t);
                        o.text = e('Background');
                        const i = ok({ colorConfig: this.options.backgroundColors, columns: 5 }),
                            n = new Wd(t, i);
                        return (
                            n.set({ label: e('Color'), class: 'ck-table-properties-form__background' }),
                            n.fieldView.bind('value').to(this, 'backgroundColor'),
                            n.fieldView.on('input', () => {
                                this.backgroundColor = n.fieldView.value;
                            }),
                            { backgroundRowLabel: o, backgroundInput: n }
                        );
                    }
                    _createDimensionFields() {
                        const t = this.locale,
                            e = this.t,
                            o = new Bd(t);
                        o.text = e('Dimensions');
                        const i = new Wd(t, qd);
                        i.set({ label: e('Width'), class: 'ck-table-form__dimensions-row__width' }),
                            i.fieldView.bind('value').to(this, 'width'),
                            i.fieldView.on('input', () => {
                                this.width = i.fieldView.element.value;
                            });
                        const n = new Nc(t);
                        n.setTemplate({
                            tag: 'span',
                            attributes: { class: ['ck-table-form__dimension-operator'] },
                            children: [{ text: '×' }],
                        });
                        const r = new Wd(t, qd);
                        return (
                            r.set({ label: e('Height'), class: 'ck-table-form__dimensions-row__height' }),
                            r.fieldView.bind('value').to(this, 'height'),
                            r.fieldView.on('input', () => {
                                this.height = r.fieldView.element.value;
                            }),
                            { dimensionsLabel: o, widthInput: i, operatorLabel: n, heightInput: r }
                        );
                    }
                    _createAlignmentFields() {
                        const t = this.locale,
                            e = this.t,
                            o = new Bd(t);
                        o.text = e('Alignment');
                        const i = new Td(t);
                        return (
                            i.set({ isCompact: !0, ariaLabel: e('Table alignment toolbar') }),
                            tk({
                                view: this,
                                icons: Yk,
                                toolbar: i,
                                labels: this._alignmentLabels,
                                propertyName: 'alignment',
                                nameToValue: (t) => ('center' === t ? '' : t),
                            }),
                            { alignmentLabel: o, alignmentToolbar: i }
                        );
                    }
                    _createActionButtons() {
                        const t = this.locale,
                            e = this.t,
                            o = new rd(t),
                            i = new rd(t),
                            n = [
                                this.borderWidthInput,
                                this.borderColorInput,
                                this.backgroundInput,
                                this.widthInput,
                                this.heightInput,
                            ];
                        return (
                            o.set({
                                label: e('Save'),
                                icon: sc,
                                class: 'ck-button-save',
                                type: 'submit',
                                withText: !0,
                            }),
                            o.bind('isEnabled').toMany(n, 'errorText', (...t) => t.every((t) => !t)),
                            i.set({
                                label: e('Cancel'),
                                icon: rc,
                                class: 'ck-button-cancel',
                                type: 'cancel',
                                withText: !0,
                            }),
                            i.delegate('execute').to(this, 'cancel'),
                            { saveButtonView: o, cancelButtonView: i }
                        );
                    }
                    get _alignmentLabels() {
                        const t = this.locale,
                            e = this.t,
                            o = e('Align table to the left'),
                            i = e('Center table'),
                            n = e('Align table to the right');
                        return 'rtl' === t.uiLanguageDirection
                            ? { right: n, center: i, left: o }
                            : { left: o, center: i, right: n };
                    }
                }
                function Zk(t) {
                    return !!t;
                }
                const Qk = {
                    borderStyle: 'tableBorderStyle',
                    borderColor: 'tableBorderColor',
                    borderWidth: 'tableBorderWidth',
                    backgroundColor: 'tableBackgroundColor',
                    width: 'tableWidth',
                    height: 'tableHeight',
                    alignment: 'tableAlignment',
                };
                class t_ extends Gt {
                    static get requires() {
                        return [eh];
                    }
                    static get pluginName() {
                        return 'TablePropertiesUI';
                    }
                    constructor(t) {
                        super(t), t.config.define('table.tableProperties', { borderColors: ek, backgroundColors: ek });
                    }
                    init() {
                        const t = this.editor,
                            e = t.t;
                        (this._balloon = t.plugins.get(eh)),
                            (this.view = this._createPropertiesView()),
                            (this._undoStepBatch = null),
                            t.ui.componentFactory.add('tableProperties', (o) => {
                                const i = new rd(o);
                                i.set({
                                    label: e('Table properties'),
                                    icon: '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8 2v5h4V2h1v5h5v1h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5H7v-5H2v-1h5V8H2V7h5V2h1zm4 6H8v4h4V8z" opacity=".6"/><path d="M15.5 11.5l1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM17 1a2 2 0 0 1 2 2v9.475l-.85-.124-.857-1.736a2.048 2.048 0 0 0-.292-.44L17 3H3v14h7.808l.402.392L10.935 19H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h14z"/></svg>',
                                    tooltip: !0,
                                }),
                                    this.listenTo(i, 'execute', () => this._showView());
                                const n = Object.values(Qk).map((e) => t.commands.get(e));
                                return i.bind('isEnabled').toMany(n, 'isEnabled', (...t) => t.some((t) => t)), i;
                            });
                    }
                    destroy() {
                        super.destroy(), this.view.destroy();
                    }
                    _createPropertiesView() {
                        const t = this.editor,
                            e = t.config.get('table.tableProperties'),
                            o = ld(e.borderColors),
                            i = ad(t.locale, o),
                            n = ld(e.backgroundColors),
                            r = ad(t.locale, n),
                            s = new Xk(t.locale, { borderColors: i, backgroundColors: r }),
                            a = t.t;
                        s.render(),
                            this.listenTo(s, 'submit', () => {
                                this._hideView();
                            }),
                            this.listenTo(s, 'cancel', () => {
                                this._undoStepBatch.operations.length && t.execute('undo', this._undoStepBatch),
                                    this._hideView();
                            }),
                            s.keystrokes.set('Esc', (t, e) => {
                                this._hideView(), e();
                            }),
                            Vc({
                                emitter: s,
                                activator: () => this._isViewInBalloon,
                                contextElements: [this._balloon.view.element],
                                callback: () => this._hideView(),
                            });
                        const l = Gw(a),
                            c = Jw(a);
                        return (
                            s.on('change:borderStyle', this._getPropertyChangeCallback('tableBorderStyle')),
                            s.on(
                                'change:borderColor',
                                this._getValidatedPropertyChangeCallback({
                                    viewField: s.borderColorInput,
                                    commandName: 'tableBorderColor',
                                    errorText: l,
                                    validator: Yw,
                                }),
                            ),
                            s.on(
                                'change:borderWidth',
                                this._getValidatedPropertyChangeCallback({
                                    viewField: s.borderWidthInput,
                                    commandName: 'tableBorderWidth',
                                    errorText: c,
                                    validator: Zw,
                                }),
                            ),
                            s.on(
                                'change:backgroundColor',
                                this._getValidatedPropertyChangeCallback({
                                    viewField: s.backgroundInput,
                                    commandName: 'tableBackgroundColor',
                                    errorText: l,
                                    validator: Yw,
                                }),
                            ),
                            s.on(
                                'change:width',
                                this._getValidatedPropertyChangeCallback({
                                    viewField: s.widthInput,
                                    commandName: 'tableWidth',
                                    errorText: c,
                                    validator: Xw,
                                }),
                            ),
                            s.on(
                                'change:height',
                                this._getValidatedPropertyChangeCallback({
                                    viewField: s.heightInput,
                                    commandName: 'tableHeight',
                                    errorText: c,
                                    validator: Xw,
                                }),
                            ),
                            s.on('change:alignment', this._getPropertyChangeCallback('tableAlignment')),
                            s
                        );
                    }
                    _fillViewFormFromCommandValues() {
                        const t = this.editor.commands;
                        Object.entries(Qk)
                            .map(([e, o]) => [e, t.get(o).value || ''])
                            .forEach(([t, e]) => this.view.set(t, e));
                    }
                    _showView() {
                        const t = this.editor;
                        this.listenTo(t.ui, 'update', () => {
                            this._updateView();
                        }),
                            this._fillViewFormFromCommandValues(),
                            this._balloon.add({ view: this.view, position: gk(t) }),
                            (this._undoStepBatch = t.model.createBatch()),
                            this.view.focus();
                    }
                    _hideView() {
                        const t = this.editor;
                        this.stopListening(t.ui, 'update'),
                            this.view.saveButtonView.focus(),
                            this._balloon.remove(this.view),
                            this.editor.editing.view.focus();
                    }
                    _updateView() {
                        const t = this.editor;
                        ck(t.editing.view.document.selection)
                            ? this._isViewVisible && mk(t, 'table')
                            : this._hideView();
                    }
                    get _isViewVisible() {
                        return this._balloon.visibleView === this.view;
                    }
                    get _isViewInBalloon() {
                        return this._balloon.hasView(this.view);
                    }
                    _getPropertyChangeCallback(t) {
                        return (e, o, i) => {
                            this.editor.execute(t, { value: i, batch: this._undoStepBatch });
                        };
                    }
                    _getValidatedPropertyChangeCallback({ commandName: t, viewField: e, validator: o, errorText: i }) {
                        const n = is(() => {
                            e.errorText = i;
                        }, 500);
                        return (i, r, s) => {
                            n.cancel(),
                                o(s)
                                    ? (this.editor.execute(t, { value: s, batch: this._undoStepBatch }),
                                      (e.errorText = null))
                                    : n();
                        };
                    }
                }
                class e_ extends uu {}
                e_.builtinPlugins = [
                    class extends Gt {
                        static get requires() {
                            return [bu, ku];
                        }
                        static get pluginName() {
                            return 'Alignment';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [vu, yu];
                        }
                        static get pluginName() {
                            return 'Bold';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [xu, Cu];
                        }
                        static get pluginName() {
                            return 'Italic';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [Au, Tu];
                        }
                        static get pluginName() {
                            return 'Strikethrough';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [Pu, Su];
                        }
                        static get pluginName() {
                            return 'Subscript';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [Eu, Ru];
                        }
                        static get pluginName() {
                            return 'Superscript';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [Iu, Vu];
                        }
                        static get pluginName() {
                            return 'Underline';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [Bu, ju, Zu, $u, ff, zf];
                        }
                        static get pluginName() {
                            return 'Essentials';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [jf, qf];
                        }
                        static get pluginName() {
                            return 'FontBackgroundColor';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [$f, Kf];
                        }
                        static get pluginName() {
                            return 'FontColor';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [Zf, Qf];
                        }
                        static get pluginName() {
                            return 'FontFamily';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [rm, sm];
                        }
                        static get pluginName() {
                            return 'FontSize';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [fm, mm];
                        }
                        static get pluginName() {
                            return 'Heading';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [Km, Gm, Nm];
                        }
                        static get pluginName() {
                            return 'HorizontalLine';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [ng, Nm, hg];
                        }
                        static get pluginName() {
                            return 'Image';
                        }
                        isImageWidget(t) {
                            return Ym(t);
                        }
                    },
                    class extends Gt {
                        static get pluginName() {
                            return 'ImageInsert';
                        }
                        static get requires() {
                            return [Ig, Mg];
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [Bg, Hg, Dg];
                        }
                        static get pluginName() {
                            return 'ImageResize';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [Fm];
                        }
                        static get pluginName() {
                            return 'ImageToolbar';
                        }
                        afterInit() {
                            const t = this.editor,
                                e = t.t;
                            t.plugins.get(Fm).register('image', {
                                ariaLabel: e('Image toolbar'),
                                items: t.config.get('image.toolbar') || [],
                                getRelatedElement: Xm,
                            });
                        }
                    },
                    Ig,
                    class extends Gt {
                        static get requires() {
                            return [wp, xp, Tp];
                        }
                        static get pluginName() {
                            return 'Link';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [Qp, ib];
                        }
                        static get pluginName() {
                            return 'List';
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [rb, hb];
                        }
                        static get pluginName() {
                            return 'ListStyle';
                        }
                    },
                    dm,
                    class extends Gt {
                        static get requires() {
                            return [Rw, Ow, Mw, jw, Lw, Nw, Nm];
                        }
                        static get pluginName() {
                            return 'Table';
                        }
                    },
                    class extends Gt {
                        static get pluginName() {
                            return 'TableCellProperties';
                        }
                        static get requires() {
                            return [Bk, kk];
                        }
                    },
                    class extends Gt {
                        static get pluginName() {
                            return 'TableProperties';
                        }
                        static get requires() {
                            return [Gk, t_];
                        }
                    },
                    class extends Gt {
                        static get requires() {
                            return [Fm];
                        }
                        static get pluginName() {
                            return 'TableToolbar';
                        }
                        afterInit() {
                            const t = this.editor,
                                e = t.t,
                                o = t.plugins.get(Fm),
                                i = t.config.get('table.contentToolbar'),
                                n = t.config.get('table.tableToolbar');
                            i &&
                                o.register('tableContent', {
                                    ariaLabel: e('Table toolbar'),
                                    items: i,
                                    getRelatedElement: ck,
                                }),
                                n &&
                                    o.register('table', {
                                        ariaLabel: e('Table toolbar'),
                                        items: n,
                                        getRelatedElement: lk,
                                    });
                        }
                    },
                ];
                e.default = e_;
            },
        ]).default;
    });
//# sourceMappingURL=ckeditor.js.map
